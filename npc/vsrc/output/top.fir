circuit top :
  extmodule traceregs :
    input input_reg : UInt<64>[32]
    defname = traceregs

  module Register :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : UInt<64>, rdata2 : UInt<64>, flip we : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<64>}

    cmem Reg : UInt<64> [32] @[register.scala 18:18]
    node _T = neq(io.waddr, UInt<1>("h0")) @[register.scala 19:25]
    node _T_1 = and(io.we, _T) @[register.scala 19:15]
    when _T_1 : @[register.scala 19:32]
      infer mport MPORT = Reg[io.waddr], clock @[register.scala 20:12]
      MPORT <= io.wdata @[register.scala 20:23]
    node _io_rdata1_T = eq(io.raddr1, UInt<1>("h0")) @[register.scala 22:31]
    infer mport io_rdata1_MPORT = Reg[io.raddr1], clock @[register.scala 22:45]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, UInt<1>("h0"), io_rdata1_MPORT) @[register.scala 22:21]
    io.rdata1 <= _io_rdata1_T_1 @[register.scala 22:15]
    node _io_rdata2_T = eq(io.raddr2, UInt<1>("h0")) @[register.scala 23:31]
    infer mport io_rdata2_MPORT = Reg[io.raddr2], clock @[register.scala 23:45]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, UInt<1>("h0"), io_rdata2_MPORT) @[register.scala 23:21]
    io.rdata2 <= _io_rdata2_T_1 @[register.scala 23:15]
    inst reg_trace of traceregs @[register.scala 24:27]
    reg_trace.input_reg is invalid
    wire _WIRE : UInt<64>[32] @[register.scala 25:38]
    _WIRE[0] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[1] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[2] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[3] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[4] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[5] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[6] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[7] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[8] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[9] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[10] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[11] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[12] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[13] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[14] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[15] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[16] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[17] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[18] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[19] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[20] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[21] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[22] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[23] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[24] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[25] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[26] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[27] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[28] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[29] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[30] <= UInt<64>("h0") @[register.scala 25:38]
    _WIRE[31] <= UInt<64>("h0") @[register.scala 25:38]
    reg_trace.input_reg[0] <= _WIRE[0] @[register.scala 25:28]
    reg_trace.input_reg[1] <= _WIRE[1] @[register.scala 25:28]
    reg_trace.input_reg[2] <= _WIRE[2] @[register.scala 25:28]
    reg_trace.input_reg[3] <= _WIRE[3] @[register.scala 25:28]
    reg_trace.input_reg[4] <= _WIRE[4] @[register.scala 25:28]
    reg_trace.input_reg[5] <= _WIRE[5] @[register.scala 25:28]
    reg_trace.input_reg[6] <= _WIRE[6] @[register.scala 25:28]
    reg_trace.input_reg[7] <= _WIRE[7] @[register.scala 25:28]
    reg_trace.input_reg[8] <= _WIRE[8] @[register.scala 25:28]
    reg_trace.input_reg[9] <= _WIRE[9] @[register.scala 25:28]
    reg_trace.input_reg[10] <= _WIRE[10] @[register.scala 25:28]
    reg_trace.input_reg[11] <= _WIRE[11] @[register.scala 25:28]
    reg_trace.input_reg[12] <= _WIRE[12] @[register.scala 25:28]
    reg_trace.input_reg[13] <= _WIRE[13] @[register.scala 25:28]
    reg_trace.input_reg[14] <= _WIRE[14] @[register.scala 25:28]
    reg_trace.input_reg[15] <= _WIRE[15] @[register.scala 25:28]
    reg_trace.input_reg[16] <= _WIRE[16] @[register.scala 25:28]
    reg_trace.input_reg[17] <= _WIRE[17] @[register.scala 25:28]
    reg_trace.input_reg[18] <= _WIRE[18] @[register.scala 25:28]
    reg_trace.input_reg[19] <= _WIRE[19] @[register.scala 25:28]
    reg_trace.input_reg[20] <= _WIRE[20] @[register.scala 25:28]
    reg_trace.input_reg[21] <= _WIRE[21] @[register.scala 25:28]
    reg_trace.input_reg[22] <= _WIRE[22] @[register.scala 25:28]
    reg_trace.input_reg[23] <= _WIRE[23] @[register.scala 25:28]
    reg_trace.input_reg[24] <= _WIRE[24] @[register.scala 25:28]
    reg_trace.input_reg[25] <= _WIRE[25] @[register.scala 25:28]
    reg_trace.input_reg[26] <= _WIRE[26] @[register.scala 25:28]
    reg_trace.input_reg[27] <= _WIRE[27] @[register.scala 25:28]
    reg_trace.input_reg[28] <= _WIRE[28] @[register.scala 25:28]
    reg_trace.input_reg[29] <= _WIRE[29] @[register.scala 25:28]
    reg_trace.input_reg[30] <= _WIRE[30] @[register.scala 25:28]
    reg_trace.input_reg[31] <= _WIRE[31] @[register.scala 25:28]
    infer mport reg_trace_io_input_reg_0_MPORT = Reg[UInt<1>("h0")], clock @[register.scala 26:63]
    reg_trace.input_reg[0] <= reg_trace_io_input_reg_0_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_1_MPORT = Reg[UInt<1>("h1")], clock @[register.scala 26:63]
    reg_trace.input_reg[1] <= reg_trace_io_input_reg_1_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_2_MPORT = Reg[UInt<2>("h2")], clock @[register.scala 26:63]
    reg_trace.input_reg[2] <= reg_trace_io_input_reg_2_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_3_MPORT = Reg[UInt<2>("h3")], clock @[register.scala 26:63]
    reg_trace.input_reg[3] <= reg_trace_io_input_reg_3_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_4_MPORT = Reg[UInt<3>("h4")], clock @[register.scala 26:63]
    reg_trace.input_reg[4] <= reg_trace_io_input_reg_4_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_5_MPORT = Reg[UInt<3>("h5")], clock @[register.scala 26:63]
    reg_trace.input_reg[5] <= reg_trace_io_input_reg_5_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_6_MPORT = Reg[UInt<3>("h6")], clock @[register.scala 26:63]
    reg_trace.input_reg[6] <= reg_trace_io_input_reg_6_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_7_MPORT = Reg[UInt<3>("h7")], clock @[register.scala 26:63]
    reg_trace.input_reg[7] <= reg_trace_io_input_reg_7_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_8_MPORT = Reg[UInt<4>("h8")], clock @[register.scala 26:63]
    reg_trace.input_reg[8] <= reg_trace_io_input_reg_8_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_9_MPORT = Reg[UInt<4>("h9")], clock @[register.scala 26:63]
    reg_trace.input_reg[9] <= reg_trace_io_input_reg_9_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_10_MPORT = Reg[UInt<4>("ha")], clock @[register.scala 26:63]
    reg_trace.input_reg[10] <= reg_trace_io_input_reg_10_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_11_MPORT = Reg[UInt<4>("hb")], clock @[register.scala 26:63]
    reg_trace.input_reg[11] <= reg_trace_io_input_reg_11_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_12_MPORT = Reg[UInt<4>("hc")], clock @[register.scala 26:63]
    reg_trace.input_reg[12] <= reg_trace_io_input_reg_12_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_13_MPORT = Reg[UInt<4>("hd")], clock @[register.scala 26:63]
    reg_trace.input_reg[13] <= reg_trace_io_input_reg_13_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_14_MPORT = Reg[UInt<4>("he")], clock @[register.scala 26:63]
    reg_trace.input_reg[14] <= reg_trace_io_input_reg_14_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_15_MPORT = Reg[UInt<4>("hf")], clock @[register.scala 26:63]
    reg_trace.input_reg[15] <= reg_trace_io_input_reg_15_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_16_MPORT = Reg[UInt<5>("h10")], clock @[register.scala 26:63]
    reg_trace.input_reg[16] <= reg_trace_io_input_reg_16_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_17_MPORT = Reg[UInt<5>("h11")], clock @[register.scala 26:63]
    reg_trace.input_reg[17] <= reg_trace_io_input_reg_17_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_18_MPORT = Reg[UInt<5>("h12")], clock @[register.scala 26:63]
    reg_trace.input_reg[18] <= reg_trace_io_input_reg_18_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_19_MPORT = Reg[UInt<5>("h13")], clock @[register.scala 26:63]
    reg_trace.input_reg[19] <= reg_trace_io_input_reg_19_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_20_MPORT = Reg[UInt<5>("h14")], clock @[register.scala 26:63]
    reg_trace.input_reg[20] <= reg_trace_io_input_reg_20_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_21_MPORT = Reg[UInt<5>("h15")], clock @[register.scala 26:63]
    reg_trace.input_reg[21] <= reg_trace_io_input_reg_21_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_22_MPORT = Reg[UInt<5>("h16")], clock @[register.scala 26:63]
    reg_trace.input_reg[22] <= reg_trace_io_input_reg_22_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_23_MPORT = Reg[UInt<5>("h17")], clock @[register.scala 26:63]
    reg_trace.input_reg[23] <= reg_trace_io_input_reg_23_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_24_MPORT = Reg[UInt<5>("h18")], clock @[register.scala 26:63]
    reg_trace.input_reg[24] <= reg_trace_io_input_reg_24_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_25_MPORT = Reg[UInt<5>("h19")], clock @[register.scala 26:63]
    reg_trace.input_reg[25] <= reg_trace_io_input_reg_25_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_26_MPORT = Reg[UInt<5>("h1a")], clock @[register.scala 26:63]
    reg_trace.input_reg[26] <= reg_trace_io_input_reg_26_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_27_MPORT = Reg[UInt<5>("h1b")], clock @[register.scala 26:63]
    reg_trace.input_reg[27] <= reg_trace_io_input_reg_27_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_28_MPORT = Reg[UInt<5>("h1c")], clock @[register.scala 26:63]
    reg_trace.input_reg[28] <= reg_trace_io_input_reg_28_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_29_MPORT = Reg[UInt<5>("h1d")], clock @[register.scala 26:63]
    reg_trace.input_reg[29] <= reg_trace_io_input_reg_29_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_30_MPORT = Reg[UInt<5>("h1e")], clock @[register.scala 26:63]
    reg_trace.input_reg[30] <= reg_trace_io_input_reg_30_MPORT @[register.scala 26:57]
    infer mport reg_trace_io_input_reg_31_MPORT = Reg[UInt<5>("h1f")], clock @[register.scala 26:63]
    reg_trace.input_reg[31] <= reg_trace_io_input_reg_31_MPORT @[register.scala 26:57]

  module IFU :
    input clock : Clock
    input reset : Reset
    output io : { flip ds_allowin : UInt<1>, flip ds_ready_go : UInt<1>, flip ds_valid : UInt<1>, flip br_taken : UInt<1>, flip br_target : UInt<64>, to_ds_pc : UInt<64>, fs_to_ds_valid : UInt<1>, inst : UInt<32>, flip axi_in : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, axi_out : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, pc_next : UInt<64>, flip fence : UInt<1>, clear_cache : UInt<1>, flip cache_init : UInt<1>}

    reg br_target : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IFU.scala 31:28]
    node _T = and(io.ds_valid, io.ds_ready_go) @[IFU.scala 32:22]
    when _T : @[IFU.scala 32:40]
      br_target <= io.br_target @[IFU.scala 33:19]
    reg fs_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IFU.scala 36:27]
    wire fs_ready_go : UInt<1> @[IFU.scala 37:27]
    wire fs_to_ds_valid : UInt<1> @[IFU.scala 38:30]
    wire to_fs_valid : UInt<1> @[IFU.scala 39:27]
    wire fs_allowin : UInt<1> @[IFU.scala 40:26]
    wire pc_next : UInt<64> @[IFU.scala 41:23]
    reg fs_pc_next : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IFU.scala 42:29]
    reg cache_init : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IFU.scala 43:29]
    when io.cache_init : @[IFU.scala 44:24]
      cache_init <= UInt<1>("h1") @[IFU.scala 45:20]
    else :
      node _T_1 = and(fs_to_ds_valid, io.ds_allowin) @[IFU.scala 46:31]
      node _T_2 = and(_T_1, cache_init) @[IFU.scala 46:47]
      when _T_2 : @[IFU.scala 46:60]
        cache_init <= UInt<1>("h0") @[IFU.scala 47:20]
    reg fs_pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h7ffffffc")) @[IFU.scala 50:24]
    reg fs_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IFU.scala 51:26]
    to_fs_valid <= io.axi_in.rvalid @[IFU.scala 53:17]
    node _io_clear_cache_T = eq(cache_init, UInt<1>("h0")) @[IFU.scala 55:35]
    node _io_clear_cache_T_1 = and(io.fence, _io_clear_cache_T) @[IFU.scala 55:32]
    io.clear_cache <= _io_clear_cache_T_1 @[IFU.scala 55:20]
    node _seq_pc_T = add(fs_pc, UInt<3>("h4")) @[IFU.scala 74:24]
    node seq_pc = tail(_seq_pc_T, 1) @[IFU.scala 74:24]
    node _pc_next_T = mux(io.ds_valid, io.br_target, br_target) @[IFU.scala 75:35]
    node _pc_next_T_1 = mux(io.br_taken, _pc_next_T, seq_pc) @[IFU.scala 75:19]
    pc_next <= _pc_next_T_1 @[IFU.scala 75:13]
    node _T_3 = and(io.axi_in.arready, io.ds_ready_go) @[IFU.scala 76:28]
    when _T_3 : @[IFU.scala 76:46]
      fs_pc_next <= pc_next @[IFU.scala 77:20]
    fs_ready_go <= fs_valid @[IFU.scala 81:17]
    node _fs_to_ds_valid_T = and(fs_valid, fs_ready_go) @[IFU.scala 82:33]
    fs_to_ds_valid <= _fs_to_ds_valid_T @[IFU.scala 82:20]
    node _fs_allowin_T = eq(fs_valid, UInt<1>("h0")) @[IFU.scala 83:19]
    node _fs_allowin_T_1 = and(fs_ready_go, io.ds_allowin) @[IFU.scala 83:45]
    node _fs_allowin_T_2 = or(_fs_allowin_T, _fs_allowin_T_1) @[IFU.scala 83:29]
    fs_allowin <= _fs_allowin_T_2 @[IFU.scala 83:16]
    when fs_allowin : @[IFU.scala 84:21]
      fs_valid <= to_fs_valid @[IFU.scala 85:18]
    node _T_4 = and(to_fs_valid, fs_allowin) @[IFU.scala 87:22]
    when _T_4 : @[IFU.scala 87:36]
      fs_pc <= fs_pc_next @[IFU.scala 88:15]
      node _fs_inst_T = bits(io.axi_in.rdata, 31, 0) @[IFU.scala 89:35]
      fs_inst <= _fs_inst_T @[IFU.scala 89:17]
    io.fs_to_ds_valid <= fs_to_ds_valid @[IFU.scala 94:23]
    io.to_ds_pc <= fs_pc @[IFU.scala 95:17]
    io.axi_out.araddr <= pc_next @[IFU.scala 105:23]
    io.axi_out.arvalid <= io.ds_ready_go @[IFU.scala 106:24]
    io.axi_out.arlen <= UInt<1>("h0") @[IFU.scala 107:22]
    io.axi_out.arsize <= UInt<3>("h6") @[IFU.scala 108:23]
    io.axi_out.arburst <= UInt<1>("h0") @[IFU.scala 109:24]
    io.axi_out.rready <= fs_allowin @[IFU.scala 110:23]
    io.axi_out.awaddr <= UInt<1>("h0") @[IFU.scala 111:23]
    io.axi_out.wdata <= UInt<1>("h0") @[IFU.scala 112:22]
    io.axi_out.awvalid <= UInt<1>("h0") @[IFU.scala 113:24]
    io.axi_out.awburst <= UInt<1>("h0") @[IFU.scala 114:24]
    io.axi_out.awlen <= UInt<1>("h0") @[IFU.scala 115:22]
    io.axi_out.awsize <= UInt<3>("h6") @[IFU.scala 116:23]
    io.axi_out.wstrb <= UInt<1>("h0") @[IFU.scala 117:22]
    io.axi_out.wvalid <= UInt<1>("h0") @[IFU.scala 118:23]
    io.axi_out.wlast <= UInt<1>("h0") @[IFU.scala 119:22]
    io.axi_out.bready <= UInt<1>("h0") @[IFU.scala 120:23]
    io.inst <= fs_inst @[IFU.scala 121:13]
    io.pc_next <= pc_next @[IFU.scala 122:16]

  module csr_reg :
    input clock : Clock
    input reset : Reset
    output io : { flip wen1 : UInt<1>, flip wen2 : UInt<1>, flip waddr1 : UInt<2>, flip waddr2 : UInt<2>, flip wdata1 : UInt<64>, flip wdata2 : UInt<64>, flip raddr : UInt<2>, rdata : UInt<64>}

    cmem CSR_Reg : UInt<64> [4] @[csr_reg.scala 19:22]
    when io.wen1 : @[csr_reg.scala 20:18]
      infer mport MPORT = CSR_Reg[io.waddr1], clock @[csr_reg.scala 21:16]
      MPORT <= io.wdata1 @[csr_reg.scala 21:28]
    when io.wen2 : @[csr_reg.scala 23:18]
      infer mport MPORT_1 = CSR_Reg[io.waddr2], clock @[csr_reg.scala 24:16]
      MPORT_1 <= io.wdata2 @[csr_reg.scala 24:28]
    infer mport io_rdata_MPORT = CSR_Reg[io.raddr], clock @[csr_reg.scala 26:24]
    io.rdata <= io_rdata_MPORT @[csr_reg.scala 26:14]

  module IDU :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<64>, flip fs_to_ds_valid : UInt<1>, ds_to_es_valid : UInt<1>, flip es_allowin : UInt<1>, flip from_fs_inst : UInt<32>, br_taken : UInt<1>, br_target : UInt<64>, ds_allowin : UInt<1>, ds_ready_go : UInt<1>, fence : UInt<1>, raddr1 : UInt<5>, raddr2 : UInt<5>, flip rdata1 : UInt<64>, flip rdata2 : UInt<64>, to_es_pc : UInt<64>, ALUop : UInt<32>, src1 : UInt<64>, src2 : UInt<64>, rf_dst : UInt<5>, store_data : UInt<64>, ctrl_sign : { reg_write : UInt<1>, csr_write : UInt<1>, Writemem_en : UInt<1>, Readmem_en : UInt<1>, Wmask : UInt<8>}, load_type : UInt<3>, flip es_ld : UInt<1>, flip es_fwd_res : UInt<64>, flip ms_fwd_res : UInt<64>, flip ws_fwd_res : UInt<64>, flip es_fwd_ready : UInt<1>, flip ms_fwd_ready : UInt<1>, flip ws_fwd_ready : UInt<1>, flip es_rf_we : UInt<1>, flip ms_rf_we : UInt<1>, flip ws_rf_we : UInt<1>, flip es_valid : UInt<1>, flip ms_valid : UInt<1>, flip ws_valid : UInt<1>, flip es_rf_dst : UInt<5>, flip ms_rf_dst : UInt<5>, flip ws_rf_dst : UInt<5>, ds_valid : UInt<1>}

    wire opcode : UInt<7> @[IDU.scala 58:22]
    wire funct3 : UInt<3> @[IDU.scala 59:22]
    wire funct7 : UInt<7> @[IDU.scala 60:22]
    wire rs2 : UInt<5> @[IDU.scala 61:19]
    wire rs1 : UInt<5> @[IDU.scala 62:19]
    wire rd : UInt<5> @[IDU.scala 63:18]
    wire imm : UInt<64> @[IDU.scala 64:19]
    wire ALUop : UInt<32> @[IDU.scala 65:21]
    wire inst_type : UInt<32> @[IDU.scala 66:25]
    wire src1 : UInt<64> @[IDU.scala 68:20]
    wire src2 : UInt<64> @[IDU.scala 69:20]
    wire reg_write : UInt<1> @[IDU.scala 71:25]
    wire src2_is_imm : UInt<1> @[IDU.scala 73:27]
    wire src1_is_pc : UInt<1> @[IDU.scala 74:26]
    wire Writemem_en : UInt<1> @[IDU.scala 75:27]
    wire Readmem_en : UInt<1> @[IDU.scala 76:26]
    wire Wmask : UInt<8> @[IDU.scala 77:21]
    wire load_type : UInt<3> @[IDU.scala 78:25]
    wire csr_write : UInt<2> @[IDU.scala 79:25]
    wire fence : UInt<1> @[IDU.scala 80:21]
    reg ds_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDU.scala 112:27]
    wire ds_ready_go : UInt<1> @[IDU.scala 113:27]
    wire ds_to_es_valid : UInt<1> @[IDU.scala 114:30]
    wire ds_allowin : UInt<1> @[IDU.scala 115:26]
    reg ds_pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IDU.scala 116:24]
    reg inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IDU.scala 118:23]
    wire br_target : UInt<64> @[IDU.scala 120:25]
    wire br_taken : UInt<1> @[IDU.scala 121:24]
    reg br_taken_cancel : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDU.scala 122:34]
    wire conflict_es_rs1 : UInt<1> @[IDU.scala 123:31]
    wire conflict_ms_rs1 : UInt<1> @[IDU.scala 124:31]
    wire conflict_ws_rs1 : UInt<1> @[IDU.scala 125:31]
    wire conflict_es_rs2 : UInt<1> @[IDU.scala 126:31]
    wire conflict_ms_rs2 : UInt<1> @[IDU.scala 127:31]
    wire conflict_ws_rs2 : UInt<1> @[IDU.scala 128:31]
    wire rdata1 : UInt<64> @[IDU.scala 129:22]
    wire rdata2 : UInt<64> @[IDU.scala 130:22]
    node _T = and(ds_allowin, io.fs_to_ds_valid) @[IDU.scala 133:21]
    node _T_1 = and(_T, br_taken) @[IDU.scala 133:42]
    node _T_2 = eq(br_taken_cancel, UInt<1>("h0")) @[IDU.scala 133:57]
    node _T_3 = and(_T_1, _T_2) @[IDU.scala 133:54]
    when _T_3 : @[IDU.scala 133:74]
      br_taken_cancel <= UInt<1>("h1") @[IDU.scala 134:25]
    else :
      node _T_4 = and(ds_allowin, io.fs_to_ds_valid) @[IDU.scala 135:27]
      node _T_5 = and(_T_4, br_taken_cancel) @[IDU.scala 135:48]
      when _T_5 : @[IDU.scala 135:67]
        br_taken_cancel <= UInt<1>("h0") @[IDU.scala 136:25]
    node _T_6 = eq(br_taken_cancel, UInt<1>("h0")) @[IDU.scala 140:22]
    node _T_7 = and(br_taken, _T_6) @[IDU.scala 140:19]
    node _T_8 = and(_T_7, ds_allowin) @[IDU.scala 140:39]
    when _T_8 : @[IDU.scala 140:53]
      ds_valid <= UInt<1>("h0") @[IDU.scala 141:18]
    else :
      when ds_allowin : @[IDU.scala 142:27]
        ds_valid <= io.fs_to_ds_valid @[IDU.scala 143:18]
    node _T_9 = and(io.fs_to_ds_valid, ds_allowin) @[IDU.scala 145:27]
    node _T_10 = eq(br_taken_cancel, UInt<1>("h0")) @[IDU.scala 145:57]
    node _T_11 = and(br_taken, _T_10) @[IDU.scala 145:54]
    node _T_12 = eq(_T_11, UInt<1>("h0")) @[IDU.scala 145:43]
    node _T_13 = and(_T_9, _T_12) @[IDU.scala 145:40]
    when _T_13 : @[IDU.scala 145:75]
      ds_pc <= io.pc @[IDU.scala 146:15]
      inst <= io.from_fs_inst @[IDU.scala 147:14]
    node _ds_ready_go_T = eq(io.es_ld, UInt<1>("h0")) @[IDU.scala 150:59]
    node _ds_ready_go_T_1 = and(io.es_fwd_ready, _ds_ready_go_T) @[IDU.scala 150:56]
    node _ds_ready_go_T_2 = and(conflict_es_rs1, _ds_ready_go_T_1) @[IDU.scala 150:38]
    node _ds_ready_go_T_3 = eq(conflict_es_rs1, UInt<1>("h0")) @[IDU.scala 150:73]
    node _ds_ready_go_T_4 = and(_ds_ready_go_T_3, conflict_ms_rs1) @[IDU.scala 150:91]
    node _ds_ready_go_T_5 = and(_ds_ready_go_T_4, io.ms_fwd_ready) @[IDU.scala 150:110]
    node _ds_ready_go_T_6 = or(_ds_ready_go_T_2, _ds_ready_go_T_5) @[IDU.scala 150:70]
    node _ds_ready_go_T_7 = eq(conflict_es_rs1, UInt<1>("h0")) @[IDU.scala 150:131]
    node _ds_ready_go_T_8 = eq(conflict_ms_rs1, UInt<1>("h0")) @[IDU.scala 150:152]
    node _ds_ready_go_T_9 = and(_ds_ready_go_T_7, _ds_ready_go_T_8) @[IDU.scala 150:149]
    node _ds_ready_go_T_10 = and(_ds_ready_go_T_9, conflict_ws_rs1) @[IDU.scala 150:171]
    node _ds_ready_go_T_11 = and(_ds_ready_go_T_10, io.ws_fwd_ready) @[IDU.scala 150:190]
    node _ds_ready_go_T_12 = or(_ds_ready_go_T_6, _ds_ready_go_T_11) @[IDU.scala 150:128]
    node _ds_ready_go_T_13 = or(conflict_es_rs1, conflict_ms_rs1) @[IDU.scala 150:228]
    node _ds_ready_go_T_14 = or(_ds_ready_go_T_13, conflict_ws_rs1) @[IDU.scala 150:245]
    node _ds_ready_go_T_15 = eq(_ds_ready_go_T_14, UInt<1>("h0")) @[IDU.scala 150:211]
    node _ds_ready_go_T_16 = or(_ds_ready_go_T_12, _ds_ready_go_T_15) @[IDU.scala 150:208]
    node _ds_ready_go_T_17 = eq(io.es_ld, UInt<1>("h0")) @[IDU.scala 150:308]
    node _ds_ready_go_T_18 = and(io.es_fwd_ready, _ds_ready_go_T_17) @[IDU.scala 150:305]
    node _ds_ready_go_T_19 = and(conflict_es_rs2, _ds_ready_go_T_18) @[IDU.scala 150:286]
    node _ds_ready_go_T_20 = eq(conflict_es_rs2, UInt<1>("h0")) @[IDU.scala 150:322]
    node _ds_ready_go_T_21 = and(_ds_ready_go_T_20, conflict_ms_rs2) @[IDU.scala 150:341]
    node _ds_ready_go_T_22 = and(_ds_ready_go_T_21, io.ms_fwd_ready) @[IDU.scala 150:361]
    node _ds_ready_go_T_23 = or(_ds_ready_go_T_19, _ds_ready_go_T_22) @[IDU.scala 150:319]
    node _ds_ready_go_T_24 = eq(conflict_es_rs2, UInt<1>("h0")) @[IDU.scala 150:382]
    node _ds_ready_go_T_25 = eq(conflict_ms_rs2, UInt<1>("h0")) @[IDU.scala 150:403]
    node _ds_ready_go_T_26 = and(_ds_ready_go_T_24, _ds_ready_go_T_25) @[IDU.scala 150:400]
    node _ds_ready_go_T_27 = and(_ds_ready_go_T_26, conflict_ws_rs2) @[IDU.scala 150:422]
    node _ds_ready_go_T_28 = and(_ds_ready_go_T_27, io.ws_fwd_ready) @[IDU.scala 150:441]
    node _ds_ready_go_T_29 = or(_ds_ready_go_T_23, _ds_ready_go_T_28) @[IDU.scala 150:379]
    node _ds_ready_go_T_30 = or(conflict_es_rs2, conflict_ms_rs2) @[IDU.scala 150:479]
    node _ds_ready_go_T_31 = or(_ds_ready_go_T_30, conflict_ws_rs2) @[IDU.scala 150:496]
    node _ds_ready_go_T_32 = eq(_ds_ready_go_T_31, UInt<1>("h0")) @[IDU.scala 150:462]
    node _ds_ready_go_T_33 = or(_ds_ready_go_T_29, _ds_ready_go_T_32) @[IDU.scala 150:459]
    node _ds_ready_go_T_34 = and(_ds_ready_go_T_16, _ds_ready_go_T_33) @[IDU.scala 150:265]
    ds_ready_go <= _ds_ready_go_T_34 @[IDU.scala 150:17]
    node _ds_to_es_valid_T = and(ds_valid, ds_ready_go) @[IDU.scala 151:32]
    ds_to_es_valid <= _ds_to_es_valid_T @[IDU.scala 151:20]
    node _ds_allowin_T = eq(ds_valid, UInt<1>("h0")) @[IDU.scala 152:19]
    node _ds_allowin_T_1 = and(ds_ready_go, io.es_allowin) @[IDU.scala 152:45]
    node _ds_allowin_T_2 = or(_ds_allowin_T, _ds_allowin_T_1) @[IDU.scala 152:29]
    ds_allowin <= _ds_allowin_T_2 @[IDU.scala 152:16]
    io.ds_ready_go <= ds_ready_go @[IDU.scala 153:20]
    node _opcode_T = bits(inst, 6, 0) @[IDU.scala 223:19]
    opcode <= _opcode_T @[IDU.scala 223:12]
    node _funct3_T = bits(inst, 14, 12) @[IDU.scala 224:19]
    funct3 <= _funct3_T @[IDU.scala 224:12]
    node _funct7_T = bits(inst, 31, 25) @[IDU.scala 225:19]
    funct7 <= _funct7_T @[IDU.scala 225:12]
    node _rs2_T = bits(csr_write, 0, 0) @[IDU.scala 226:25]
    node _rs2_T_1 = eq(_rs2_T, UInt<1>("h1")) @[IDU.scala 226:28]
    node _rs2_T_2 = bits(inst, 24, 20) @[IDU.scala 226:44]
    node _rs2_T_3 = mux(_rs2_T_1, UInt<5>("h11"), _rs2_T_2) @[IDU.scala 226:15]
    rs2 <= _rs2_T_3 @[IDU.scala 226:9]
    node _rs1_T = bits(inst, 19, 15) @[IDU.scala 227:16]
    rs1 <= _rs1_T @[IDU.scala 227:9]
    node _rd_T = bits(inst, 11, 7) @[IDU.scala 228:15]
    rd <= _rd_T @[IDU.scala 228:8]
    io.raddr1 <= rs1 @[IDU.scala 229:15]
    io.raddr2 <= rs2 @[IDU.scala 230:15]
    node _fence_T = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _fence_T_1 = eq(UInt<13>("h100f"), _fence_T) @[Lookup.scala 31:38]
    node _fence_T_2 = mux(_fence_T_1, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    fence <= _fence_T_2 @[IDU.scala 232:11]
    io.fence <= fence @[IDU.scala 235:14]
    node _inst_type_T = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_1 = eq(UInt<5>("h13"), _inst_type_T) @[Lookup.scala 31:38]
    node _inst_type_T_2 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _inst_type_T_3 = eq(UInt<5>("h17"), _inst_type_T_2) @[Lookup.scala 31:38]
    node _inst_type_T_4 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _inst_type_T_5 = eq(UInt<6>("h37"), _inst_type_T_4) @[Lookup.scala 31:38]
    node _inst_type_T_6 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _inst_type_T_7 = eq(UInt<7>("h6f"), _inst_type_T_6) @[Lookup.scala 31:38]
    node _inst_type_T_8 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_9 = eq(UInt<7>("h67"), _inst_type_T_8) @[Lookup.scala 31:38]
    node _inst_type_T_10 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_11 = eq(UInt<14>("h3023"), _inst_type_T_10) @[Lookup.scala 31:38]
    node _inst_type_T_12 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_13 = eq(UInt<14>("h3013"), _inst_type_T_12) @[Lookup.scala 31:38]
    node _inst_type_T_14 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_15 = eq(UInt<14>("h2003"), _inst_type_T_14) @[Lookup.scala 31:38]
    node _inst_type_T_16 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_17 = eq(UInt<6>("h3b"), _inst_type_T_16) @[Lookup.scala 31:38]
    node _inst_type_T_18 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_19 = eq(UInt<31>("h40000033"), _inst_type_T_18) @[Lookup.scala 31:38]
    node _inst_type_T_20 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_21 = eq(UInt<13>("h1063"), _inst_type_T_20) @[Lookup.scala 31:38]
    node _inst_type_T_22 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_23 = eq(UInt<7>("h63"), _inst_type_T_22) @[Lookup.scala 31:38]
    node _inst_type_T_24 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_25 = eq(UInt<14>("h3003"), _inst_type_T_24) @[Lookup.scala 31:38]
    node _inst_type_T_26 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_27 = eq(UInt<5>("h1b"), _inst_type_T_26) @[Lookup.scala 31:38]
    node _inst_type_T_28 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_29 = eq(UInt<6>("h33"), _inst_type_T_28) @[Lookup.scala 31:38]
    node _inst_type_T_30 = and(inst, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_31 = eq(UInt<31>("h40005013"), _inst_type_T_30) @[Lookup.scala 31:38]
    node _inst_type_T_32 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_33 = eq(UInt<15>("h4003"), _inst_type_T_32) @[Lookup.scala 31:38]
    node _inst_type_T_34 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_35 = eq(UInt<13>("h1023"), _inst_type_T_34) @[Lookup.scala 31:38]
    node _inst_type_T_36 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_37 = eq(UInt<6>("h23"), _inst_type_T_36) @[Lookup.scala 31:38]
    node _inst_type_T_38 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_39 = eq(UInt<15>("h6033"), _inst_type_T_38) @[Lookup.scala 31:38]
    node _inst_type_T_40 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_41 = eq(UInt<15>("h4013"), _inst_type_T_40) @[Lookup.scala 31:38]
    node _inst_type_T_42 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_43 = eq(UInt<15>("h7033"), _inst_type_T_42) @[Lookup.scala 31:38]
    node _inst_type_T_44 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_45 = eq(UInt<15>("h7013"), _inst_type_T_44) @[Lookup.scala 31:38]
    node _inst_type_T_46 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_47 = eq(UInt<31>("h4000003b"), _inst_type_T_46) @[Lookup.scala 31:38]
    node _inst_type_T_48 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_49 = eq(UInt<13>("h103b"), _inst_type_T_48) @[Lookup.scala 31:38]
    node _inst_type_T_50 = and(inst, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_51 = eq(UInt<13>("h1013"), _inst_type_T_50) @[Lookup.scala 31:38]
    node _inst_type_T_52 = and(inst, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_53 = eq(UInt<15>("h5013"), _inst_type_T_52) @[Lookup.scala 31:38]
    node _inst_type_T_54 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_55 = eq(UInt<13>("h101b"), _inst_type_T_54) @[Lookup.scala 31:38]
    node _inst_type_T_56 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_57 = eq(UInt<31>("h4000501b"), _inst_type_T_56) @[Lookup.scala 31:38]
    node _inst_type_T_58 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_59 = eq(UInt<15>("h501b"), _inst_type_T_58) @[Lookup.scala 31:38]
    node _inst_type_T_60 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_61 = eq(UInt<31>("h4000503b"), _inst_type_T_60) @[Lookup.scala 31:38]
    node _inst_type_T_62 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_63 = eq(UInt<15>("h503b"), _inst_type_T_62) @[Lookup.scala 31:38]
    node _inst_type_T_64 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_65 = eq(UInt<14>("h3033"), _inst_type_T_64) @[Lookup.scala 31:38]
    node _inst_type_T_66 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_67 = eq(UInt<14>("h2033"), _inst_type_T_66) @[Lookup.scala 31:38]
    node _inst_type_T_68 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_69 = eq(UInt<15>("h5063"), _inst_type_T_68) @[Lookup.scala 31:38]
    node _inst_type_T_70 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_71 = eq(UInt<15>("h4063"), _inst_type_T_70) @[Lookup.scala 31:38]
    node _inst_type_T_72 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_73 = eq(UInt<15>("h6063"), _inst_type_T_72) @[Lookup.scala 31:38]
    node _inst_type_T_74 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_75 = eq(UInt<14>("h2023"), _inst_type_T_74) @[Lookup.scala 31:38]
    node _inst_type_T_76 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_77 = eq(UInt<13>("h1003"), _inst_type_T_76) @[Lookup.scala 31:38]
    node _inst_type_T_78 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_79 = eq(UInt<15>("h5003"), _inst_type_T_78) @[Lookup.scala 31:38]
    node _inst_type_T_80 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_81 = eq(UInt<26>("h2000033"), _inst_type_T_80) @[Lookup.scala 31:38]
    node _inst_type_T_82 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_83 = eq(UInt<26>("h200003b"), _inst_type_T_82) @[Lookup.scala 31:38]
    node _inst_type_T_84 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_85 = eq(UInt<26>("h200403b"), _inst_type_T_84) @[Lookup.scala 31:38]
    node _inst_type_T_86 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_87 = eq(UInt<26>("h200603b"), _inst_type_T_86) @[Lookup.scala 31:38]
    node _inst_type_T_88 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_89 = eq(UInt<15>("h4033"), _inst_type_T_88) @[Lookup.scala 31:38]
    node _inst_type_T_90 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_91 = eq(UInt<15>("h6013"), _inst_type_T_90) @[Lookup.scala 31:38]
    node _inst_type_T_92 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_93 = eq(UInt<26>("h2005033"), _inst_type_T_92) @[Lookup.scala 31:38]
    node _inst_type_T_94 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_95 = eq(UInt<26>("h2004033"), _inst_type_T_94) @[Lookup.scala 31:38]
    node _inst_type_T_96 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_97 = eq(UInt<26>("h200503b"), _inst_type_T_96) @[Lookup.scala 31:38]
    node _inst_type_T_98 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_99 = eq(UInt<26>("h200703b"), _inst_type_T_98) @[Lookup.scala 31:38]
    node _inst_type_T_100 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_101 = eq(UInt<26>("h2007033"), _inst_type_T_100) @[Lookup.scala 31:38]
    node _inst_type_T_102 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_103 = eq(UInt<26>("h2006033"), _inst_type_T_102) @[Lookup.scala 31:38]
    node _inst_type_T_104 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_105 = eq(UInt<13>("h1033"), _inst_type_T_104) @[Lookup.scala 31:38]
    node _inst_type_T_106 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_107 = eq(UInt<15>("h5033"), _inst_type_T_106) @[Lookup.scala 31:38]
    node _inst_type_T_108 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _inst_type_T_109 = eq(UInt<31>("h40005033"), _inst_type_T_108) @[Lookup.scala 31:38]
    node _inst_type_T_110 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_111 = eq(UInt<14>("h2013"), _inst_type_T_110) @[Lookup.scala 31:38]
    node _inst_type_T_112 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_113 = eq(UInt<15>("h6003"), _inst_type_T_112) @[Lookup.scala 31:38]
    node _inst_type_T_114 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_115 = eq(UInt<2>("h3"), _inst_type_T_114) @[Lookup.scala 31:38]
    node _inst_type_T_116 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_117 = eq(UInt<15>("h7063"), _inst_type_T_116) @[Lookup.scala 31:38]
    node _inst_type_T_118 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _inst_type_T_119 = eq(UInt<7>("h73"), _inst_type_T_118) @[Lookup.scala 31:38]
    node _inst_type_T_120 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_121 = eq(UInt<13>("h1073"), _inst_type_T_120) @[Lookup.scala 31:38]
    node _inst_type_T_122 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_123 = eq(UInt<14>("h2073"), _inst_type_T_122) @[Lookup.scala 31:38]
    node _inst_type_T_124 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _inst_type_T_125 = eq(UInt<14>("h3073"), _inst_type_T_124) @[Lookup.scala 31:38]
    node _inst_type_T_126 = mux(_inst_type_T_125, UInt<7>("h40"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _inst_type_T_127 = mux(_inst_type_T_123, UInt<7>("h40"), _inst_type_T_126) @[Lookup.scala 34:39]
    node _inst_type_T_128 = mux(_inst_type_T_121, UInt<7>("h40"), _inst_type_T_127) @[Lookup.scala 34:39]
    node _inst_type_T_129 = mux(_inst_type_T_119, UInt<7>("h40"), _inst_type_T_128) @[Lookup.scala 34:39]
    node _inst_type_T_130 = mux(_inst_type_T_117, UInt<7>("h45"), _inst_type_T_129) @[Lookup.scala 34:39]
    node _inst_type_T_131 = mux(_inst_type_T_115, UInt<7>("h40"), _inst_type_T_130) @[Lookup.scala 34:39]
    node _inst_type_T_132 = mux(_inst_type_T_113, UInt<7>("h40"), _inst_type_T_131) @[Lookup.scala 34:39]
    node _inst_type_T_133 = mux(_inst_type_T_111, UInt<7>("h40"), _inst_type_T_132) @[Lookup.scala 34:39]
    node _inst_type_T_134 = mux(_inst_type_T_109, UInt<7>("h41"), _inst_type_T_133) @[Lookup.scala 34:39]
    node _inst_type_T_135 = mux(_inst_type_T_107, UInt<7>("h41"), _inst_type_T_134) @[Lookup.scala 34:39]
    node _inst_type_T_136 = mux(_inst_type_T_105, UInt<7>("h41"), _inst_type_T_135) @[Lookup.scala 34:39]
    node _inst_type_T_137 = mux(_inst_type_T_103, UInt<7>("h41"), _inst_type_T_136) @[Lookup.scala 34:39]
    node _inst_type_T_138 = mux(_inst_type_T_101, UInt<7>("h41"), _inst_type_T_137) @[Lookup.scala 34:39]
    node _inst_type_T_139 = mux(_inst_type_T_99, UInt<7>("h41"), _inst_type_T_138) @[Lookup.scala 34:39]
    node _inst_type_T_140 = mux(_inst_type_T_97, UInt<7>("h41"), _inst_type_T_139) @[Lookup.scala 34:39]
    node _inst_type_T_141 = mux(_inst_type_T_95, UInt<7>("h41"), _inst_type_T_140) @[Lookup.scala 34:39]
    node _inst_type_T_142 = mux(_inst_type_T_93, UInt<7>("h41"), _inst_type_T_141) @[Lookup.scala 34:39]
    node _inst_type_T_143 = mux(_inst_type_T_91, UInt<7>("h40"), _inst_type_T_142) @[Lookup.scala 34:39]
    node _inst_type_T_144 = mux(_inst_type_T_89, UInt<7>("h41"), _inst_type_T_143) @[Lookup.scala 34:39]
    node _inst_type_T_145 = mux(_inst_type_T_87, UInt<7>("h41"), _inst_type_T_144) @[Lookup.scala 34:39]
    node _inst_type_T_146 = mux(_inst_type_T_85, UInt<7>("h41"), _inst_type_T_145) @[Lookup.scala 34:39]
    node _inst_type_T_147 = mux(_inst_type_T_83, UInt<7>("h41"), _inst_type_T_146) @[Lookup.scala 34:39]
    node _inst_type_T_148 = mux(_inst_type_T_81, UInt<7>("h41"), _inst_type_T_147) @[Lookup.scala 34:39]
    node _inst_type_T_149 = mux(_inst_type_T_79, UInt<7>("h40"), _inst_type_T_148) @[Lookup.scala 34:39]
    node _inst_type_T_150 = mux(_inst_type_T_77, UInt<7>("h40"), _inst_type_T_149) @[Lookup.scala 34:39]
    node _inst_type_T_151 = mux(_inst_type_T_75, UInt<7>("h44"), _inst_type_T_150) @[Lookup.scala 34:39]
    node _inst_type_T_152 = mux(_inst_type_T_73, UInt<7>("h45"), _inst_type_T_151) @[Lookup.scala 34:39]
    node _inst_type_T_153 = mux(_inst_type_T_71, UInt<7>("h45"), _inst_type_T_152) @[Lookup.scala 34:39]
    node _inst_type_T_154 = mux(_inst_type_T_69, UInt<7>("h45"), _inst_type_T_153) @[Lookup.scala 34:39]
    node _inst_type_T_155 = mux(_inst_type_T_67, UInt<7>("h41"), _inst_type_T_154) @[Lookup.scala 34:39]
    node _inst_type_T_156 = mux(_inst_type_T_65, UInt<7>("h41"), _inst_type_T_155) @[Lookup.scala 34:39]
    node _inst_type_T_157 = mux(_inst_type_T_63, UInt<7>("h41"), _inst_type_T_156) @[Lookup.scala 34:39]
    node _inst_type_T_158 = mux(_inst_type_T_61, UInt<7>("h41"), _inst_type_T_157) @[Lookup.scala 34:39]
    node _inst_type_T_159 = mux(_inst_type_T_59, UInt<7>("h40"), _inst_type_T_158) @[Lookup.scala 34:39]
    node _inst_type_T_160 = mux(_inst_type_T_57, UInt<7>("h40"), _inst_type_T_159) @[Lookup.scala 34:39]
    node _inst_type_T_161 = mux(_inst_type_T_55, UInt<7>("h40"), _inst_type_T_160) @[Lookup.scala 34:39]
    node _inst_type_T_162 = mux(_inst_type_T_53, UInt<7>("h40"), _inst_type_T_161) @[Lookup.scala 34:39]
    node _inst_type_T_163 = mux(_inst_type_T_51, UInt<7>("h40"), _inst_type_T_162) @[Lookup.scala 34:39]
    node _inst_type_T_164 = mux(_inst_type_T_49, UInt<7>("h41"), _inst_type_T_163) @[Lookup.scala 34:39]
    node _inst_type_T_165 = mux(_inst_type_T_47, UInt<7>("h41"), _inst_type_T_164) @[Lookup.scala 34:39]
    node _inst_type_T_166 = mux(_inst_type_T_45, UInt<7>("h40"), _inst_type_T_165) @[Lookup.scala 34:39]
    node _inst_type_T_167 = mux(_inst_type_T_43, UInt<7>("h41"), _inst_type_T_166) @[Lookup.scala 34:39]
    node _inst_type_T_168 = mux(_inst_type_T_41, UInt<7>("h40"), _inst_type_T_167) @[Lookup.scala 34:39]
    node _inst_type_T_169 = mux(_inst_type_T_39, UInt<7>("h41"), _inst_type_T_168) @[Lookup.scala 34:39]
    node _inst_type_T_170 = mux(_inst_type_T_37, UInt<7>("h44"), _inst_type_T_169) @[Lookup.scala 34:39]
    node _inst_type_T_171 = mux(_inst_type_T_35, UInt<7>("h44"), _inst_type_T_170) @[Lookup.scala 34:39]
    node _inst_type_T_172 = mux(_inst_type_T_33, UInt<7>("h40"), _inst_type_T_171) @[Lookup.scala 34:39]
    node _inst_type_T_173 = mux(_inst_type_T_31, UInt<7>("h40"), _inst_type_T_172) @[Lookup.scala 34:39]
    node _inst_type_T_174 = mux(_inst_type_T_29, UInt<7>("h41"), _inst_type_T_173) @[Lookup.scala 34:39]
    node _inst_type_T_175 = mux(_inst_type_T_27, UInt<7>("h40"), _inst_type_T_174) @[Lookup.scala 34:39]
    node _inst_type_T_176 = mux(_inst_type_T_25, UInt<7>("h40"), _inst_type_T_175) @[Lookup.scala 34:39]
    node _inst_type_T_177 = mux(_inst_type_T_23, UInt<7>("h45"), _inst_type_T_176) @[Lookup.scala 34:39]
    node _inst_type_T_178 = mux(_inst_type_T_21, UInt<7>("h45"), _inst_type_T_177) @[Lookup.scala 34:39]
    node _inst_type_T_179 = mux(_inst_type_T_19, UInt<7>("h41"), _inst_type_T_178) @[Lookup.scala 34:39]
    node _inst_type_T_180 = mux(_inst_type_T_17, UInt<7>("h41"), _inst_type_T_179) @[Lookup.scala 34:39]
    node _inst_type_T_181 = mux(_inst_type_T_15, UInt<7>("h40"), _inst_type_T_180) @[Lookup.scala 34:39]
    node _inst_type_T_182 = mux(_inst_type_T_13, UInt<7>("h40"), _inst_type_T_181) @[Lookup.scala 34:39]
    node _inst_type_T_183 = mux(_inst_type_T_11, UInt<7>("h44"), _inst_type_T_182) @[Lookup.scala 34:39]
    node _inst_type_T_184 = mux(_inst_type_T_9, UInt<7>("h40"), _inst_type_T_183) @[Lookup.scala 34:39]
    node _inst_type_T_185 = mux(_inst_type_T_7, UInt<7>("h43"), _inst_type_T_184) @[Lookup.scala 34:39]
    node _inst_type_T_186 = mux(_inst_type_T_5, UInt<7>("h42"), _inst_type_T_185) @[Lookup.scala 34:39]
    node _inst_type_T_187 = mux(_inst_type_T_3, UInt<7>("h42"), _inst_type_T_186) @[Lookup.scala 34:39]
    node _inst_type_T_188 = mux(_inst_type_T_1, UInt<7>("h40"), _inst_type_T_187) @[Lookup.scala 34:39]
    inst_type <= _inst_type_T_188 @[IDU.scala 237:15]
    node imm_imm = bits(inst, 31, 20) @[IDU.scala 83:23]
    node _imm_T = bits(imm_imm, 11, 11) @[IDU.scala 84:32]
    node _imm_T_1 = bits(_imm_T, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_2 = mux(_imm_T_1, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_3 = cat(_imm_T_2, imm_imm) @[Cat.scala 31:58]
    node _imm_imm_T = bits(inst, 31, 31) @[IDU.scala 91:27]
    node _imm_imm_T_1 = bits(inst, 19, 12) @[IDU.scala 91:37]
    node _imm_imm_T_2 = bits(inst, 20, 20) @[IDU.scala 91:50]
    node _imm_imm_T_3 = bits(inst, 30, 21) @[IDU.scala 91:60]
    node imm_imm_lo = cat(_imm_imm_T_2, _imm_imm_T_3) @[Cat.scala 31:58]
    node imm_imm_hi = cat(_imm_imm_T, _imm_imm_T_1) @[Cat.scala 31:58]
    node imm_imm_1 = cat(imm_imm_hi, imm_imm_lo) @[Cat.scala 31:58]
    node _imm_T_4 = bits(imm_imm_1, 19, 19) @[IDU.scala 92:32]
    node _imm_T_5 = bits(_imm_T_4, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_6 = mux(_imm_T_5, UInt<43>("h7ffffffffff"), UInt<43>("h0")) @[Bitwise.scala 74:12]
    node imm_hi = cat(_imm_T_6, imm_imm_1) @[Cat.scala 31:58]
    node _imm_T_7 = cat(imm_hi, UInt<1>("h0")) @[Cat.scala 31:58]
    node imm_imm_2 = bits(inst, 31, 12) @[IDU.scala 87:23]
    node _imm_T_8 = bits(imm_imm_2, 19, 19) @[IDU.scala 88:32]
    node _imm_T_9 = bits(_imm_T_8, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_10 = mux(_imm_T_9, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_11 = mux(UInt<1>("h0"), UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 74:12]
    node imm_hi_1 = cat(_imm_T_10, imm_imm_2) @[Cat.scala 31:58]
    node _imm_T_12 = cat(imm_hi_1, _imm_T_11) @[Cat.scala 31:58]
    node _imm_imm_T_4 = bits(inst, 31, 25) @[IDU.scala 95:27]
    node _imm_imm_T_5 = bits(inst, 11, 7) @[IDU.scala 95:40]
    node imm_imm_3 = cat(_imm_imm_T_4, _imm_imm_T_5) @[Cat.scala 31:58]
    node _imm_T_13 = bits(imm_imm_3, 11, 11) @[IDU.scala 96:32]
    node _imm_T_14 = bits(_imm_T_13, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_15 = mux(_imm_T_14, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_16 = cat(_imm_T_15, imm_imm_3) @[Cat.scala 31:58]
    node _imm_imm_T_6 = bits(inst, 31, 31) @[IDU.scala 99:27]
    node _imm_imm_T_7 = bits(inst, 7, 7) @[IDU.scala 99:37]
    node _imm_imm_T_8 = bits(inst, 30, 25) @[IDU.scala 99:46]
    node _imm_imm_T_9 = bits(inst, 11, 8) @[IDU.scala 99:59]
    node imm_imm_lo_1 = cat(_imm_imm_T_8, _imm_imm_T_9) @[Cat.scala 31:58]
    node imm_imm_hi_1 = cat(_imm_imm_T_6, _imm_imm_T_7) @[Cat.scala 31:58]
    node imm_imm_4 = cat(imm_imm_hi_1, imm_imm_lo_1) @[Cat.scala 31:58]
    node _imm_T_17 = bits(imm_imm_4, 11, 11) @[IDU.scala 100:32]
    node _imm_T_18 = bits(_imm_T_17, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_19 = mux(_imm_T_18, UInt<51>("h7ffffffffffff"), UInt<51>("h0")) @[Bitwise.scala 74:12]
    node imm_hi_2 = cat(_imm_T_19, imm_imm_4) @[Cat.scala 31:58]
    node _imm_T_20 = cat(imm_hi_2, UInt<1>("h0")) @[Cat.scala 31:58]
    node _imm_T_21 = eq(UInt<7>("h40"), inst_type) @[Mux.scala 81:61]
    node _imm_T_22 = mux(_imm_T_21, _imm_T_3, UInt<1>("h0")) @[Mux.scala 81:58]
    node _imm_T_23 = eq(UInt<7>("h43"), inst_type) @[Mux.scala 81:61]
    node _imm_T_24 = mux(_imm_T_23, _imm_T_7, _imm_T_22) @[Mux.scala 81:58]
    node _imm_T_25 = eq(UInt<7>("h42"), inst_type) @[Mux.scala 81:61]
    node _imm_T_26 = mux(_imm_T_25, _imm_T_12, _imm_T_24) @[Mux.scala 81:58]
    node _imm_T_27 = eq(UInt<7>("h44"), inst_type) @[Mux.scala 81:61]
    node _imm_T_28 = mux(_imm_T_27, _imm_T_16, _imm_T_26) @[Mux.scala 81:58]
    node _imm_T_29 = eq(UInt<7>("h45"), inst_type) @[Mux.scala 81:61]
    node _imm_T_30 = mux(_imm_T_29, _imm_T_20, _imm_T_28) @[Mux.scala 81:58]
    imm <= _imm_T_30 @[IDU.scala 303:9]
    node _ALUop_T = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_1 = eq(UInt<5>("h13"), _ALUop_T) @[Lookup.scala 31:38]
    node _ALUop_T_2 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ALUop_T_3 = eq(UInt<21>("h100073"), _ALUop_T_2) @[Lookup.scala 31:38]
    node _ALUop_T_4 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _ALUop_T_5 = eq(UInt<5>("h17"), _ALUop_T_4) @[Lookup.scala 31:38]
    node _ALUop_T_6 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _ALUop_T_7 = eq(UInt<6>("h37"), _ALUop_T_6) @[Lookup.scala 31:38]
    node _ALUop_T_8 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _ALUop_T_9 = eq(UInt<7>("h6f"), _ALUop_T_8) @[Lookup.scala 31:38]
    node _ALUop_T_10 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_11 = eq(UInt<7>("h67"), _ALUop_T_10) @[Lookup.scala 31:38]
    node _ALUop_T_12 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_13 = eq(UInt<14>("h3023"), _ALUop_T_12) @[Lookup.scala 31:38]
    node _ALUop_T_14 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_15 = eq(UInt<14>("h3013"), _ALUop_T_14) @[Lookup.scala 31:38]
    node _ALUop_T_16 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_17 = eq(UInt<14>("h2003"), _ALUop_T_16) @[Lookup.scala 31:38]
    node _ALUop_T_18 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_19 = eq(UInt<6>("h3b"), _ALUop_T_18) @[Lookup.scala 31:38]
    node _ALUop_T_20 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_21 = eq(UInt<31>("h40000033"), _ALUop_T_20) @[Lookup.scala 31:38]
    node _ALUop_T_22 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_23 = eq(UInt<14>("h3003"), _ALUop_T_22) @[Lookup.scala 31:38]
    node _ALUop_T_24 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_25 = eq(UInt<5>("h1b"), _ALUop_T_24) @[Lookup.scala 31:38]
    node _ALUop_T_26 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_27 = eq(UInt<6>("h33"), _ALUop_T_26) @[Lookup.scala 31:38]
    node _ALUop_T_28 = and(inst, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_29 = eq(UInt<31>("h40005013"), _ALUop_T_28) @[Lookup.scala 31:38]
    node _ALUop_T_30 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_31 = eq(UInt<15>("h4003"), _ALUop_T_30) @[Lookup.scala 31:38]
    node _ALUop_T_32 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_33 = eq(UInt<13>("h1023"), _ALUop_T_32) @[Lookup.scala 31:38]
    node _ALUop_T_34 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_35 = eq(UInt<6>("h23"), _ALUop_T_34) @[Lookup.scala 31:38]
    node _ALUop_T_36 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_37 = eq(UInt<15>("h6033"), _ALUop_T_36) @[Lookup.scala 31:38]
    node _ALUop_T_38 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_39 = eq(UInt<15>("h4013"), _ALUop_T_38) @[Lookup.scala 31:38]
    node _ALUop_T_40 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_41 = eq(UInt<15>("h7033"), _ALUop_T_40) @[Lookup.scala 31:38]
    node _ALUop_T_42 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_43 = eq(UInt<15>("h7013"), _ALUop_T_42) @[Lookup.scala 31:38]
    node _ALUop_T_44 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_45 = eq(UInt<31>("h4000003b"), _ALUop_T_44) @[Lookup.scala 31:38]
    node _ALUop_T_46 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_47 = eq(UInt<13>("h103b"), _ALUop_T_46) @[Lookup.scala 31:38]
    node _ALUop_T_48 = and(inst, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_49 = eq(UInt<13>("h1013"), _ALUop_T_48) @[Lookup.scala 31:38]
    node _ALUop_T_50 = and(inst, UInt<32>("hfc00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_51 = eq(UInt<15>("h5013"), _ALUop_T_50) @[Lookup.scala 31:38]
    node _ALUop_T_52 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_53 = eq(UInt<13>("h101b"), _ALUop_T_52) @[Lookup.scala 31:38]
    node _ALUop_T_54 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_55 = eq(UInt<31>("h4000501b"), _ALUop_T_54) @[Lookup.scala 31:38]
    node _ALUop_T_56 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_57 = eq(UInt<15>("h501b"), _ALUop_T_56) @[Lookup.scala 31:38]
    node _ALUop_T_58 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_59 = eq(UInt<31>("h4000503b"), _ALUop_T_58) @[Lookup.scala 31:38]
    node _ALUop_T_60 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_61 = eq(UInt<15>("h503b"), _ALUop_T_60) @[Lookup.scala 31:38]
    node _ALUop_T_62 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_63 = eq(UInt<14>("h3033"), _ALUop_T_62) @[Lookup.scala 31:38]
    node _ALUop_T_64 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_65 = eq(UInt<14>("h2033"), _ALUop_T_64) @[Lookup.scala 31:38]
    node _ALUop_T_66 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_67 = eq(UInt<14>("h2023"), _ALUop_T_66) @[Lookup.scala 31:38]
    node _ALUop_T_68 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_69 = eq(UInt<13>("h1003"), _ALUop_T_68) @[Lookup.scala 31:38]
    node _ALUop_T_70 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_71 = eq(UInt<15>("h5003"), _ALUop_T_70) @[Lookup.scala 31:38]
    node _ALUop_T_72 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_73 = eq(UInt<26>("h2000033"), _ALUop_T_72) @[Lookup.scala 31:38]
    node _ALUop_T_74 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_75 = eq(UInt<26>("h200003b"), _ALUop_T_74) @[Lookup.scala 31:38]
    node _ALUop_T_76 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_77 = eq(UInt<26>("h200403b"), _ALUop_T_76) @[Lookup.scala 31:38]
    node _ALUop_T_78 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_79 = eq(UInt<26>("h200603b"), _ALUop_T_78) @[Lookup.scala 31:38]
    node _ALUop_T_80 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_81 = eq(UInt<15>("h4033"), _ALUop_T_80) @[Lookup.scala 31:38]
    node _ALUop_T_82 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_83 = eq(UInt<15>("h6013"), _ALUop_T_82) @[Lookup.scala 31:38]
    node _ALUop_T_84 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_85 = eq(UInt<26>("h2005033"), _ALUop_T_84) @[Lookup.scala 31:38]
    node _ALUop_T_86 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_87 = eq(UInt<26>("h2004033"), _ALUop_T_86) @[Lookup.scala 31:38]
    node _ALUop_T_88 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_89 = eq(UInt<26>("h200503b"), _ALUop_T_88) @[Lookup.scala 31:38]
    node _ALUop_T_90 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_91 = eq(UInt<26>("h200703b"), _ALUop_T_90) @[Lookup.scala 31:38]
    node _ALUop_T_92 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_93 = eq(UInt<26>("h2007033"), _ALUop_T_92) @[Lookup.scala 31:38]
    node _ALUop_T_94 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_95 = eq(UInt<26>("h2006033"), _ALUop_T_94) @[Lookup.scala 31:38]
    node _ALUop_T_96 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_97 = eq(UInt<13>("h1033"), _ALUop_T_96) @[Lookup.scala 31:38]
    node _ALUop_T_98 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_99 = eq(UInt<15>("h5033"), _ALUop_T_98) @[Lookup.scala 31:38]
    node _ALUop_T_100 = and(inst, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _ALUop_T_101 = eq(UInt<31>("h40005033"), _ALUop_T_100) @[Lookup.scala 31:38]
    node _ALUop_T_102 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_103 = eq(UInt<14>("h2013"), _ALUop_T_102) @[Lookup.scala 31:38]
    node _ALUop_T_104 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_105 = eq(UInt<15>("h6003"), _ALUop_T_104) @[Lookup.scala 31:38]
    node _ALUop_T_106 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_107 = eq(UInt<2>("h3"), _ALUop_T_106) @[Lookup.scala 31:38]
    node _ALUop_T_108 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ALUop_T_109 = eq(UInt<7>("h73"), _ALUop_T_108) @[Lookup.scala 31:38]
    node _ALUop_T_110 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _ALUop_T_111 = eq(UInt<30>("h30200073"), _ALUop_T_110) @[Lookup.scala 31:38]
    node _ALUop_T_112 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_113 = eq(UInt<13>("h1073"), _ALUop_T_112) @[Lookup.scala 31:38]
    node _ALUop_T_114 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_115 = eq(UInt<14>("h2073"), _ALUop_T_114) @[Lookup.scala 31:38]
    node _ALUop_T_116 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _ALUop_T_117 = eq(UInt<14>("h3073"), _ALUop_T_116) @[Lookup.scala 31:38]
    node _ALUop_T_118 = mux(_ALUop_T_117, UInt<7>("h47"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _ALUop_T_119 = mux(_ALUop_T_115, UInt<7>("h46"), _ALUop_T_118) @[Lookup.scala 34:39]
    node _ALUop_T_120 = mux(_ALUop_T_113, UInt<6>("h3f"), _ALUop_T_119) @[Lookup.scala 34:39]
    node _ALUop_T_121 = mux(_ALUop_T_111, UInt<6>("h3e"), _ALUop_T_120) @[Lookup.scala 34:39]
    node _ALUop_T_122 = mux(_ALUop_T_109, UInt<6>("h3d"), _ALUop_T_121) @[Lookup.scala 34:39]
    node _ALUop_T_123 = mux(_ALUop_T_107, UInt<4>("hf"), _ALUop_T_122) @[Lookup.scala 34:39]
    node _ALUop_T_124 = mux(_ALUop_T_105, UInt<4>("hf"), _ALUop_T_123) @[Lookup.scala 34:39]
    node _ALUop_T_125 = mux(_ALUop_T_103, UInt<5>("h1f"), _ALUop_T_124) @[Lookup.scala 34:39]
    node _ALUop_T_126 = mux(_ALUop_T_101, UInt<6>("h39"), _ALUop_T_125) @[Lookup.scala 34:39]
    node _ALUop_T_127 = mux(_ALUop_T_99, UInt<6>("h38"), _ALUop_T_126) @[Lookup.scala 34:39]
    node _ALUop_T_128 = mux(_ALUop_T_97, UInt<6>("h37"), _ALUop_T_127) @[Lookup.scala 34:39]
    node _ALUop_T_129 = mux(_ALUop_T_95, UInt<6>("h34"), _ALUop_T_128) @[Lookup.scala 34:39]
    node _ALUop_T_130 = mux(_ALUop_T_93, UInt<6>("h33"), _ALUop_T_129) @[Lookup.scala 34:39]
    node _ALUop_T_131 = mux(_ALUop_T_91, UInt<6>("h32"), _ALUop_T_130) @[Lookup.scala 34:39]
    node _ALUop_T_132 = mux(_ALUop_T_89, UInt<6>("h35"), _ALUop_T_131) @[Lookup.scala 34:39]
    node _ALUop_T_133 = mux(_ALUop_T_87, UInt<6>("h31"), _ALUop_T_132) @[Lookup.scala 34:39]
    node _ALUop_T_134 = mux(_ALUop_T_85, UInt<6>("h30"), _ALUop_T_133) @[Lookup.scala 34:39]
    node _ALUop_T_135 = mux(_ALUop_T_83, UInt<4>("hb"), _ALUop_T_134) @[Lookup.scala 34:39]
    node _ALUop_T_136 = mux(_ALUop_T_81, UInt<6>("h2e"), _ALUop_T_135) @[Lookup.scala 34:39]
    node _ALUop_T_137 = mux(_ALUop_T_79, UInt<5>("h14"), _ALUop_T_136) @[Lookup.scala 34:39]
    node _ALUop_T_138 = mux(_ALUop_T_77, UInt<5>("h13"), _ALUop_T_137) @[Lookup.scala 34:39]
    node _ALUop_T_139 = mux(_ALUop_T_75, UInt<5>("h12"), _ALUop_T_138) @[Lookup.scala 34:39]
    node _ALUop_T_140 = mux(_ALUop_T_73, UInt<5>("h11"), _ALUop_T_139) @[Lookup.scala 34:39]
    node _ALUop_T_141 = mux(_ALUop_T_71, UInt<4>("hf"), _ALUop_T_140) @[Lookup.scala 34:39]
    node _ALUop_T_142 = mux(_ALUop_T_69, UInt<4>("hf"), _ALUop_T_141) @[Lookup.scala 34:39]
    node _ALUop_T_143 = mux(_ALUop_T_67, UInt<4>("hf"), _ALUop_T_142) @[Lookup.scala 34:39]
    node _ALUop_T_144 = mux(_ALUop_T_65, UInt<5>("h1f"), _ALUop_T_143) @[Lookup.scala 34:39]
    node _ALUop_T_145 = mux(_ALUop_T_63, UInt<5>("h1e"), _ALUop_T_144) @[Lookup.scala 34:39]
    node _ALUop_T_146 = mux(_ALUop_T_61, UInt<5>("h1d"), _ALUop_T_145) @[Lookup.scala 34:39]
    node _ALUop_T_147 = mux(_ALUop_T_59, UInt<5>("h1c"), _ALUop_T_146) @[Lookup.scala 34:39]
    node _ALUop_T_148 = mux(_ALUop_T_57, UInt<5>("h1d"), _ALUop_T_147) @[Lookup.scala 34:39]
    node _ALUop_T_149 = mux(_ALUop_T_55, UInt<5>("h1c"), _ALUop_T_148) @[Lookup.scala 34:39]
    node _ALUop_T_150 = mux(_ALUop_T_53, UInt<5>("h16"), _ALUop_T_149) @[Lookup.scala 34:39]
    node _ALUop_T_151 = mux(_ALUop_T_51, UInt<6>("h38"), _ALUop_T_150) @[Lookup.scala 34:39]
    node _ALUop_T_152 = mux(_ALUop_T_49, UInt<6>("h37"), _ALUop_T_151) @[Lookup.scala 34:39]
    node _ALUop_T_153 = mux(_ALUop_T_47, UInt<5>("h16"), _ALUop_T_152) @[Lookup.scala 34:39]
    node _ALUop_T_154 = mux(_ALUop_T_45, UInt<4>("hd"), _ALUop_T_153) @[Lookup.scala 34:39]
    node _ALUop_T_155 = mux(_ALUop_T_43, UInt<4>("h8"), _ALUop_T_154) @[Lookup.scala 34:39]
    node _ALUop_T_156 = mux(_ALUop_T_41, UInt<4>("h8"), _ALUop_T_155) @[Lookup.scala 34:39]
    node _ALUop_T_157 = mux(_ALUop_T_39, UInt<6>("h2e"), _ALUop_T_156) @[Lookup.scala 34:39]
    node _ALUop_T_158 = mux(_ALUop_T_37, UInt<4>("hb"), _ALUop_T_157) @[Lookup.scala 34:39]
    node _ALUop_T_159 = mux(_ALUop_T_35, UInt<4>("hf"), _ALUop_T_158) @[Lookup.scala 34:39]
    node _ALUop_T_160 = mux(_ALUop_T_33, UInt<4>("hf"), _ALUop_T_159) @[Lookup.scala 34:39]
    node _ALUop_T_161 = mux(_ALUop_T_31, UInt<4>("hf"), _ALUop_T_160) @[Lookup.scala 34:39]
    node _ALUop_T_162 = mux(_ALUop_T_29, UInt<5>("h15"), _ALUop_T_161) @[Lookup.scala 34:39]
    node _ALUop_T_163 = mux(_ALUop_T_27, UInt<4>("hf"), _ALUop_T_162) @[Lookup.scala 34:39]
    node _ALUop_T_164 = mux(_ALUop_T_25, UInt<4>("hc"), _ALUop_T_163) @[Lookup.scala 34:39]
    node _ALUop_T_165 = mux(_ALUop_T_23, UInt<4>("hf"), _ALUop_T_164) @[Lookup.scala 34:39]
    node _ALUop_T_166 = mux(_ALUop_T_21, UInt<4>("he"), _ALUop_T_165) @[Lookup.scala 34:39]
    node _ALUop_T_167 = mux(_ALUop_T_19, UInt<4>("hc"), _ALUop_T_166) @[Lookup.scala 34:39]
    node _ALUop_T_168 = mux(_ALUop_T_17, UInt<4>("hf"), _ALUop_T_167) @[Lookup.scala 34:39]
    node _ALUop_T_169 = mux(_ALUop_T_15, UInt<5>("h1e"), _ALUop_T_168) @[Lookup.scala 34:39]
    node _ALUop_T_170 = mux(_ALUop_T_13, UInt<4>("hf"), _ALUop_T_169) @[Lookup.scala 34:39]
    node _ALUop_T_171 = mux(_ALUop_T_11, UInt<3>("h6"), _ALUop_T_170) @[Lookup.scala 34:39]
    node _ALUop_T_172 = mux(_ALUop_T_9, UInt<3>("h5"), _ALUop_T_171) @[Lookup.scala 34:39]
    node _ALUop_T_173 = mux(_ALUop_T_7, UInt<3>("h4"), _ALUop_T_172) @[Lookup.scala 34:39]
    node _ALUop_T_174 = mux(_ALUop_T_5, UInt<4>("hf"), _ALUop_T_173) @[Lookup.scala 34:39]
    node _ALUop_T_175 = mux(_ALUop_T_3, UInt<2>("h2"), _ALUop_T_174) @[Lookup.scala 34:39]
    node _ALUop_T_176 = mux(_ALUop_T_1, UInt<4>("hf"), _ALUop_T_175) @[Lookup.scala 34:39]
    ALUop <= _ALUop_T_176 @[IDU.scala 311:11]
    node _reg_write_T = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _reg_write_T_1 = eq(UInt<21>("h100073"), _reg_write_T) @[Lookup.scala 31:38]
    node _reg_write_T_2 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_3 = eq(UInt<14>("h3023"), _reg_write_T_2) @[Lookup.scala 31:38]
    node _reg_write_T_4 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_5 = eq(UInt<13>("h1023"), _reg_write_T_4) @[Lookup.scala 31:38]
    node _reg_write_T_6 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_7 = eq(UInt<6>("h23"), _reg_write_T_6) @[Lookup.scala 31:38]
    node _reg_write_T_8 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_9 = eq(UInt<14>("h2023"), _reg_write_T_8) @[Lookup.scala 31:38]
    node _reg_write_T_10 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_11 = eq(UInt<13>("h1063"), _reg_write_T_10) @[Lookup.scala 31:38]
    node _reg_write_T_12 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_13 = eq(UInt<7>("h63"), _reg_write_T_12) @[Lookup.scala 31:38]
    node _reg_write_T_14 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_15 = eq(UInt<15>("h5063"), _reg_write_T_14) @[Lookup.scala 31:38]
    node _reg_write_T_16 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_17 = eq(UInt<15>("h4063"), _reg_write_T_16) @[Lookup.scala 31:38]
    node _reg_write_T_18 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_19 = eq(UInt<15>("h6063"), _reg_write_T_18) @[Lookup.scala 31:38]
    node _reg_write_T_20 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _reg_write_T_21 = eq(UInt<15>("h7063"), _reg_write_T_20) @[Lookup.scala 31:38]
    node _reg_write_T_22 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _reg_write_T_23 = eq(UInt<7>("h73"), _reg_write_T_22) @[Lookup.scala 31:38]
    node _reg_write_T_24 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _reg_write_T_25 = eq(UInt<30>("h30200073"), _reg_write_T_24) @[Lookup.scala 31:38]
    node _reg_write_T_26 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _reg_write_T_27 = eq(UInt<13>("h100f"), _reg_write_T_26) @[Lookup.scala 31:38]
    node _reg_write_T_28 = mux(_reg_write_T_27, UInt<1>("h0"), UInt<1>("h1")) @[Lookup.scala 34:39]
    node _reg_write_T_29 = mux(_reg_write_T_25, UInt<1>("h0"), _reg_write_T_28) @[Lookup.scala 34:39]
    node _reg_write_T_30 = mux(_reg_write_T_23, UInt<1>("h0"), _reg_write_T_29) @[Lookup.scala 34:39]
    node _reg_write_T_31 = mux(_reg_write_T_21, UInt<1>("h0"), _reg_write_T_30) @[Lookup.scala 34:39]
    node _reg_write_T_32 = mux(_reg_write_T_19, UInt<1>("h0"), _reg_write_T_31) @[Lookup.scala 34:39]
    node _reg_write_T_33 = mux(_reg_write_T_17, UInt<1>("h0"), _reg_write_T_32) @[Lookup.scala 34:39]
    node _reg_write_T_34 = mux(_reg_write_T_15, UInt<1>("h0"), _reg_write_T_33) @[Lookup.scala 34:39]
    node _reg_write_T_35 = mux(_reg_write_T_13, UInt<1>("h0"), _reg_write_T_34) @[Lookup.scala 34:39]
    node _reg_write_T_36 = mux(_reg_write_T_11, UInt<1>("h0"), _reg_write_T_35) @[Lookup.scala 34:39]
    node _reg_write_T_37 = mux(_reg_write_T_9, UInt<1>("h0"), _reg_write_T_36) @[Lookup.scala 34:39]
    node _reg_write_T_38 = mux(_reg_write_T_7, UInt<1>("h0"), _reg_write_T_37) @[Lookup.scala 34:39]
    node _reg_write_T_39 = mux(_reg_write_T_5, UInt<1>("h0"), _reg_write_T_38) @[Lookup.scala 34:39]
    node _reg_write_T_40 = mux(_reg_write_T_3, UInt<1>("h0"), _reg_write_T_39) @[Lookup.scala 34:39]
    node _reg_write_T_41 = mux(_reg_write_T_1, UInt<1>("h0"), _reg_write_T_40) @[Lookup.scala 34:39]
    reg_write <= _reg_write_T_41 @[IDU.scala 377:15]
    node _csr_write_T = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _csr_write_T_1 = eq(UInt<7>("h73"), _csr_write_T) @[Lookup.scala 31:38]
    node _csr_write_T_2 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csr_write_T_3 = eq(UInt<13>("h1073"), _csr_write_T_2) @[Lookup.scala 31:38]
    node _csr_write_T_4 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csr_write_T_5 = eq(UInt<14>("h2073"), _csr_write_T_4) @[Lookup.scala 31:38]
    node _csr_write_T_6 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csr_write_T_7 = eq(UInt<14>("h3073"), _csr_write_T_6) @[Lookup.scala 31:38]
    node _csr_write_T_8 = mux(_csr_write_T_7, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _csr_write_T_9 = mux(_csr_write_T_5, UInt<1>("h1"), _csr_write_T_8) @[Lookup.scala 34:39]
    node _csr_write_T_10 = mux(_csr_write_T_3, UInt<1>("h1"), _csr_write_T_9) @[Lookup.scala 34:39]
    node _csr_write_T_11 = mux(_csr_write_T_1, UInt<2>("h3"), _csr_write_T_10) @[Lookup.scala 34:39]
    csr_write <= _csr_write_T_11 @[IDU.scala 394:15]
    node _src2_is_imm_T = eq(UInt<7>("h40"), inst_type) @[Mux.scala 81:61]
    node _src2_is_imm_T_1 = mux(_src2_is_imm_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _src2_is_imm_T_2 = eq(UInt<7>("h42"), inst_type) @[Mux.scala 81:61]
    node _src2_is_imm_T_3 = mux(_src2_is_imm_T_2, UInt<1>("h1"), _src2_is_imm_T_1) @[Mux.scala 81:58]
    node _src2_is_imm_T_4 = eq(UInt<7>("h44"), inst_type) @[Mux.scala 81:61]
    node _src2_is_imm_T_5 = mux(_src2_is_imm_T_4, UInt<1>("h1"), _src2_is_imm_T_3) @[Mux.scala 81:58]
    node _src2_is_imm_T_6 = eq(UInt<7>("h43"), inst_type) @[Mux.scala 81:61]
    node _src2_is_imm_T_7 = mux(_src2_is_imm_T_6, UInt<1>("h1"), _src2_is_imm_T_5) @[Mux.scala 81:58]
    node _src2_is_imm_T_8 = eq(UInt<7>("h45"), inst_type) @[Mux.scala 81:61]
    node _src2_is_imm_T_9 = mux(_src2_is_imm_T_8, UInt<1>("h1"), _src2_is_imm_T_7) @[Mux.scala 81:58]
    src2_is_imm <= _src2_is_imm_T_9 @[IDU.scala 401:17]
    node _src1_is_pc_T = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_1 = eq(UInt<7>("h6f"), _src1_is_pc_T) @[Lookup.scala 31:38]
    node _src1_is_pc_T_2 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_3 = eq(UInt<5>("h17"), _src1_is_pc_T_2) @[Lookup.scala 31:38]
    node _src1_is_pc_T_4 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_5 = eq(UInt<13>("h1063"), _src1_is_pc_T_4) @[Lookup.scala 31:38]
    node _src1_is_pc_T_6 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_7 = eq(UInt<7>("h63"), _src1_is_pc_T_6) @[Lookup.scala 31:38]
    node _src1_is_pc_T_8 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_9 = eq(UInt<15>("h5063"), _src1_is_pc_T_8) @[Lookup.scala 31:38]
    node _src1_is_pc_T_10 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_11 = eq(UInt<15>("h4063"), _src1_is_pc_T_10) @[Lookup.scala 31:38]
    node _src1_is_pc_T_12 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_13 = eq(UInt<15>("h6063"), _src1_is_pc_T_12) @[Lookup.scala 31:38]
    node _src1_is_pc_T_14 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _src1_is_pc_T_15 = eq(UInt<15>("h7063"), _src1_is_pc_T_14) @[Lookup.scala 31:38]
    node _src1_is_pc_T_16 = mux(_src1_is_pc_T_15, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _src1_is_pc_T_17 = mux(_src1_is_pc_T_13, UInt<1>("h1"), _src1_is_pc_T_16) @[Lookup.scala 34:39]
    node _src1_is_pc_T_18 = mux(_src1_is_pc_T_11, UInt<1>("h1"), _src1_is_pc_T_17) @[Lookup.scala 34:39]
    node _src1_is_pc_T_19 = mux(_src1_is_pc_T_9, UInt<1>("h1"), _src1_is_pc_T_18) @[Lookup.scala 34:39]
    node _src1_is_pc_T_20 = mux(_src1_is_pc_T_7, UInt<1>("h1"), _src1_is_pc_T_19) @[Lookup.scala 34:39]
    node _src1_is_pc_T_21 = mux(_src1_is_pc_T_5, UInt<1>("h1"), _src1_is_pc_T_20) @[Lookup.scala 34:39]
    node _src1_is_pc_T_22 = mux(_src1_is_pc_T_3, UInt<1>("h1"), _src1_is_pc_T_21) @[Lookup.scala 34:39]
    node _src1_is_pc_T_23 = mux(_src1_is_pc_T_1, UInt<1>("h1"), _src1_is_pc_T_22) @[Lookup.scala 34:39]
    src1_is_pc <= _src1_is_pc_T_23 @[IDU.scala 409:16]
    node _Writemem_en_T = eq(UInt<7>("h44"), inst_type) @[Mux.scala 81:61]
    node _Writemem_en_T_1 = mux(_Writemem_en_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    Writemem_en <= _Writemem_en_T_1 @[IDU.scala 420:17]
    node _Readmem_en_T = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_1 = eq(UInt<14>("h3003"), _Readmem_en_T) @[Lookup.scala 31:38]
    node _Readmem_en_T_2 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_3 = eq(UInt<14>("h2003"), _Readmem_en_T_2) @[Lookup.scala 31:38]
    node _Readmem_en_T_4 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_5 = eq(UInt<15>("h6003"), _Readmem_en_T_4) @[Lookup.scala 31:38]
    node _Readmem_en_T_6 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_7 = eq(UInt<13>("h1003"), _Readmem_en_T_6) @[Lookup.scala 31:38]
    node _Readmem_en_T_8 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_9 = eq(UInt<15>("h5003"), _Readmem_en_T_8) @[Lookup.scala 31:38]
    node _Readmem_en_T_10 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_11 = eq(UInt<2>("h3"), _Readmem_en_T_10) @[Lookup.scala 31:38]
    node _Readmem_en_T_12 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Readmem_en_T_13 = eq(UInt<15>("h4003"), _Readmem_en_T_12) @[Lookup.scala 31:38]
    node _Readmem_en_T_14 = mux(_Readmem_en_T_13, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _Readmem_en_T_15 = mux(_Readmem_en_T_11, UInt<1>("h1"), _Readmem_en_T_14) @[Lookup.scala 34:39]
    node _Readmem_en_T_16 = mux(_Readmem_en_T_9, UInt<1>("h1"), _Readmem_en_T_15) @[Lookup.scala 34:39]
    node _Readmem_en_T_17 = mux(_Readmem_en_T_7, UInt<1>("h1"), _Readmem_en_T_16) @[Lookup.scala 34:39]
    node _Readmem_en_T_18 = mux(_Readmem_en_T_5, UInt<1>("h1"), _Readmem_en_T_17) @[Lookup.scala 34:39]
    node _Readmem_en_T_19 = mux(_Readmem_en_T_3, UInt<1>("h1"), _Readmem_en_T_18) @[Lookup.scala 34:39]
    node _Readmem_en_T_20 = mux(_Readmem_en_T_1, UInt<1>("h1"), _Readmem_en_T_19) @[Lookup.scala 34:39]
    Readmem_en <= _Readmem_en_T_20 @[IDU.scala 424:16]
    node _load_type_T = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_1 = eq(UInt<14>("h2003"), _load_type_T) @[Lookup.scala 31:38]
    node _load_type_T_2 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_3 = eq(UInt<14>("h3003"), _load_type_T_2) @[Lookup.scala 31:38]
    node _load_type_T_4 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_5 = eq(UInt<15>("h4003"), _load_type_T_4) @[Lookup.scala 31:38]
    node _load_type_T_6 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_7 = eq(UInt<15>("h6003"), _load_type_T_6) @[Lookup.scala 31:38]
    node _load_type_T_8 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_9 = eq(UInt<13>("h1003"), _load_type_T_8) @[Lookup.scala 31:38]
    node _load_type_T_10 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_11 = eq(UInt<2>("h3"), _load_type_T_10) @[Lookup.scala 31:38]
    node _load_type_T_12 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _load_type_T_13 = eq(UInt<15>("h5003"), _load_type_T_12) @[Lookup.scala 31:38]
    node _load_type_T_14 = mux(_load_type_T_13, UInt<3>("h7"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _load_type_T_15 = mux(_load_type_T_11, UInt<3>("h6"), _load_type_T_14) @[Lookup.scala 34:39]
    node _load_type_T_16 = mux(_load_type_T_9, UInt<3>("h5"), _load_type_T_15) @[Lookup.scala 34:39]
    node _load_type_T_17 = mux(_load_type_T_7, UInt<3>("h4"), _load_type_T_16) @[Lookup.scala 34:39]
    node _load_type_T_18 = mux(_load_type_T_5, UInt<2>("h3"), _load_type_T_17) @[Lookup.scala 34:39]
    node _load_type_T_19 = mux(_load_type_T_3, UInt<2>("h2"), _load_type_T_18) @[Lookup.scala 34:39]
    node _load_type_T_20 = mux(_load_type_T_1, UInt<1>("h1"), _load_type_T_19) @[Lookup.scala 34:39]
    load_type <= _load_type_T_20 @[IDU.scala 433:15]
    node _Wmask_T = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Wmask_T_1 = eq(UInt<14>("h3023"), _Wmask_T) @[Lookup.scala 31:38]
    node _Wmask_T_2 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Wmask_T_3 = eq(UInt<13>("h1023"), _Wmask_T_2) @[Lookup.scala 31:38]
    node _Wmask_T_4 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Wmask_T_5 = eq(UInt<6>("h23"), _Wmask_T_4) @[Lookup.scala 31:38]
    node _Wmask_T_6 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _Wmask_T_7 = eq(UInt<14>("h2023"), _Wmask_T_6) @[Lookup.scala 31:38]
    node _Wmask_T_8 = mux(_Wmask_T_7, UInt<4>("hf"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _Wmask_T_9 = mux(_Wmask_T_5, UInt<1>("h1"), _Wmask_T_8) @[Lookup.scala 34:39]
    node _Wmask_T_10 = mux(_Wmask_T_3, UInt<2>("h3"), _Wmask_T_9) @[Lookup.scala 34:39]
    node _Wmask_T_11 = mux(_Wmask_T_1, UInt<8>("hff"), _Wmask_T_10) @[Lookup.scala 34:39]
    Wmask <= _Wmask_T_11 @[IDU.scala 442:11]
    inst csr_reg of csr_reg @[IDU.scala 449:21]
    csr_reg.clock <= clock
    csr_reg.reset <= reset
    node _csr_index_T = bits(imm, 11, 0) @[IDU.scala 450:34]
    node _csr_index_T_1 = eq(UInt<10>("h305"), _csr_index_T) @[Mux.scala 81:61]
    node _csr_index_T_2 = mux(_csr_index_T_1, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _csr_index_T_3 = eq(UInt<10>("h341"), _csr_index_T) @[Mux.scala 81:61]
    node _csr_index_T_4 = mux(_csr_index_T_3, UInt<1>("h1"), _csr_index_T_2) @[Mux.scala 81:58]
    node _csr_index_T_5 = eq(UInt<10>("h300"), _csr_index_T) @[Mux.scala 81:61]
    node _csr_index_T_6 = mux(_csr_index_T_5, UInt<2>("h2"), _csr_index_T_4) @[Mux.scala 81:58]
    node _csr_index_T_7 = eq(UInt<10>("h342"), _csr_index_T) @[Mux.scala 81:61]
    node csr_index = mux(_csr_index_T_7, UInt<2>("h3"), _csr_index_T_6) @[Mux.scala 81:58]
    node _csr_wdata_T = or(rdata1, csr_reg.io.rdata) @[IDU.scala 458:26]
    node _csr_wdata_T_1 = not(csr_reg.io.rdata) @[IDU.scala 459:29]
    node _csr_wdata_T_2 = and(rdata1, _csr_wdata_T_1) @[IDU.scala 459:26]
    node _csr_wdata_T_3 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csr_wdata_T_4 = eq(UInt<13>("h1073"), _csr_wdata_T_3) @[Lookup.scala 31:38]
    node _csr_wdata_T_5 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csr_wdata_T_6 = eq(UInt<14>("h2073"), _csr_wdata_T_5) @[Lookup.scala 31:38]
    node _csr_wdata_T_7 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csr_wdata_T_8 = eq(UInt<14>("h3073"), _csr_wdata_T_7) @[Lookup.scala 31:38]
    node _csr_wdata_T_9 = mux(_csr_wdata_T_8, _csr_wdata_T_2, UInt<1>("h0")) @[Lookup.scala 34:39]
    node _csr_wdata_T_10 = mux(_csr_wdata_T_6, _csr_wdata_T, _csr_wdata_T_9) @[Lookup.scala 34:39]
    node csr_wdata = mux(_csr_wdata_T_4, rdata1, _csr_wdata_T_10) @[Lookup.scala 34:39]
    node _T_14 = bits(csr_write, 1, 1) @[IDU.scala 462:31]
    node _T_15 = eq(_T_14, UInt<1>("h1")) @[IDU.scala 462:34]
    node _T_16 = eq(ALUop, UInt<6>("h3e")) @[IDU.scala 462:54]
    node _T_17 = mux(_T_16, UInt<1>("h1"), csr_index) @[IDU.scala 462:48]
    node _T_18 = mux(_T_15, UInt<1>("h0"), _T_17) @[IDU.scala 462:21]
    csr_reg.io.raddr <= _T_18 @[IDU.scala 462:15]
    node _T_19 = bits(csr_write, 0, 0) @[IDU.scala 463:27]
    node _T_20 = eq(_T_19, UInt<1>("h1")) @[IDU.scala 463:30]
    node _T_21 = and(_T_20, ds_valid) @[IDU.scala 463:38]
    csr_reg.io.wen1 <= _T_21 @[IDU.scala 463:14]
    node _T_22 = eq(csr_write, UInt<2>("h3")) @[IDU.scala 464:32]
    node _T_23 = eq(csr_write, UInt<1>("h1")) @[IDU.scala 464:56]
    node _T_24 = mux(_T_23, csr_index, UInt<1>("h0")) @[IDU.scala 464:46]
    node _T_25 = mux(_T_22, UInt<1>("h1"), _T_24) @[IDU.scala 464:22]
    csr_reg.io.waddr1 <= _T_25 @[IDU.scala 464:16]
    node _T_26 = eq(csr_write, UInt<2>("h3")) @[IDU.scala 465:32]
    node _T_27 = eq(csr_write, UInt<1>("h1")) @[IDU.scala 465:58]
    node _T_28 = mux(_T_27, csr_wdata, UInt<1>("h0")) @[IDU.scala 465:48]
    node _T_29 = mux(_T_26, ds_pc, _T_28) @[IDU.scala 465:22]
    csr_reg.io.wdata1 <= _T_29 @[IDU.scala 465:16]
    node _T_30 = bits(csr_write, 1, 1) @[IDU.scala 466:27]
    node _T_31 = eq(_T_30, UInt<1>("h1")) @[IDU.scala 466:30]
    node _T_32 = and(_T_31, ds_valid) @[IDU.scala 466:38]
    csr_reg.io.wen2 <= _T_32 @[IDU.scala 466:14]
    csr_reg.io.waddr2 <= UInt<2>("h3") @[IDU.scala 467:16]
    csr_reg.io.wdata2 <= rdata2 @[IDU.scala 468:16]
    node _src1_T = mux(src1_is_pc, ds_pc, rdata1) @[IDU.scala 471:16]
    src1 <= _src1_T @[IDU.scala 471:10]
    node _src2_T = mux(src2_is_imm, imm, rdata2) @[IDU.scala 472:16]
    src2 <= _src2_T @[IDU.scala 472:10]
    node _br_target_T = add(src1, src2) @[IDU.scala 475:35]
    node _br_target_T_1 = tail(_br_target_T, 1) @[IDU.scala 475:35]
    node _br_target_T_2 = add(src1, src2) @[IDU.scala 476:24]
    node _br_target_T_3 = tail(_br_target_T_2, 1) @[IDU.scala 476:24]
    node _br_target_T_4 = and(_br_target_T_3, UInt<64>("hfffffffffffffffe")) @[IDU.scala 476:31]
    node _br_target_T_5 = add(csr_reg.io.rdata, UInt<3>("h4")) @[IDU.scala 478:28]
    node _br_target_T_6 = tail(_br_target_T_5, 1) @[IDU.scala 478:28]
    node _br_target_T_7 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_target_T_8 = eq(UInt<7>("h67"), _br_target_T_7) @[Lookup.scala 31:38]
    node _br_target_T_9 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _br_target_T_10 = eq(UInt<7>("h73"), _br_target_T_9) @[Lookup.scala 31:38]
    node _br_target_T_11 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _br_target_T_12 = eq(UInt<30>("h30200073"), _br_target_T_11) @[Lookup.scala 31:38]
    node _br_target_T_13 = mux(_br_target_T_12, _br_target_T_6, _br_target_T_1) @[Lookup.scala 34:39]
    node _br_target_T_14 = mux(_br_target_T_10, csr_reg.io.rdata, _br_target_T_13) @[Lookup.scala 34:39]
    node _br_target_T_15 = mux(_br_target_T_8, _br_target_T_4, _br_target_T_14) @[Lookup.scala 34:39]
    br_target <= _br_target_T_15 @[IDU.scala 475:15]
    node _br_taken_T = asSInt(rdata1) @[IDU.scala 483:27]
    node _br_taken_T_1 = asSInt(rdata2) @[IDU.scala 483:45]
    node _br_taken_T_2 = neq(_br_taken_T, _br_taken_T_1) @[IDU.scala 483:34]
    node _br_taken_T_3 = mux(_br_taken_T_2, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 483:19]
    node _br_taken_T_4 = asSInt(rdata1) @[IDU.scala 484:27]
    node _br_taken_T_5 = asSInt(rdata2) @[IDU.scala 484:45]
    node _br_taken_T_6 = eq(_br_taken_T_4, _br_taken_T_5) @[IDU.scala 484:34]
    node _br_taken_T_7 = mux(_br_taken_T_6, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 484:19]
    node _br_taken_T_8 = asSInt(rdata1) @[IDU.scala 485:27]
    node _br_taken_T_9 = asSInt(rdata2) @[IDU.scala 485:44]
    node _br_taken_T_10 = geq(_br_taken_T_8, _br_taken_T_9) @[IDU.scala 485:34]
    node _br_taken_T_11 = mux(_br_taken_T_10, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 485:19]
    node _br_taken_T_12 = asSInt(rdata1) @[IDU.scala 486:27]
    node _br_taken_T_13 = asSInt(rdata2) @[IDU.scala 486:43]
    node _br_taken_T_14 = lt(_br_taken_T_12, _br_taken_T_13) @[IDU.scala 486:34]
    node _br_taken_T_15 = mux(_br_taken_T_14, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 486:19]
    node _br_taken_T_16 = lt(rdata1, rdata2) @[IDU.scala 487:28]
    node _br_taken_T_17 = mux(_br_taken_T_16, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 487:20]
    node _br_taken_T_18 = geq(rdata1, rdata2) @[IDU.scala 488:28]
    node _br_taken_T_19 = mux(_br_taken_T_18, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 488:20]
    node _br_taken_T_20 = and(inst, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _br_taken_T_21 = eq(UInt<7>("h6f"), _br_taken_T_20) @[Lookup.scala 31:38]
    node _br_taken_T_22 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_23 = eq(UInt<7>("h67"), _br_taken_T_22) @[Lookup.scala 31:38]
    node _br_taken_T_24 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_25 = eq(UInt<13>("h1063"), _br_taken_T_24) @[Lookup.scala 31:38]
    node _br_taken_T_26 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_27 = eq(UInt<7>("h63"), _br_taken_T_26) @[Lookup.scala 31:38]
    node _br_taken_T_28 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_29 = eq(UInt<15>("h5063"), _br_taken_T_28) @[Lookup.scala 31:38]
    node _br_taken_T_30 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_31 = eq(UInt<15>("h4063"), _br_taken_T_30) @[Lookup.scala 31:38]
    node _br_taken_T_32 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_33 = eq(UInt<15>("h6063"), _br_taken_T_32) @[Lookup.scala 31:38]
    node _br_taken_T_34 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _br_taken_T_35 = eq(UInt<15>("h7063"), _br_taken_T_34) @[Lookup.scala 31:38]
    node _br_taken_T_36 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _br_taken_T_37 = eq(UInt<7>("h73"), _br_taken_T_36) @[Lookup.scala 31:38]
    node _br_taken_T_38 = and(inst, UInt<32>("hffffffff")) @[Lookup.scala 31:38]
    node _br_taken_T_39 = eq(UInt<30>("h30200073"), _br_taken_T_38) @[Lookup.scala 31:38]
    node _br_taken_T_40 = mux(_br_taken_T_39, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _br_taken_T_41 = mux(_br_taken_T_37, UInt<1>("h1"), _br_taken_T_40) @[Lookup.scala 34:39]
    node _br_taken_T_42 = mux(_br_taken_T_35, _br_taken_T_19, _br_taken_T_41) @[Lookup.scala 34:39]
    node _br_taken_T_43 = mux(_br_taken_T_33, _br_taken_T_17, _br_taken_T_42) @[Lookup.scala 34:39]
    node _br_taken_T_44 = mux(_br_taken_T_31, _br_taken_T_15, _br_taken_T_43) @[Lookup.scala 34:39]
    node _br_taken_T_45 = mux(_br_taken_T_29, _br_taken_T_11, _br_taken_T_44) @[Lookup.scala 34:39]
    node _br_taken_T_46 = mux(_br_taken_T_27, _br_taken_T_7, _br_taken_T_45) @[Lookup.scala 34:39]
    node _br_taken_T_47 = mux(_br_taken_T_25, _br_taken_T_3, _br_taken_T_46) @[Lookup.scala 34:39]
    node _br_taken_T_48 = mux(_br_taken_T_23, UInt<1>("h1"), _br_taken_T_47) @[Lookup.scala 34:39]
    node _br_taken_T_49 = mux(_br_taken_T_21, UInt<1>("h1"), _br_taken_T_48) @[Lookup.scala 34:39]
    br_taken <= _br_taken_T_49 @[IDU.scala 480:14]
    node _conflict_es_rs1_T = eq(src1_is_pc, UInt<1>("h0")) @[IDU.scala 492:25]
    node _conflict_es_rs1_T_1 = eq(inst_type, UInt<7>("h45")) @[IDU.scala 492:47]
    node _conflict_es_rs1_T_2 = or(_conflict_es_rs1_T, _conflict_es_rs1_T_1) @[IDU.scala 492:36]
    node _conflict_es_rs1_T_3 = eq(csr_write, UInt<1>("h1")) @[IDU.scala 492:72]
    node _conflict_es_rs1_T_4 = or(_conflict_es_rs1_T_2, _conflict_es_rs1_T_3) @[IDU.scala 492:59]
    node _conflict_es_rs1_T_5 = eq(rs1, io.es_rf_dst) @[IDU.scala 492:89]
    node _conflict_es_rs1_T_6 = neq(rs1, UInt<1>("h0")) @[IDU.scala 492:111]
    node _conflict_es_rs1_T_7 = and(_conflict_es_rs1_T_5, _conflict_es_rs1_T_6) @[IDU.scala 492:105]
    node _conflict_es_rs1_T_8 = and(_conflict_es_rs1_T_7, io.es_rf_we) @[IDU.scala 492:118]
    node _conflict_es_rs1_T_9 = and(_conflict_es_rs1_T_8, io.es_valid) @[IDU.scala 492:131]
    node _conflict_es_rs1_T_10 = and(_conflict_es_rs1_T_4, _conflict_es_rs1_T_9) @[IDU.scala 492:81]
    conflict_es_rs1 <= _conflict_es_rs1_T_10 @[IDU.scala 492:21]
    node _conflict_ms_rs1_T = eq(src1_is_pc, UInt<1>("h0")) @[IDU.scala 493:25]
    node _conflict_ms_rs1_T_1 = eq(inst_type, UInt<7>("h45")) @[IDU.scala 493:47]
    node _conflict_ms_rs1_T_2 = or(_conflict_ms_rs1_T, _conflict_ms_rs1_T_1) @[IDU.scala 493:36]
    node _conflict_ms_rs1_T_3 = eq(csr_write, UInt<1>("h1")) @[IDU.scala 493:72]
    node _conflict_ms_rs1_T_4 = or(_conflict_ms_rs1_T_2, _conflict_ms_rs1_T_3) @[IDU.scala 493:59]
    node _conflict_ms_rs1_T_5 = eq(rs1, io.ms_rf_dst) @[IDU.scala 493:89]
    node _conflict_ms_rs1_T_6 = neq(rs1, UInt<1>("h0")) @[IDU.scala 493:111]
    node _conflict_ms_rs1_T_7 = and(_conflict_ms_rs1_T_5, _conflict_ms_rs1_T_6) @[IDU.scala 493:105]
    node _conflict_ms_rs1_T_8 = and(_conflict_ms_rs1_T_7, io.ms_rf_we) @[IDU.scala 493:118]
    node _conflict_ms_rs1_T_9 = and(_conflict_ms_rs1_T_8, io.ms_valid) @[IDU.scala 493:131]
    node _conflict_ms_rs1_T_10 = and(_conflict_ms_rs1_T_4, _conflict_ms_rs1_T_9) @[IDU.scala 493:81]
    conflict_ms_rs1 <= _conflict_ms_rs1_T_10 @[IDU.scala 493:21]
    node _conflict_ws_rs1_T = eq(src1_is_pc, UInt<1>("h0")) @[IDU.scala 494:25]
    node _conflict_ws_rs1_T_1 = eq(inst_type, UInt<7>("h45")) @[IDU.scala 494:47]
    node _conflict_ws_rs1_T_2 = or(_conflict_ws_rs1_T, _conflict_ws_rs1_T_1) @[IDU.scala 494:36]
    node _conflict_ws_rs1_T_3 = eq(csr_write, UInt<1>("h1")) @[IDU.scala 494:72]
    node _conflict_ws_rs1_T_4 = or(_conflict_ws_rs1_T_2, _conflict_ws_rs1_T_3) @[IDU.scala 494:59]
    node _conflict_ws_rs1_T_5 = eq(rs1, io.ws_rf_dst) @[IDU.scala 494:89]
    node _conflict_ws_rs1_T_6 = neq(rs1, UInt<1>("h0")) @[IDU.scala 494:111]
    node _conflict_ws_rs1_T_7 = and(_conflict_ws_rs1_T_5, _conflict_ws_rs1_T_6) @[IDU.scala 494:105]
    node _conflict_ws_rs1_T_8 = and(_conflict_ws_rs1_T_7, io.ws_rf_we) @[IDU.scala 494:118]
    node _conflict_ws_rs1_T_9 = and(_conflict_ws_rs1_T_8, io.ws_valid) @[IDU.scala 494:131]
    node _conflict_ws_rs1_T_10 = and(_conflict_ws_rs1_T_4, _conflict_ws_rs1_T_9) @[IDU.scala 494:81]
    conflict_ws_rs1 <= _conflict_ws_rs1_T_10 @[IDU.scala 494:21]
    node _conflict_es_rs2_T = eq(src2_is_imm, UInt<1>("h0")) @[IDU.scala 495:25]
    node _conflict_es_rs2_T_1 = eq(inst_type, UInt<7>("h44")) @[IDU.scala 495:48]
    node _conflict_es_rs2_T_2 = or(_conflict_es_rs2_T, _conflict_es_rs2_T_1) @[IDU.scala 495:37]
    node _conflict_es_rs2_T_3 = eq(inst_type, UInt<7>("h45")) @[IDU.scala 495:70]
    node _conflict_es_rs2_T_4 = or(_conflict_es_rs2_T_2, _conflict_es_rs2_T_3) @[IDU.scala 495:59]
    node _conflict_es_rs2_T_5 = eq(csr_write, UInt<2>("h3")) @[IDU.scala 495:92]
    node _conflict_es_rs2_T_6 = or(_conflict_es_rs2_T_4, _conflict_es_rs2_T_5) @[IDU.scala 495:81]
    node _conflict_es_rs2_T_7 = eq(rs2, io.es_rf_dst) @[IDU.scala 495:108]
    node _conflict_es_rs2_T_8 = neq(rs2, UInt<1>("h0")) @[IDU.scala 495:130]
    node _conflict_es_rs2_T_9 = and(_conflict_es_rs2_T_7, _conflict_es_rs2_T_8) @[IDU.scala 495:124]
    node _conflict_es_rs2_T_10 = and(_conflict_es_rs2_T_9, io.es_rf_we) @[IDU.scala 495:137]
    node _conflict_es_rs2_T_11 = and(_conflict_es_rs2_T_10, io.es_valid) @[IDU.scala 495:150]
    node _conflict_es_rs2_T_12 = and(_conflict_es_rs2_T_6, _conflict_es_rs2_T_11) @[IDU.scala 495:100]
    conflict_es_rs2 <= _conflict_es_rs2_T_12 @[IDU.scala 495:21]
    node _conflict_ms_rs2_T = eq(src2_is_imm, UInt<1>("h0")) @[IDU.scala 496:25]
    node _conflict_ms_rs2_T_1 = eq(inst_type, UInt<7>("h44")) @[IDU.scala 496:48]
    node _conflict_ms_rs2_T_2 = or(_conflict_ms_rs2_T, _conflict_ms_rs2_T_1) @[IDU.scala 496:37]
    node _conflict_ms_rs2_T_3 = eq(inst_type, UInt<7>("h45")) @[IDU.scala 496:70]
    node _conflict_ms_rs2_T_4 = or(_conflict_ms_rs2_T_2, _conflict_ms_rs2_T_3) @[IDU.scala 496:59]
    node _conflict_ms_rs2_T_5 = eq(csr_write, UInt<2>("h3")) @[IDU.scala 496:92]
    node _conflict_ms_rs2_T_6 = or(_conflict_ms_rs2_T_4, _conflict_ms_rs2_T_5) @[IDU.scala 496:81]
    node _conflict_ms_rs2_T_7 = eq(rs2, io.ms_rf_dst) @[IDU.scala 496:108]
    node _conflict_ms_rs2_T_8 = neq(rs2, UInt<1>("h0")) @[IDU.scala 496:130]
    node _conflict_ms_rs2_T_9 = and(_conflict_ms_rs2_T_7, _conflict_ms_rs2_T_8) @[IDU.scala 496:124]
    node _conflict_ms_rs2_T_10 = and(_conflict_ms_rs2_T_9, io.ms_rf_we) @[IDU.scala 496:137]
    node _conflict_ms_rs2_T_11 = and(_conflict_ms_rs2_T_10, io.ms_valid) @[IDU.scala 496:150]
    node _conflict_ms_rs2_T_12 = and(_conflict_ms_rs2_T_6, _conflict_ms_rs2_T_11) @[IDU.scala 496:100]
    conflict_ms_rs2 <= _conflict_ms_rs2_T_12 @[IDU.scala 496:21]
    node _conflict_ws_rs2_T = eq(src2_is_imm, UInt<1>("h0")) @[IDU.scala 497:25]
    node _conflict_ws_rs2_T_1 = eq(inst_type, UInt<7>("h44")) @[IDU.scala 497:48]
    node _conflict_ws_rs2_T_2 = or(_conflict_ws_rs2_T, _conflict_ws_rs2_T_1) @[IDU.scala 497:37]
    node _conflict_ws_rs2_T_3 = eq(inst_type, UInt<7>("h45")) @[IDU.scala 497:70]
    node _conflict_ws_rs2_T_4 = or(_conflict_ws_rs2_T_2, _conflict_ws_rs2_T_3) @[IDU.scala 497:59]
    node _conflict_ws_rs2_T_5 = eq(csr_write, UInt<2>("h3")) @[IDU.scala 497:92]
    node _conflict_ws_rs2_T_6 = or(_conflict_ws_rs2_T_4, _conflict_ws_rs2_T_5) @[IDU.scala 497:81]
    node _conflict_ws_rs2_T_7 = eq(rs2, io.ws_rf_dst) @[IDU.scala 497:108]
    node _conflict_ws_rs2_T_8 = neq(rs2, UInt<1>("h0")) @[IDU.scala 497:130]
    node _conflict_ws_rs2_T_9 = and(_conflict_ws_rs2_T_7, _conflict_ws_rs2_T_8) @[IDU.scala 497:124]
    node _conflict_ws_rs2_T_10 = and(_conflict_ws_rs2_T_9, io.ws_rf_we) @[IDU.scala 497:137]
    node _conflict_ws_rs2_T_11 = and(_conflict_ws_rs2_T_10, io.ws_valid) @[IDU.scala 497:150]
    node _conflict_ws_rs2_T_12 = and(_conflict_ws_rs2_T_6, _conflict_ws_rs2_T_11) @[IDU.scala 497:100]
    conflict_ws_rs2 <= _conflict_ws_rs2_T_12 @[IDU.scala 497:21]
    node _rdata1_T = mux(conflict_ws_rs1, io.ws_fwd_res, io.rdata1) @[IDU.scala 498:86]
    node _rdata1_T_1 = mux(conflict_ms_rs1, io.ms_fwd_res, _rdata1_T) @[IDU.scala 498:52]
    node _rdata1_T_2 = mux(conflict_es_rs1, io.es_fwd_res, _rdata1_T_1) @[IDU.scala 498:18]
    rdata1 <= _rdata1_T_2 @[IDU.scala 498:12]
    node _rdata2_T = mux(conflict_ws_rs2, io.ws_fwd_res, io.rdata2) @[IDU.scala 499:86]
    node _rdata2_T_1 = mux(conflict_ms_rs2, io.ms_fwd_res, _rdata2_T) @[IDU.scala 499:52]
    node _rdata2_T_2 = mux(conflict_es_rs2, io.es_fwd_res, _rdata2_T_1) @[IDU.scala 499:18]
    rdata2 <= _rdata2_T_2 @[IDU.scala 499:12]
    io.br_target <= br_target @[IDU.scala 502:18]
    node _io_br_taken_T = and(br_taken, ds_ready_go) @[IDU.scala 503:29]
    node _io_br_taken_T_1 = eq(br_taken_cancel, UInt<1>("h0")) @[IDU.scala 503:47]
    node _io_br_taken_T_2 = and(_io_br_taken_T, _io_br_taken_T_1) @[IDU.scala 503:44]
    io.br_taken <= _io_br_taken_T_2 @[IDU.scala 503:17]
    node _io_store_data_T = bits(rdata2, 15, 0) @[IDU.scala 508:21]
    node _io_store_data_T_1 = bits(rdata2, 7, 0) @[IDU.scala 509:21]
    node _io_store_data_T_2 = bits(rdata2, 31, 0) @[IDU.scala 510:21]
    node _io_store_data_T_3 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _io_store_data_T_4 = eq(UInt<14>("h3023"), _io_store_data_T_3) @[Lookup.scala 31:38]
    node _io_store_data_T_5 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _io_store_data_T_6 = eq(UInt<13>("h1023"), _io_store_data_T_5) @[Lookup.scala 31:38]
    node _io_store_data_T_7 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _io_store_data_T_8 = eq(UInt<6>("h23"), _io_store_data_T_7) @[Lookup.scala 31:38]
    node _io_store_data_T_9 = and(inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _io_store_data_T_10 = eq(UInt<14>("h2023"), _io_store_data_T_9) @[Lookup.scala 31:38]
    node _io_store_data_T_11 = mux(_io_store_data_T_10, _io_store_data_T_2, UInt<1>("h0")) @[Lookup.scala 34:39]
    node _io_store_data_T_12 = mux(_io_store_data_T_8, _io_store_data_T_1, _io_store_data_T_11) @[Lookup.scala 34:39]
    node _io_store_data_T_13 = mux(_io_store_data_T_6, _io_store_data_T, _io_store_data_T_12) @[Lookup.scala 34:39]
    node _io_store_data_T_14 = mux(_io_store_data_T_4, rdata2, _io_store_data_T_13) @[Lookup.scala 34:39]
    io.store_data <= _io_store_data_T_14 @[IDU.scala 506:19]
    io.ds_allowin <= ds_allowin @[IDU.scala 512:19]
    io.load_type <= load_type @[IDU.scala 514:18]
    node _io_src1_T = bits(csr_write, 0, 0) @[IDU.scala 515:29]
    node _io_src1_T_1 = eq(_io_src1_T, UInt<1>("h1")) @[IDU.scala 515:32]
    node _io_src1_T_2 = mux(_io_src1_T_1, csr_reg.io.rdata, src1) @[IDU.scala 515:19]
    io.src1 <= _io_src1_T_2 @[IDU.scala 515:13]
    io.src2 <= src2 @[IDU.scala 516:13]
    io.rf_dst <= rd @[IDU.scala 517:15]
    io.ALUop <= ALUop @[IDU.scala 518:14]
    io.ctrl_sign.reg_write <= reg_write @[IDU.scala 519:28]
    io.ctrl_sign.Writemem_en <= Writemem_en @[IDU.scala 522:30]
    io.ctrl_sign.Readmem_en <= Readmem_en @[IDU.scala 523:29]
    io.ctrl_sign.Wmask <= Wmask @[IDU.scala 524:24]
    io.ctrl_sign.csr_write <= csr_write @[IDU.scala 525:28]
    io.to_es_pc <= ds_pc @[IDU.scala 526:17]
    io.ds_to_es_valid <= ds_to_es_valid @[IDU.scala 527:23]
    io.ds_valid <= ds_valid @[IDU.scala 528:17]

  module partial_product :
    input clock : Clock
    input reset : Reset
    output io : { flip y : UInt<3>, flip x : UInt<64>, c : UInt<1>, p : UInt<64>}

    node _io_p_T = shl(io.x, 1) @[Mul.scala 24:18]
    node _io_p_T_1 = shl(io.x, 1) @[Mul.scala 25:19]
    node _io_p_T_2 = not(_io_p_T_1) @[Mul.scala 25:12]
    node _io_p_T_3 = not(io.x) @[Mul.scala 26:12]
    node _io_p_T_4 = not(io.x) @[Mul.scala 27:12]
    node _io_p_T_5 = eq(UInt<1>("h1"), io.y) @[Mux.scala 81:61]
    node _io_p_T_6 = mux(_io_p_T_5, io.x, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_p_T_7 = eq(UInt<2>("h2"), io.y) @[Mux.scala 81:61]
    node _io_p_T_8 = mux(_io_p_T_7, io.x, _io_p_T_6) @[Mux.scala 81:58]
    node _io_p_T_9 = eq(UInt<2>("h3"), io.y) @[Mux.scala 81:61]
    node _io_p_T_10 = mux(_io_p_T_9, _io_p_T, _io_p_T_8) @[Mux.scala 81:58]
    node _io_p_T_11 = eq(UInt<3>("h4"), io.y) @[Mux.scala 81:61]
    node _io_p_T_12 = mux(_io_p_T_11, _io_p_T_2, _io_p_T_10) @[Mux.scala 81:58]
    node _io_p_T_13 = eq(UInt<3>("h5"), io.y) @[Mux.scala 81:61]
    node _io_p_T_14 = mux(_io_p_T_13, _io_p_T_3, _io_p_T_12) @[Mux.scala 81:58]
    node _io_p_T_15 = eq(UInt<3>("h6"), io.y) @[Mux.scala 81:61]
    node _io_p_T_16 = mux(_io_p_T_15, _io_p_T_4, _io_p_T_14) @[Mux.scala 81:58]
    node _io_p_T_17 = eq(UInt<3>("h7"), io.y) @[Mux.scala 81:61]
    node _io_p_T_18 = mux(_io_p_T_17, UInt<1>("h0"), _io_p_T_16) @[Mux.scala 81:58]
    io.p <= _io_p_T_18 @[Mul.scala 20:8]
    node _io_c_T = eq(UInt<3>("h4"), io.y) @[Mux.scala 81:61]
    node _io_c_T_1 = mux(_io_c_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_c_T_2 = eq(UInt<3>("h5"), io.y) @[Mux.scala 81:61]
    node _io_c_T_3 = mux(_io_c_T_2, UInt<1>("h1"), _io_c_T_1) @[Mux.scala 81:58]
    node _io_c_T_4 = eq(UInt<3>("h6"), io.y) @[Mux.scala 81:61]
    node _io_c_T_5 = mux(_io_c_T_4, UInt<1>("h1"), _io_c_T_3) @[Mux.scala 81:58]
    io.c <= _io_c_T_5 @[Mul.scala 30:8]

  module Mul :
    input clock : Clock
    input reset : Reset
    output io : { flip mul_valid : UInt<1>, flip flush : UInt<1>, flip mulw : UInt<1>, flip mul_signed : UInt<2>, flip multiplicand : UInt<64>, flip multiplier : UInt<64>, mul_ready : UInt<1>, out_valid : UInt<1>, flip out_ready : UInt<1>, result_hi : UInt<32>, result_lo : UInt<32>}

    wire sign : UInt<1> @[Mul.scala 51:20]
    node _sign_T = bits(io.multiplicand, 63, 63) @[Mul.scala 52:28]
    node _sign_T_1 = bits(io.multiplier, 63, 63) @[Mul.scala 52:48]
    node _sign_T_2 = xor(_sign_T, _sign_T_1) @[Mul.scala 52:33]
    sign <= _sign_T_2 @[Mul.scala 52:10]
    reg res : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Mul.scala 54:22]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Mul.scala 56:24]
    reg src1 : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[Mul.scala 58:23]
    reg src2 : UInt<65>, clock with :
      reset => (reset, UInt<65>("h0")) @[Mul.scala 59:23]
    wire real_cand : UInt<128> @[Mul.scala 61:25]
    wire real_er : UInt<64> @[Mul.scala 62:23]
    wire src1_32 : UInt<64> @[Mul.scala 64:23]
    wire src2_32 : UInt<64> @[Mul.scala 65:23]
    node _src1_32_T = bits(io.multiplicand, 31, 31) @[Mul.scala 66:55]
    node _src1_32_T_1 = bits(_src1_32_T, 0, 0) @[Bitwise.scala 74:15]
    node _src1_32_T_2 = mux(_src1_32_T_1, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _src1_32_T_3 = bits(io.multiplicand, 31, 0) @[Mul.scala 66:76]
    node _src1_32_T_4 = cat(_src1_32_T_2, _src1_32_T_3) @[Cat.scala 31:58]
    node _src1_32_T_5 = mux(io.mulw, _src1_32_T_4, io.multiplicand) @[Mul.scala 66:19]
    src1_32 <= _src1_32_T_5 @[Mul.scala 66:13]
    node _src2_32_T = bits(io.multiplier, 31, 31) @[Mul.scala 67:53]
    node _src2_32_T_1 = bits(_src2_32_T, 0, 0) @[Bitwise.scala 74:15]
    node _src2_32_T_2 = mux(_src2_32_T_1, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _src2_32_T_3 = bits(io.multiplier, 31, 0) @[Mul.scala 67:72]
    node _src2_32_T_4 = cat(_src2_32_T_2, _src2_32_T_3) @[Cat.scala 31:58]
    node _src2_32_T_5 = mux(io.mulw, _src2_32_T_4, io.multiplier) @[Mul.scala 67:19]
    src2_32 <= _src2_32_T_5 @[Mul.scala 67:13]
    node _real_cand_T = eq(io.mul_signed, UInt<2>("h3")) @[Mul.scala 69:35]
    node _real_cand_T_1 = eq(io.mul_signed, UInt<2>("h2")) @[Mul.scala 69:56]
    node _real_cand_T_2 = or(_real_cand_T, _real_cand_T_1) @[Mul.scala 69:41]
    node _real_cand_T_3 = bits(src1_32, 63, 63) @[Mul.scala 69:83]
    node _real_cand_T_4 = bits(_real_cand_T_3, 0, 0) @[Bitwise.scala 74:15]
    node _real_cand_T_5 = mux(_real_cand_T_4, UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 74:12]
    node _real_cand_T_6 = cat(_real_cand_T_5, src1_32) @[Cat.scala 31:58]
    node _real_cand_T_7 = mux(_real_cand_T_2, _real_cand_T_6, src1_32) @[Mul.scala 69:21]
    real_cand <= _real_cand_T_7 @[Mul.scala 69:15]
    node _real_er_T = cat(src2_32, UInt<1>("h0")) @[Cat.scala 31:58]
    real_er <= _real_er_T @[Mul.scala 70:13]
    inst booth_partial of partial_product @[Mul.scala 72:31]
    booth_partial.clock <= clock
    booth_partial.reset <= reset
    node _booth_partial_io_y_T = bits(src2, 2, 0) @[Mul.scala 73:31]
    booth_partial.io.y <= _booth_partial_io_y_T @[Mul.scala 73:24]
    booth_partial.io.x <= src1 @[Mul.scala 74:24]
    node _T = eq(UInt<2>("h0"), state) @[Mul.scala 76:18]
    when _T : @[Mul.scala 76:18]
      node _T_1 = not(io.flush) @[Mul.scala 78:18]
      node _T_2 = and(_T_1, io.mul_valid) @[Mul.scala 78:28]
      when _T_2 : @[Mul.scala 78:44]
        state <= UInt<2>("h1") @[Mul.scala 79:23]
        src1 <= real_cand @[Mul.scala 80:22]
        src2 <= real_er @[Mul.scala 81:22]
        res <= UInt<1>("h0") @[Mul.scala 82:21]
    else :
      node _T_3 = eq(UInt<2>("h1"), state) @[Mul.scala 76:18]
      when _T_3 : @[Mul.scala 76:18]
        when io.flush : @[Mul.scala 86:27]
          state <= UInt<2>("h0") @[Mul.scala 87:23]
        else :
          node _T_4 = neq(src2, UInt<1>("h0")) @[Mul.scala 89:26]
          when _T_4 : @[Mul.scala 89:33]
            node _res_T = add(res, booth_partial.io.p) @[Mul.scala 90:32]
            node _res_T_1 = tail(_res_T, 1) @[Mul.scala 90:32]
            node _res_T_2 = add(_res_T_1, booth_partial.io.c) @[Mul.scala 90:53]
            node _res_T_3 = tail(_res_T_2, 1) @[Mul.scala 90:53]
            res <= _res_T_3 @[Mul.scala 90:25]
            node _src2_T = shr(src2, 2) @[Mul.scala 91:34]
            src2 <= _src2_T @[Mul.scala 91:26]
            node _src1_T = shl(src1, 2) @[Mul.scala 92:34]
            src1 <= _src1_T @[Mul.scala 92:26]
          else :
            when io.out_ready : @[Mul.scala 94:39]
              state <= UInt<2>("h0") @[Mul.scala 95:31]
    node _T_5 = eq(state, UInt<2>("h0")) @[Mul.scala 102:15]
    when _T_5 : @[Mul.scala 102:23]
      io.mul_ready <= UInt<1>("h1") @[Mul.scala 103:22]
      io.out_valid <= UInt<1>("h0") @[Mul.scala 104:22]
      io.result_hi <= UInt<1>("h0") @[Mul.scala 105:22]
      io.result_lo <= UInt<1>("h0") @[Mul.scala 106:22]
    else :
      node _T_6 = eq(state, UInt<2>("h1")) @[Mul.scala 107:21]
      when _T_6 : @[Mul.scala 107:33]
        node _T_7 = neq(src2, UInt<1>("h0")) @[Mul.scala 108:18]
        node _T_8 = or(_T_7, io.flush) @[Mul.scala 108:24]
        when _T_8 : @[Mul.scala 108:35]
          io.mul_ready <= UInt<1>("h0") @[Mul.scala 109:26]
          io.out_valid <= UInt<1>("h0") @[Mul.scala 110:26]
          io.result_hi <= UInt<1>("h0") @[Mul.scala 111:26]
          io.result_lo <= UInt<1>("h0") @[Mul.scala 112:26]
        else :
          node _io_result_hi_T = bits(res, 62, 32) @[Mul.scala 114:41]
          node _io_result_hi_T_1 = cat(sign, _io_result_hi_T) @[Cat.scala 31:58]
          io.result_hi <= _io_result_hi_T_1 @[Mul.scala 114:26]
          node _io_result_lo_T = bits(res, 31, 0) @[Mul.scala 115:32]
          io.result_lo <= _io_result_lo_T @[Mul.scala 115:26]
          io.out_valid <= UInt<1>("h1") @[Mul.scala 116:26]
          io.mul_ready <= UInt<1>("h0") @[Mul.scala 117:26]
      else :
        io.mul_ready <= UInt<1>("h0") @[Mul.scala 120:22]
        io.out_valid <= UInt<1>("h0") @[Mul.scala 121:22]
        io.result_hi <= UInt<1>("h0") @[Mul.scala 122:22]
        io.result_lo <= UInt<1>("h0") @[Mul.scala 123:22]

  module Div :
    input clock : Clock
    input reset : Reset
    output io : { flip dividend : UInt<64>, flip divisor : UInt<64>, flip div_valid : UInt<1>, flip divw : UInt<1>, flip div_signed : UInt<1>, flip flush : UInt<1>, div_ready : UInt<1>, out_valid : UInt<1>, flip out_ready : UInt<1>, quotient : UInt<64>, remainder : UInt<64>}

    wire dend_neg : UInt<1> @[Div.scala 21:24]
    wire sor_neg : UInt<1> @[Div.scala 22:23]
    wire quotient_neg : UInt<1> @[Div.scala 23:28]
    wire remainder_neg : UInt<1> @[Div.scala 24:29]
    node _dend_neg_T = bits(io.dividend, 31, 31) @[Div.scala 26:41]
    node _dend_neg_T_1 = bits(io.dividend, 63, 63) @[Div.scala 26:58]
    node _dend_neg_T_2 = mux(io.divw, _dend_neg_T, _dend_neg_T_1) @[Div.scala 26:20]
    dend_neg <= _dend_neg_T_2 @[Div.scala 26:14]
    node _sor_neg_T = bits(io.divisor, 31, 31) @[Div.scala 27:39]
    node _sor_neg_T_1 = bits(io.divisor, 63, 63) @[Div.scala 27:55]
    node _sor_neg_T_2 = mux(io.divw, _sor_neg_T, _sor_neg_T_1) @[Div.scala 27:19]
    sor_neg <= _sor_neg_T_2 @[Div.scala 27:13]
    node _quotient_neg_T = not(sor_neg) @[Div.scala 28:33]
    node _quotient_neg_T_1 = and(dend_neg, _quotient_neg_T) @[Div.scala 28:31]
    node _quotient_neg_T_2 = not(dend_neg) @[Div.scala 28:46]
    node _quotient_neg_T_3 = and(_quotient_neg_T_2, sor_neg) @[Div.scala 28:56]
    node _quotient_neg_T_4 = or(_quotient_neg_T_1, _quotient_neg_T_3) @[Div.scala 28:43]
    quotient_neg <= _quotient_neg_T_4 @[Div.scala 28:18]
    remainder_neg <= dend_neg @[Div.scala 29:19]
    wire src1_32_s : UInt<64> @[Div.scala 31:25]
    wire src2_32_s : UInt<64> @[Div.scala 32:25]
    wire src1_32 : UInt<64> @[Div.scala 33:23]
    wire src2_32 : UInt<64> @[Div.scala 34:23]
    node _src1_32_s_T = bits(io.dividend, 31, 31) @[Div.scala 36:53]
    node _src1_32_s_T_1 = bits(_src1_32_s_T, 0, 0) @[Bitwise.scala 74:15]
    node _src1_32_s_T_2 = mux(_src1_32_s_T_1, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _src1_32_s_T_3 = bits(io.dividend, 31, 0) @[Div.scala 36:70]
    node _src1_32_s_T_4 = cat(_src1_32_s_T_2, _src1_32_s_T_3) @[Cat.scala 31:58]
    node _src1_32_s_T_5 = mux(io.divw, _src1_32_s_T_4, io.dividend) @[Div.scala 36:21]
    src1_32_s <= _src1_32_s_T_5 @[Div.scala 36:15]
    node _src2_32_s_T = bits(io.divisor, 31, 31) @[Div.scala 37:52]
    node _src2_32_s_T_1 = bits(_src2_32_s_T, 0, 0) @[Bitwise.scala 74:15]
    node _src2_32_s_T_2 = mux(_src2_32_s_T_1, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _src2_32_s_T_3 = bits(io.divisor, 31, 0) @[Div.scala 37:68]
    node _src2_32_s_T_4 = cat(_src2_32_s_T_2, _src2_32_s_T_3) @[Cat.scala 31:58]
    node _src2_32_s_T_5 = mux(io.divw, _src2_32_s_T_4, io.divisor) @[Div.scala 37:21]
    src2_32_s <= _src2_32_s_T_5 @[Div.scala 37:15]
    node _src1_32_T = bits(io.dividend, 31, 0) @[Div.scala 38:39]
    node _src1_32_T_1 = mux(io.divw, _src1_32_T, io.dividend) @[Div.scala 38:19]
    src1_32 <= _src1_32_T_1 @[Div.scala 38:13]
    node _src2_32_T = bits(io.divisor, 31, 0) @[Div.scala 39:38]
    node _src2_32_T_1 = mux(io.divw, _src2_32_T, io.divisor) @[Div.scala 39:19]
    src2_32 <= _src2_32_T_1 @[Div.scala 39:13]
    wire real_cand : UInt<64> @[Div.scala 41:25]
    wire real_er : UInt<64> @[Div.scala 42:23]
    node _real_cand_T = eq(io.div_signed, UInt<1>("h1")) @[Div.scala 43:35]
    node _real_cand_T_1 = eq(dend_neg, UInt<1>("h1")) @[Div.scala 43:54]
    node _real_cand_T_2 = not(src1_32_s) @[Div.scala 43:61]
    node _real_cand_T_3 = add(_real_cand_T_2, UInt<1>("h1")) @[Div.scala 43:71]
    node _real_cand_T_4 = tail(_real_cand_T_3, 1) @[Div.scala 43:71]
    node _real_cand_T_5 = mux(_real_cand_T_1, _real_cand_T_4, src1_32_s) @[Div.scala 43:45]
    node _real_cand_T_6 = mux(_real_cand_T, _real_cand_T_5, src1_32) @[Div.scala 43:21]
    real_cand <= _real_cand_T_6 @[Div.scala 43:15]
    node _real_er_T = eq(io.div_signed, UInt<1>("h1")) @[Div.scala 44:33]
    node _real_er_T_1 = eq(sor_neg, UInt<1>("h1")) @[Div.scala 44:51]
    node _real_er_T_2 = not(src2_32_s) @[Div.scala 44:58]
    node _real_er_T_3 = add(_real_er_T_2, UInt<1>("h1")) @[Div.scala 44:68]
    node _real_er_T_4 = tail(_real_er_T_3, 1) @[Div.scala 44:68]
    node _real_er_T_5 = mux(_real_er_T_1, _real_er_T_4, src2_32_s) @[Div.scala 44:43]
    node _real_er_T_6 = mux(_real_er_T, _real_er_T_5, src2_32) @[Div.scala 44:19]
    real_er <= _real_er_T_6 @[Div.scala 44:13]
    wire src1 : UInt<128> @[Div.scala 46:20]
    wire src2 : UInt<65> @[Div.scala 47:20]
    node _src1_T = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _src1_T_1 = cat(_src1_T, real_cand) @[Cat.scala 31:58]
    src1 <= _src1_T_1 @[Div.scala 48:10]
    node _src2_T = cat(UInt<1>("h0"), real_er) @[Cat.scala 31:58]
    src2 <= _src2_T @[Div.scala 49:10]
    reg div_cand : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[Div.scala 51:27]
    reg div_start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Div.scala 52:28]
    reg quotient : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Div.scala 54:27]
    reg step_num : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Div.scala 56:27]
    node _io_div_ready_T = not(div_start) @[Div.scala 57:21]
    io.div_ready <= _io_div_ready_T @[Div.scala 57:18]
    when io.flush : @[Div.scala 58:19]
      div_start <= UInt<1>("h0") @[Div.scala 59:19]
      quotient <= UInt<1>("h0") @[Div.scala 60:18]
      step_num <= UInt<7>("h40") @[Div.scala 61:18]
    else :
      node _T = eq(div_start, UInt<1>("h0")) @[Div.scala 63:30]
      node _T_1 = and(io.div_valid, _T) @[Div.scala 63:27]
      when _T_1 : @[Div.scala 63:41]
        div_start <= UInt<1>("h1") @[Div.scala 64:23]
        div_cand <= src1 @[Div.scala 65:22]
        quotient <= UInt<1>("h0") @[Div.scala 66:22]
        step_num <= UInt<7>("h40") @[Div.scala 68:22]
      else :
        node _T_2 = asSInt(step_num) @[Div.scala 69:42]
        node _T_3 = leq(_T_2, asSInt(UInt<1>("h0"))) @[Div.scala 69:49]
        node _T_4 = and(div_start, _T_3) @[Div.scala 69:30]
        when _T_4 : @[Div.scala 69:56]
          div_start <= UInt<1>("h0") @[Div.scala 70:23]
    when div_start : @[Div.scala 73:20]
      node _T_5 = asSInt(step_num) @[Div.scala 74:23]
      node _T_6 = gt(_T_5, asSInt(UInt<1>("h0"))) @[Div.scala 74:30]
      when _T_6 : @[Div.scala 74:36]
        wire sub_res : UInt<65> @[Div.scala 75:31]
        wire new_cand : UInt<128> @[Div.scala 76:32]
        wire update_cand : UInt<128> @[Div.scala 77:35]
        node _sub_res_T = bits(div_cand, 127, 63) @[Div.scala 78:32]
        node _sub_res_T_1 = sub(_sub_res_T, src2) @[Div.scala 78:41]
        node _sub_res_T_2 = tail(_sub_res_T_1, 1) @[Div.scala 78:41]
        sub_res <= _sub_res_T_2 @[Div.scala 78:21]
        node _quotient_T = bits(sub_res, 64, 64) @[Div.scala 80:36]
        node _quotient_T_1 = eq(_quotient_T, UInt<1>("h1")) @[Div.scala 80:40]
        node _quotient_T_2 = dshl(quotient, UInt<1>("h1")) @[Div.scala 80:57]
        node _quotient_T_3 = dshl(quotient, UInt<1>("h1")) @[Div.scala 80:74]
        node _quotient_T_4 = or(_quotient_T_3, UInt<64>("h1")) @[Div.scala 80:81]
        node _quotient_T_5 = mux(_quotient_T_1, _quotient_T_2, _quotient_T_4) @[Div.scala 80:28]
        quotient <= _quotient_T_5 @[Div.scala 80:22]
        node _update_cand_T = shl(sub_res, 63) @[Div.scala 81:36]
        update_cand <= _update_cand_T @[Div.scala 81:25]
        node _new_cand_T = bits(sub_res, 64, 64) @[Div.scala 82:36]
        node _new_cand_T_1 = eq(_new_cand_T, UInt<1>("h1")) @[Div.scala 82:40]
        node _new_cand_T_2 = and(div_cand, UInt<63>("h7fffffffffffffff")) @[Div.scala 82:68]
        node _new_cand_T_3 = or(_new_cand_T_2, update_cand) @[Div.scala 82:93]
        node _new_cand_T_4 = mux(_new_cand_T_1, div_cand, _new_cand_T_3) @[Div.scala 82:28]
        new_cand <= _new_cand_T_4 @[Div.scala 82:22]
        node _div_cand_T = shl(new_cand, 1) @[Div.scala 83:34]
        div_cand <= _div_cand_T @[Div.scala 83:22]
        node _step_num_T = sub(step_num, UInt<1>("h1")) @[Div.scala 84:34]
        node _step_num_T_1 = tail(_step_num_T, 1) @[Div.scala 84:34]
        step_num <= _step_num_T_1 @[Div.scala 84:22]
        io.remainder <= UInt<1>("h0") @[Div.scala 85:26]
        io.out_valid <= UInt<1>("h0") @[Div.scala 86:26]
        io.quotient <= UInt<1>("h0") @[Div.scala 87:25]
      else :
        node _io_remainder_T = eq(io.div_signed, UInt<1>("h1")) @[Div.scala 89:46]
        node _io_remainder_T_1 = eq(remainder_neg, UInt<1>("h1")) @[Div.scala 89:70]
        node _io_remainder_T_2 = bits(div_cand, 127, 64) @[Div.scala 89:86]
        node _io_remainder_T_3 = not(_io_remainder_T_2) @[Div.scala 89:77]
        node _io_remainder_T_4 = add(_io_remainder_T_3, UInt<1>("h1")) @[Div.scala 89:94]
        node _io_remainder_T_5 = tail(_io_remainder_T_4, 1) @[Div.scala 89:94]
        node _io_remainder_T_6 = bits(div_cand, 127, 64) @[Div.scala 89:107]
        node _io_remainder_T_7 = mux(_io_remainder_T_1, _io_remainder_T_5, _io_remainder_T_6) @[Div.scala 89:56]
        node _io_remainder_T_8 = bits(div_cand, 127, 64) @[Div.scala 89:125]
        node _io_remainder_T_9 = mux(_io_remainder_T, _io_remainder_T_7, _io_remainder_T_8) @[Div.scala 89:32]
        io.remainder <= _io_remainder_T_9 @[Div.scala 89:26]
        io.out_valid <= UInt<1>("h1") @[Div.scala 90:26]
        node _io_quotient_T = eq(io.div_signed, UInt<1>("h1")) @[Div.scala 91:45]
        node _io_quotient_T_1 = eq(quotient_neg, UInt<1>("h1")) @[Div.scala 91:68]
        node _io_quotient_T_2 = not(quotient) @[Div.scala 91:75]
        node _io_quotient_T_3 = add(_io_quotient_T_2, UInt<1>("h1")) @[Div.scala 91:84]
        node _io_quotient_T_4 = tail(_io_quotient_T_3, 1) @[Div.scala 91:84]
        node _io_quotient_T_5 = mux(_io_quotient_T_1, _io_quotient_T_4, quotient) @[Div.scala 91:55]
        node _io_quotient_T_6 = mux(_io_quotient_T, _io_quotient_T_5, quotient) @[Div.scala 91:31]
        io.quotient <= _io_quotient_T_6 @[Div.scala 91:25]
    else :
      io.remainder <= UInt<1>("h0") @[Div.scala 94:22]
      io.out_valid <= UInt<1>("h0") @[Div.scala 95:22]
      io.quotient <= UInt<1>("h0") @[Div.scala 96:21]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1_value : UInt<64>, flip src2_value : UInt<64>, flip ALUop : UInt<32>, flip src_valid : UInt<1>, src_ready : UInt<1>, res_valid : UInt<1>, alu_busy : UInt<1>, flip res_ready : UInt<1>, alu_res : UInt<64>}

    wire mul_valid : UInt<1> @[ALU.scala 27:25]
    wire mul_w : UInt<1> @[ALU.scala 28:21]
    wire div_valid : UInt<1> @[ALU.scala 29:25]
    wire div_w : UInt<1> @[ALU.scala 30:21]
    wire div_signed : UInt<1> @[ALU.scala 31:26]
    node _mul_valid_T = eq(UInt<5>("h11"), io.ALUop) @[Mux.scala 81:61]
    node _mul_valid_T_1 = mux(_mul_valid_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _mul_valid_T_2 = eq(UInt<5>("h12"), io.ALUop) @[Mux.scala 81:61]
    node _mul_valid_T_3 = mux(_mul_valid_T_2, UInt<1>("h1"), _mul_valid_T_1) @[Mux.scala 81:58]
    mul_valid <= _mul_valid_T_3 @[ALU.scala 32:15]
    node _div_valid_T = eq(UInt<6>("h31"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_1 = mux(_div_valid_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _div_valid_T_2 = eq(UInt<6>("h30"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_3 = mux(_div_valid_T_2, UInt<1>("h1"), _div_valid_T_1) @[Mux.scala 81:58]
    node _div_valid_T_4 = eq(UInt<5>("h13"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_5 = mux(_div_valid_T_4, UInt<1>("h1"), _div_valid_T_3) @[Mux.scala 81:58]
    node _div_valid_T_6 = eq(UInt<6>("h35"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_7 = mux(_div_valid_T_6, UInt<1>("h1"), _div_valid_T_5) @[Mux.scala 81:58]
    node _div_valid_T_8 = eq(UInt<6>("h34"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_9 = mux(_div_valid_T_8, UInt<1>("h1"), _div_valid_T_7) @[Mux.scala 81:58]
    node _div_valid_T_10 = eq(UInt<6>("h33"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_11 = mux(_div_valid_T_10, UInt<1>("h1"), _div_valid_T_9) @[Mux.scala 81:58]
    node _div_valid_T_12 = eq(UInt<5>("h14"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_13 = mux(_div_valid_T_12, UInt<1>("h1"), _div_valid_T_11) @[Mux.scala 81:58]
    node _div_valid_T_14 = eq(UInt<6>("h32"), io.ALUop) @[Mux.scala 81:61]
    node _div_valid_T_15 = mux(_div_valid_T_14, UInt<1>("h1"), _div_valid_T_13) @[Mux.scala 81:58]
    div_valid <= _div_valid_T_15 @[ALU.scala 36:15]
    node _mul_w_T = eq(io.ALUop, UInt<5>("h12")) @[ALU.scala 46:22]
    mul_w <= _mul_w_T @[ALU.scala 46:11]
    node _div_w_T = eq(UInt<5>("h13"), io.ALUop) @[Mux.scala 81:61]
    node _div_w_T_1 = mux(_div_w_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _div_w_T_2 = eq(UInt<6>("h35"), io.ALUop) @[Mux.scala 81:61]
    node _div_w_T_3 = mux(_div_w_T_2, UInt<1>("h1"), _div_w_T_1) @[Mux.scala 81:58]
    node _div_w_T_4 = eq(UInt<5>("h14"), io.ALUop) @[Mux.scala 81:61]
    node _div_w_T_5 = mux(_div_w_T_4, UInt<1>("h1"), _div_w_T_3) @[Mux.scala 81:58]
    node _div_w_T_6 = eq(UInt<6>("h32"), io.ALUop) @[Mux.scala 81:61]
    node _div_w_T_7 = mux(_div_w_T_6, UInt<1>("h1"), _div_w_T_5) @[Mux.scala 81:58]
    div_w <= _div_w_T_7 @[ALU.scala 47:11]
    node _div_signed_T = eq(UInt<6>("h31"), io.ALUop) @[Mux.scala 81:61]
    node _div_signed_T_1 = mux(_div_signed_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _div_signed_T_2 = eq(UInt<5>("h13"), io.ALUop) @[Mux.scala 81:61]
    node _div_signed_T_3 = mux(_div_signed_T_2, UInt<1>("h1"), _div_signed_T_1) @[Mux.scala 81:58]
    node _div_signed_T_4 = eq(UInt<6>("h34"), io.ALUop) @[Mux.scala 81:61]
    node _div_signed_T_5 = mux(_div_signed_T_4, UInt<1>("h1"), _div_signed_T_3) @[Mux.scala 81:58]
    node _div_signed_T_6 = eq(UInt<5>("h14"), io.ALUop) @[Mux.scala 81:61]
    node _div_signed_T_7 = mux(_div_signed_T_6, UInt<1>("h1"), _div_signed_T_5) @[Mux.scala 81:58]
    div_signed <= _div_signed_T_7 @[ALU.scala 53:16]
    inst Mul of Mul @[ALU.scala 61:28]
    Mul.clock <= clock
    Mul.reset <= reset
    inst Div of Div @[ALU.scala 62:28]
    Div.clock <= clock
    Div.reset <= reset
    node _T = and(mul_valid, io.src_valid) @[ALU.scala 63:39]
    Mul.io.mul_valid <= _T @[ALU.scala 63:26]
    Mul.io.flush <= UInt<1>("h0") @[ALU.scala 64:22]
    Mul.io.mulw <= mul_w @[ALU.scala 65:21]
    Mul.io.mul_signed <= UInt<2>("h3") @[ALU.scala 66:27]
    Mul.io.multiplicand <= io.src1_value @[ALU.scala 67:29]
    Mul.io.multiplier <= io.src2_value @[ALU.scala 68:27]
    Mul.io.out_ready <= io.res_ready @[ALU.scala 69:26]
    Div.io.dividend <= io.src1_value @[ALU.scala 71:25]
    Div.io.divisor <= io.src2_value @[ALU.scala 72:24]
    node _T_1 = and(div_valid, io.src_valid) @[ALU.scala 73:39]
    Div.io.div_valid <= _T_1 @[ALU.scala 73:26]
    Div.io.divw <= div_w @[ALU.scala 74:21]
    Div.io.div_signed <= div_signed @[ALU.scala 75:27]
    Div.io.flush <= UInt<1>("h0") @[ALU.scala 76:22]
    Div.io.out_ready <= io.res_ready @[ALU.scala 77:26]
    node _add_res_T = add(io.src1_value, io.src2_value) @[ALU.scala 80:30]
    node add_res = tail(_add_res_T, 1) @[ALU.scala 80:30]
    node _sub_res_T = sub(io.src1_value, io.src2_value) @[ALU.scala 81:30]
    node sub_res = tail(_sub_res_T, 1) @[ALU.scala 81:30]
    node _sra_res_T = asSInt(io.src1_value) @[ALU.scala 82:37]
    node _sra_res_T_1 = bits(io.src2_value, 5, 0) @[ALU.scala 82:53]
    node _sra_res_T_2 = dshr(_sra_res_T, _sra_res_T_1) @[ALU.scala 82:40]
    node sra_res = asUInt(_sra_res_T_2) @[ALU.scala 82:60]
    node _srl_res_T = bits(io.src2_value, 5, 0) @[ALU.scala 83:43]
    node srl_res = dshr(io.src1_value, _srl_res_T) @[ALU.scala 83:30]
    node _sll_res_T = bits(io.src2_value, 5, 0) @[ALU.scala 84:43]
    node sll_res = dshl(io.src1_value, _sll_res_T) @[ALU.scala 84:30]
    node _sraw_res_T = bits(io.src1_value, 31, 0) @[ALU.scala 85:30]
    node _sraw_res_T_1 = asSInt(_sraw_res_T) @[ALU.scala 85:43]
    node _sraw_res_T_2 = bits(io.src2_value, 4, 0) @[ALU.scala 85:59]
    node sraw_res = dshr(_sraw_res_T_1, _sraw_res_T_2) @[ALU.scala 85:46]
    node _srlw_res_T = bits(io.src1_value, 31, 0) @[ALU.scala 86:30]
    node _srlw_res_T_1 = bits(io.src2_value, 4, 0) @[ALU.scala 86:50]
    node srlw_res = dshr(_srlw_res_T, _srlw_res_T_1) @[ALU.scala 86:37]
    node _sllw_res_T = bits(io.src1_value, 31, 0) @[ALU.scala 87:30]
    node _sllw_res_T_1 = bits(io.src2_value, 4, 0) @[ALU.scala 87:50]
    node sllw_res = dshl(_sllw_res_T, _sllw_res_T_1) @[ALU.scala 87:37]
    node or_res = or(io.src1_value, io.src2_value) @[ALU.scala 88:29]
    node xor_res = xor(io.src1_value, io.src2_value) @[ALU.scala 89:30]
    node and_res = and(io.src1_value, io.src2_value) @[ALU.scala 90:30]
    node mlu_res = cat(Mul.io.result_hi, Mul.io.result_lo) @[Cat.scala 31:58]
    node divw_res = bits(Div.io.quotient, 31, 0) @[ALU.scala 93:39]
    node divuw_res = bits(Div.io.quotient, 31, 0) @[ALU.scala 94:40]
    node remw_res = bits(Div.io.remainder, 31, 0) @[ALU.scala 95:40]
    node remuw_res = bits(Div.io.remainder, 31, 0) @[ALU.scala 96:41]
    node _alu_res_T = add(io.src1_value, UInt<3>("h4")) @[ALU.scala 118:29]
    node _alu_res_T_1 = tail(_alu_res_T, 1) @[ALU.scala 118:29]
    node _alu_res_T_2 = add(io.src1_value, UInt<3>("h4")) @[ALU.scala 119:30]
    node _alu_res_T_3 = tail(_alu_res_T_2, 1) @[ALU.scala 119:30]
    node _alu_res_T_4 = lt(io.src1_value, io.src2_value) @[ALU.scala 121:33]
    node _alu_res_T_5 = mux(_alu_res_T_4, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 121:22]
    node _alu_res_T_6 = asSInt(io.src1_value) @[ALU.scala 123:39]
    node _alu_res_T_7 = asSInt(io.src2_value) @[ALU.scala 123:59]
    node _alu_res_T_8 = lt(_alu_res_T_6, _alu_res_T_7) @[ALU.scala 123:41]
    node _alu_res_T_9 = mux(_alu_res_T_8, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 123:21]
    node _alu_res_T_10 = bits(add_res, 31, 31) @[ALU.scala 124:39]
    node _alu_res_T_11 = bits(_alu_res_T_10, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_12 = mux(_alu_res_T_11, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_13 = bits(add_res, 31, 0) @[ALU.scala 124:53]
    node _alu_res_T_14 = cat(_alu_res_T_12, _alu_res_T_13) @[Cat.scala 31:58]
    node _alu_res_T_15 = bits(sub_res, 31, 31) @[ALU.scala 135:39]
    node _alu_res_T_16 = bits(_alu_res_T_15, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_17 = mux(_alu_res_T_16, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_18 = bits(sub_res, 31, 0) @[ALU.scala 135:53]
    node _alu_res_T_19 = cat(_alu_res_T_17, _alu_res_T_18) @[Cat.scala 31:58]
    node _alu_res_T_20 = bits(sllw_res, 31, 31) @[ALU.scala 136:40]
    node _alu_res_T_21 = bits(_alu_res_T_20, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_22 = mux(_alu_res_T_21, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_23 = bits(sllw_res, 31, 0) @[ALU.scala 136:55]
    node _alu_res_T_24 = cat(_alu_res_T_22, _alu_res_T_23) @[Cat.scala 31:58]
    node _alu_res_T_25 = bits(sraw_res, 31, 31) @[ALU.scala 142:40]
    node _alu_res_T_26 = bits(_alu_res_T_25, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_27 = mux(_alu_res_T_26, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_28 = bits(sraw_res, 31, 0) @[ALU.scala 142:55]
    node _alu_res_T_29 = cat(_alu_res_T_27, _alu_res_T_28) @[Cat.scala 31:58]
    node _alu_res_T_30 = bits(srlw_res, 31, 31) @[ALU.scala 143:40]
    node _alu_res_T_31 = bits(_alu_res_T_30, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_32 = mux(_alu_res_T_31, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_33 = bits(srlw_res, 31, 0) @[ALU.scala 143:55]
    node _alu_res_T_34 = cat(_alu_res_T_32, _alu_res_T_33) @[Cat.scala 31:58]
    node _alu_res_T_35 = bits(Mul.io.result_lo, 31, 31) @[ALU.scala 145:40]
    node _alu_res_T_36 = bits(_alu_res_T_35, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_37 = mux(_alu_res_T_36, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_38 = cat(_alu_res_T_37, Mul.io.result_lo) @[Cat.scala 31:58]
    node _alu_res_T_39 = bits(divw_res, 31, 31) @[ALU.scala 146:40]
    node _alu_res_T_40 = bits(_alu_res_T_39, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_41 = mux(_alu_res_T_40, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_42 = cat(_alu_res_T_41, divw_res) @[Cat.scala 31:58]
    node _alu_res_T_43 = bits(divuw_res, 31, 31) @[ALU.scala 149:42]
    node _alu_res_T_44 = bits(_alu_res_T_43, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_45 = mux(_alu_res_T_44, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_46 = cat(_alu_res_T_45, divuw_res) @[Cat.scala 31:58]
    node _alu_res_T_47 = bits(remw_res, 31, 31) @[ALU.scala 150:40]
    node _alu_res_T_48 = bits(_alu_res_T_47, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_49 = mux(_alu_res_T_48, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_50 = cat(_alu_res_T_49, remw_res) @[Cat.scala 31:58]
    node _alu_res_T_51 = bits(remuw_res, 31, 31) @[ALU.scala 151:42]
    node _alu_res_T_52 = bits(_alu_res_T_51, 0, 0) @[Bitwise.scala 74:15]
    node _alu_res_T_53 = mux(_alu_res_T_52, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _alu_res_T_54 = cat(_alu_res_T_53, remuw_res) @[Cat.scala 31:58]
    node _alu_res_T_55 = eq(UInt<4>("hf"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_56 = mux(_alu_res_T_55, add_res, UInt<1>("h0")) @[Mux.scala 81:58]
    node _alu_res_T_57 = eq(UInt<3>("h4"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_58 = mux(_alu_res_T_57, io.src2_value, _alu_res_T_56) @[Mux.scala 81:58]
    node _alu_res_T_59 = eq(UInt<3>("h5"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_60 = mux(_alu_res_T_59, _alu_res_T_1, _alu_res_T_58) @[Mux.scala 81:58]
    node _alu_res_T_61 = eq(UInt<3>("h6"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_62 = mux(_alu_res_T_61, _alu_res_T_3, _alu_res_T_60) @[Mux.scala 81:58]
    node _alu_res_T_63 = eq(UInt<5>("h1e"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_64 = mux(_alu_res_T_63, _alu_res_T_5, _alu_res_T_62) @[Mux.scala 81:58]
    node _alu_res_T_65 = eq(UInt<5>("h1f"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_66 = mux(_alu_res_T_65, _alu_res_T_9, _alu_res_T_64) @[Mux.scala 81:58]
    node _alu_res_T_67 = eq(UInt<4>("hc"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_68 = mux(_alu_res_T_67, _alu_res_T_14, _alu_res_T_66) @[Mux.scala 81:58]
    node _alu_res_T_69 = eq(UInt<4>("he"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_70 = mux(_alu_res_T_69, sub_res, _alu_res_T_68) @[Mux.scala 81:58]
    node _alu_res_T_71 = eq(UInt<5>("h15"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_72 = mux(_alu_res_T_71, sra_res, _alu_res_T_70) @[Mux.scala 81:58]
    node _alu_res_T_73 = eq(UInt<4>("hb"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_74 = mux(_alu_res_T_73, or_res, _alu_res_T_72) @[Mux.scala 81:58]
    node _alu_res_T_75 = eq(UInt<6>("h2e"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_76 = mux(_alu_res_T_75, xor_res, _alu_res_T_74) @[Mux.scala 81:58]
    node _alu_res_T_77 = eq(UInt<4>("h8"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_78 = mux(_alu_res_T_77, and_res, _alu_res_T_76) @[Mux.scala 81:58]
    node _alu_res_T_79 = eq(UInt<4>("hd"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_80 = mux(_alu_res_T_79, _alu_res_T_19, _alu_res_T_78) @[Mux.scala 81:58]
    node _alu_res_T_81 = eq(UInt<5>("h16"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_82 = mux(_alu_res_T_81, _alu_res_T_24, _alu_res_T_80) @[Mux.scala 81:58]
    node _alu_res_T_83 = eq(UInt<5>("h1c"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_84 = mux(_alu_res_T_83, _alu_res_T_29, _alu_res_T_82) @[Mux.scala 81:58]
    node _alu_res_T_85 = eq(UInt<5>("h1d"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_86 = mux(_alu_res_T_85, _alu_res_T_34, _alu_res_T_84) @[Mux.scala 81:58]
    node _alu_res_T_87 = eq(UInt<5>("h11"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_88 = mux(_alu_res_T_87, mlu_res, _alu_res_T_86) @[Mux.scala 81:58]
    node _alu_res_T_89 = eq(UInt<5>("h12"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_90 = mux(_alu_res_T_89, _alu_res_T_38, _alu_res_T_88) @[Mux.scala 81:58]
    node _alu_res_T_91 = eq(UInt<5>("h13"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_92 = mux(_alu_res_T_91, _alu_res_T_42, _alu_res_T_90) @[Mux.scala 81:58]
    node _alu_res_T_93 = eq(UInt<6>("h30"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_94 = mux(_alu_res_T_93, Div.io.quotient, _alu_res_T_92) @[Mux.scala 81:58]
    node _alu_res_T_95 = eq(UInt<6>("h31"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_96 = mux(_alu_res_T_95, Div.io.quotient, _alu_res_T_94) @[Mux.scala 81:58]
    node _alu_res_T_97 = eq(UInt<6>("h35"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_98 = mux(_alu_res_T_97, _alu_res_T_46, _alu_res_T_96) @[Mux.scala 81:58]
    node _alu_res_T_99 = eq(UInt<5>("h14"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_100 = mux(_alu_res_T_99, _alu_res_T_50, _alu_res_T_98) @[Mux.scala 81:58]
    node _alu_res_T_101 = eq(UInt<6>("h32"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_102 = mux(_alu_res_T_101, _alu_res_T_54, _alu_res_T_100) @[Mux.scala 81:58]
    node _alu_res_T_103 = eq(UInt<6>("h33"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_104 = mux(_alu_res_T_103, Div.io.remainder, _alu_res_T_102) @[Mux.scala 81:58]
    node _alu_res_T_105 = eq(UInt<6>("h34"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_106 = mux(_alu_res_T_105, Div.io.remainder, _alu_res_T_104) @[Mux.scala 81:58]
    node _alu_res_T_107 = eq(UInt<6>("h37"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_108 = mux(_alu_res_T_107, sll_res, _alu_res_T_106) @[Mux.scala 81:58]
    node _alu_res_T_109 = eq(UInt<6>("h39"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_110 = mux(_alu_res_T_109, sra_res, _alu_res_T_108) @[Mux.scala 81:58]
    node _alu_res_T_111 = eq(UInt<6>("h38"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_112 = mux(_alu_res_T_111, srl_res, _alu_res_T_110) @[Mux.scala 81:58]
    node _alu_res_T_113 = eq(UInt<6>("h3f"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_114 = mux(_alu_res_T_113, io.src1_value, _alu_res_T_112) @[Mux.scala 81:58]
    node _alu_res_T_115 = eq(UInt<7>("h46"), io.ALUop) @[Mux.scala 81:61]
    node _alu_res_T_116 = mux(_alu_res_T_115, io.src1_value, _alu_res_T_114) @[Mux.scala 81:58]
    node _alu_res_T_117 = eq(UInt<7>("h47"), io.ALUop) @[Mux.scala 81:61]
    node alu_res = mux(_alu_res_T_117, io.src1_value, _alu_res_T_116) @[Mux.scala 81:58]
    io.src_ready <= UInt<1>("h1") @[ALU.scala 162:18]
    node _io_res_valid_T = mux(div_valid, Div.io.out_valid, UInt<1>("h1")) @[ALU.scala 163:59]
    node _io_res_valid_T_1 = mux(mul_valid, Mul.io.out_valid, _io_res_valid_T) @[ALU.scala 163:24]
    io.res_valid <= _io_res_valid_T_1 @[ALU.scala 163:18]
    node _io_alu_busy_T = eq(Mul.io.out_valid, UInt<1>("h0")) @[ALU.scala 164:34]
    node _io_alu_busy_T_1 = eq(Div.io.out_valid, UInt<1>("h0")) @[ALU.scala 164:70]
    node _io_alu_busy_T_2 = mux(div_valid, _io_alu_busy_T_1, UInt<1>("h0")) @[ALU.scala 164:59]
    node _io_alu_busy_T_3 = mux(mul_valid, _io_alu_busy_T, _io_alu_busy_T_2) @[ALU.scala 164:23]
    io.alu_busy <= _io_alu_busy_T_3 @[ALU.scala 164:17]
    io.alu_res <= alu_res @[ALU.scala 165:16]

  module EXU :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<64>, flip ds_to_es_valid : UInt<1>, flip ms_allowin : UInt<1>, es_allowin : UInt<1>, flip ALUop : UInt<32>, flip src1_value : UInt<64>, flip src2_value : UInt<64>, flip rf_dst : UInt<5>, flip store_data : UInt<64>, es_to_ms_valid : UInt<1>, flip load_type : UInt<3>, to_ms_pc : UInt<64>, to_ms_alures : UInt<64>, to_ms_store_data : UInt<64>, to_ms_wen : UInt<1>, to_ms_wstrb : UInt<8>, to_ms_ren : UInt<1>, to_ms_maddr : UInt<64>, to_ms_rf_dst : UInt<5>, to_ms_rf_we : UInt<1>, to_ms_load_type : UInt<3>, ctrl_sign : { flip reg_write : UInt<1>, flip csr_write : UInt<1>, flip Writemem_en : UInt<1>, flip Readmem_en : UInt<1>, flip Wmask : UInt<8>}, es_valid : UInt<1>, es_rf_we : UInt<1>, es_rf_dst : UInt<5>, es_fwd_ready : UInt<1>, es_fwd_res : UInt<64>, es_ld : UInt<1>}

    inst ALU of ALU @[EXU.scala 40:21]
    ALU.clock <= clock
    ALU.reset <= reset
    reg es_pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[EXU.scala 42:24]
    reg es_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 43:27]
    wire es_to_ms_valid : UInt<1> @[EXU.scala 44:30]
    wire es_ready_go : UInt<1> @[EXU.scala 45:27]
    wire es_allowin : UInt<1> @[EXU.scala 46:26]
    reg es_rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[EXU.scala 47:24]
    reg es_rf_we : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 48:27]
    reg es_sel_rf_res : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 49:32]
    reg src1_value : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[EXU.scala 50:29]
    reg src2_value : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[EXU.scala 51:29]
    reg store_data : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[EXU.scala 52:29]
    reg st_wstrb : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[EXU.scala 53:27]
    reg st_we : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 54:24]
    reg ld_we : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 55:24]
    wire alu_res : UInt<64> @[EXU.scala 56:23]
    reg ALUop : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[EXU.scala 57:24]
    reg load_type : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[EXU.scala 58:28]
    when es_allowin : @[EXU.scala 60:21]
      es_valid <= io.ds_to_es_valid @[EXU.scala 61:18]
    node _T = and(io.ds_to_es_valid, es_allowin) @[EXU.scala 63:28]
    when _T : @[EXU.scala 63:42]
      es_pc <= io.pc @[EXU.scala 64:15]
      es_rf_we <= io.ctrl_sign.reg_write @[EXU.scala 65:18]
      es_sel_rf_res <= io.ctrl_sign.Readmem_en @[EXU.scala 66:23]
      src1_value <= io.src1_value @[EXU.scala 67:20]
      src2_value <= io.src2_value @[EXU.scala 68:20]
      es_rd <= io.rf_dst @[EXU.scala 69:15]
      store_data <= io.store_data @[EXU.scala 70:20]
      st_wstrb <= io.ctrl_sign.Wmask @[EXU.scala 71:18]
      st_we <= io.ctrl_sign.Writemem_en @[EXU.scala 72:15]
      ld_we <= io.ctrl_sign.Readmem_en @[EXU.scala 73:15]
      ALUop <= io.ALUop @[EXU.scala 74:15]
      load_type <= io.load_type @[EXU.scala 75:19]
    node _es_ready_go_T = not(ALU.io.alu_busy) @[EXU.scala 78:20]
    es_ready_go <= _es_ready_go_T @[EXU.scala 78:17]
    node _es_to_ms_valid_T = and(es_valid, es_ready_go) @[EXU.scala 79:32]
    es_to_ms_valid <= _es_to_ms_valid_T @[EXU.scala 79:20]
    node _es_allowin_T = eq(es_valid, UInt<1>("h0")) @[EXU.scala 80:19]
    node _es_allowin_T_1 = and(es_ready_go, io.ms_allowin) @[EXU.scala 80:44]
    node _es_allowin_T_2 = or(_es_allowin_T, _es_allowin_T_1) @[EXU.scala 80:29]
    es_allowin <= _es_allowin_T_2 @[EXU.scala 80:16]
    node _T_1 = eq(ALUop, UInt<3>("h6")) @[EXU.scala 94:32]
    node _T_2 = mux(_T_1, es_pc, src1_value) @[EXU.scala 94:26]
    ALU.io.src1_value <= _T_2 @[EXU.scala 94:20]
    ALU.io.src2_value <= src2_value @[EXU.scala 95:20]
    ALU.io.ALUop <= ALUop @[EXU.scala 96:15]
    ALU.io.src_valid <= es_valid @[EXU.scala 97:19]
    alu_res <= ALU.io.alu_res @[EXU.scala 98:13]
    ALU.io.res_ready <= io.ms_allowin @[EXU.scala 99:19]
    io.es_allowin <= es_allowin @[EXU.scala 111:19]
    io.to_ms_pc <= es_pc @[EXU.scala 112:17]
    io.es_to_ms_valid <= es_to_ms_valid @[EXU.scala 113:23]
    io.to_ms_alures <= alu_res @[EXU.scala 114:21]
    io.to_ms_store_data <= store_data @[EXU.scala 115:25]
    io.to_ms_wen <= st_we @[EXU.scala 116:18]
    io.to_ms_wstrb <= st_wstrb @[EXU.scala 117:20]
    io.to_ms_ren <= ld_we @[EXU.scala 118:18]
    io.to_ms_maddr <= alu_res @[EXU.scala 119:20]
    io.to_ms_rf_dst <= es_rd @[EXU.scala 120:21]
    io.to_ms_rf_we <= es_rf_we @[EXU.scala 121:20]
    io.es_valid <= es_valid @[EXU.scala 122:17]
    io.es_rf_dst <= es_rd @[EXU.scala 123:18]
    io.es_rf_we <= es_rf_we @[EXU.scala 124:17]
    io.to_ms_load_type <= load_type @[EXU.scala 125:24]
    io.es_fwd_res <= alu_res @[EXU.scala 126:19]
    io.es_fwd_ready <= es_to_ms_valid @[EXU.scala 127:21]
    node _io_es_ld_T = and(ld_we, es_valid) @[EXU.scala 128:23]
    io.es_ld <= _io_es_ld_T @[EXU.scala 128:14]

  module LSU :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<64>, flip es_to_ms_valid : UInt<1>, flip ws_allowin : UInt<1>, ms_allowin : UInt<1>, flip rf_we : UInt<1>, flip rf_dst : UInt<5>, flip alu_res : UInt<64>, flip store_data : UInt<64>, flip load_type : UInt<3>, flip wen : UInt<1>, flip wstrb : UInt<8>, flip ren : UInt<1>, flip maddr : UInt<64>, to_ws_pc : UInt<64>, ms_final_res : UInt<64>, ms_to_ws_valid : UInt<1>, to_ws_rf_we : UInt<1>, to_ws_rf_dst : UInt<5>, to_ws_device : UInt<1>, ms_valid : UInt<1>, ms_rf_we : UInt<1>, ms_rf_dst : UInt<5>, ms_fwd_ready : UInt<1>, ms_fwd_res : UInt<64>, ms_pc : UInt<64>, flip axi_in : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, axi_out : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}}

    reg ms_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[LSU.scala 37:27]
    reg ms_pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[LSU.scala 38:24]
    wire ms_to_ws_valid : UInt<1> @[LSU.scala 39:30]
    wire ms_ready_go : UInt<1> @[LSU.scala 40:27]
    wire ms_allowin : UInt<1> @[LSU.scala 41:26]
    reg ms_rf_we : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[LSU.scala 42:27]
    reg ms_rf_dst : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[LSU.scala 43:28]
    reg ms_res : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[LSU.scala 44:25]
    reg store_data : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[LSU.scala 46:29]
    reg wen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[LSU.scala 47:22]
    reg wstrb : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[LSU.scala 48:24]
    reg ren : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[LSU.scala 49:22]
    reg maddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[LSU.scala 50:24]
    reg load_type : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[LSU.scala 51:28]
    when ms_allowin : @[LSU.scala 54:21]
      ms_valid <= io.es_to_ms_valid @[LSU.scala 55:18]
    node _T = and(io.es_to_ms_valid, ms_allowin) @[LSU.scala 57:27]
    when _T : @[LSU.scala 57:40]
      ms_pc <= io.pc @[LSU.scala 58:15]
      ms_rf_we <= io.rf_we @[LSU.scala 59:18]
      ms_rf_dst <= io.rf_dst @[LSU.scala 60:19]
      ms_res <= io.alu_res @[LSU.scala 61:16]
      store_data <= io.store_data @[LSU.scala 62:20]
      wen <= io.wen @[LSU.scala 63:13]
      wstrb <= io.wstrb @[LSU.scala 64:15]
      ren <= io.ren @[LSU.scala 65:13]
      maddr <= io.maddr @[LSU.scala 66:15]
      load_type <= io.load_type @[LSU.scala 67:19]
      node _ms_ready_go_T = or(io.wen, io.ren) @[LSU.scala 68:33]
      node _ms_ready_go_T_1 = not(_ms_ready_go_T) @[LSU.scala 68:24]
      ms_ready_go <= _ms_ready_go_T_1 @[LSU.scala 68:21]
    node _ms_ready_go_T_2 = and(wen, io.axi_in.bvalid) @[LSU.scala 71:25]
    node _ms_ready_go_T_3 = and(ren, io.axi_in.rvalid) @[LSU.scala 71:54]
    node _ms_ready_go_T_4 = or(_ms_ready_go_T_2, _ms_ready_go_T_3) @[LSU.scala 71:46]
    node _ms_ready_go_T_5 = or(wen, ren) @[LSU.scala 71:84]
    node _ms_ready_go_T_6 = eq(_ms_ready_go_T_5, UInt<1>("h0")) @[LSU.scala 71:78]
    node _ms_ready_go_T_7 = or(_ms_ready_go_T_4, _ms_ready_go_T_6) @[LSU.scala 71:75]
    ms_ready_go <= _ms_ready_go_T_7 @[LSU.scala 71:17]
    node _ms_allowin_T = eq(ms_valid, UInt<1>("h0")) @[LSU.scala 72:19]
    node _ms_allowin_T_1 = and(ms_ready_go, io.ws_allowin) @[LSU.scala 72:44]
    node _ms_allowin_T_2 = or(_ms_allowin_T, _ms_allowin_T_1) @[LSU.scala 72:29]
    ms_allowin <= _ms_allowin_T_2 @[LSU.scala 72:16]
    node _ms_to_ws_valid_T = and(ms_valid, ms_ready_go) @[LSU.scala 73:32]
    ms_to_ws_valid <= _ms_to_ws_valid_T @[LSU.scala 73:20]
    wire mem_rdata : UInt<64> @[LSU.scala 76:25]
    mem_rdata <= io.axi_in.rdata @[LSU.scala 77:15]
    io.axi_out.araddr <= maddr @[LSU.scala 89:23]
    node _io_axi_out_arvalid_T = and(ren, ms_valid) @[LSU.scala 90:31]
    io.axi_out.arvalid <= _io_axi_out_arvalid_T @[LSU.scala 90:24]
    io.axi_out.arlen <= UInt<1>("h0") @[LSU.scala 91:22]
    io.axi_out.arsize <= UInt<3>("h6") @[LSU.scala 92:23]
    io.axi_out.arburst <= UInt<1>("h0") @[LSU.scala 93:24]
    io.axi_out.rready <= io.ws_allowin @[LSU.scala 94:23]
    io.axi_out.awaddr <= maddr @[LSU.scala 95:23]
    node _io_axi_out_awvalid_T = and(wen, ms_valid) @[LSU.scala 96:31]
    io.axi_out.awvalid <= _io_axi_out_awvalid_T @[LSU.scala 96:24]
    io.axi_out.awlen <= UInt<1>("h0") @[LSU.scala 97:22]
    io.axi_out.awsize <= UInt<3>("h6") @[LSU.scala 98:23]
    io.axi_out.awburst <= UInt<1>("h0") @[LSU.scala 99:24]
    io.axi_out.wdata <= store_data @[LSU.scala 100:22]
    io.axi_out.wstrb <= wstrb @[LSU.scala 101:22]
    io.axi_out.wlast <= UInt<1>("h1") @[LSU.scala 102:22]
    io.axi_out.wvalid <= wen @[LSU.scala 103:23]
    io.axi_out.bready <= io.ws_allowin @[LSU.scala 104:23]
    node _rdata_T = bits(mem_rdata, 31, 31) @[LSU.scala 108:39]
    node _rdata_T_1 = bits(_rdata_T, 0, 0) @[Bitwise.scala 74:15]
    node _rdata_T_2 = mux(_rdata_T_1, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_3 = bits(mem_rdata, 31, 0) @[LSU.scala 108:55]
    node _rdata_T_4 = cat(_rdata_T_2, _rdata_T_3) @[Cat.scala 31:58]
    node _rdata_T_5 = mux(UInt<1>("h0"), UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_6 = bits(mem_rdata, 7, 0) @[LSU.scala 110:45]
    node _rdata_T_7 = cat(_rdata_T_5, _rdata_T_6) @[Cat.scala 31:58]
    node _rdata_T_8 = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_9 = bits(mem_rdata, 31, 0) @[LSU.scala 111:45]
    node _rdata_T_10 = cat(_rdata_T_8, _rdata_T_9) @[Cat.scala 31:58]
    node _rdata_T_11 = bits(mem_rdata, 15, 15) @[LSU.scala 112:39]
    node _rdata_T_12 = bits(_rdata_T_11, 0, 0) @[Bitwise.scala 74:15]
    node _rdata_T_13 = mux(_rdata_T_12, UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_14 = bits(mem_rdata, 15, 0) @[LSU.scala 112:55]
    node _rdata_T_15 = cat(_rdata_T_13, _rdata_T_14) @[Cat.scala 31:58]
    node _rdata_T_16 = bits(mem_rdata, 7, 7) @[LSU.scala 113:39]
    node _rdata_T_17 = bits(_rdata_T_16, 0, 0) @[Bitwise.scala 74:15]
    node _rdata_T_18 = mux(_rdata_T_17, UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_19 = bits(mem_rdata, 7, 0) @[LSU.scala 113:54]
    node _rdata_T_20 = cat(_rdata_T_18, _rdata_T_19) @[Cat.scala 31:58]
    node _rdata_T_21 = mux(UInt<1>("h0"), UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 74:12]
    node _rdata_T_22 = bits(mem_rdata, 15, 0) @[LSU.scala 114:45]
    node _rdata_T_23 = cat(_rdata_T_21, _rdata_T_22) @[Cat.scala 31:58]
    node _rdata_T_24 = eq(UInt<1>("h1"), load_type) @[Mux.scala 81:61]
    node _rdata_T_25 = mux(_rdata_T_24, _rdata_T_4, mem_rdata) @[Mux.scala 81:58]
    node _rdata_T_26 = eq(UInt<2>("h2"), load_type) @[Mux.scala 81:61]
    node _rdata_T_27 = mux(_rdata_T_26, mem_rdata, _rdata_T_25) @[Mux.scala 81:58]
    node _rdata_T_28 = eq(UInt<2>("h3"), load_type) @[Mux.scala 81:61]
    node _rdata_T_29 = mux(_rdata_T_28, _rdata_T_7, _rdata_T_27) @[Mux.scala 81:58]
    node _rdata_T_30 = eq(UInt<3>("h4"), load_type) @[Mux.scala 81:61]
    node _rdata_T_31 = mux(_rdata_T_30, _rdata_T_10, _rdata_T_29) @[Mux.scala 81:58]
    node _rdata_T_32 = eq(UInt<3>("h5"), load_type) @[Mux.scala 81:61]
    node _rdata_T_33 = mux(_rdata_T_32, _rdata_T_15, _rdata_T_31) @[Mux.scala 81:58]
    node _rdata_T_34 = eq(UInt<3>("h6"), load_type) @[Mux.scala 81:61]
    node _rdata_T_35 = mux(_rdata_T_34, _rdata_T_20, _rdata_T_33) @[Mux.scala 81:58]
    node _rdata_T_36 = eq(UInt<3>("h7"), load_type) @[Mux.scala 81:61]
    node rdata = mux(_rdata_T_36, _rdata_T_23, _rdata_T_35) @[Mux.scala 81:58]
    node _io_ms_final_res_T = neq(load_type, UInt<1>("h0")) @[LSU.scala 116:37]
    node _io_ms_final_res_T_1 = mux(_io_ms_final_res_T, rdata, ms_res) @[LSU.scala 116:27]
    io.ms_final_res <= _io_ms_final_res_T_1 @[LSU.scala 116:21]
    io.ms_to_ws_valid <= ms_to_ws_valid @[LSU.scala 117:23]
    io.to_ws_rf_dst <= ms_rf_dst @[LSU.scala 118:21]
    io.to_ws_rf_we <= ms_rf_we @[LSU.scala 119:20]
    io.to_ws_pc <= ms_pc @[LSU.scala 120:17]
    node _io_to_ws_device_T = geq(maddr, UInt<32>("ha0000000")) @[LSU.scala 121:32]
    node _io_to_ws_device_T_1 = or(ren, wen) @[LSU.scala 121:58]
    node _io_to_ws_device_T_2 = and(_io_to_ws_device_T, _io_to_ws_device_T_1) @[LSU.scala 121:50]
    io.to_ws_device <= _io_to_ws_device_T_2 @[LSU.scala 121:21]
    io.ms_allowin <= ms_allowin @[LSU.scala 122:19]
    io.ms_valid <= ms_valid @[LSU.scala 123:17]
    io.ms_rf_dst <= ms_rf_dst @[LSU.scala 124:18]
    node _io_ms_rf_we_T = and(ms_rf_we, ms_valid) @[LSU.scala 125:28]
    io.ms_rf_we <= _io_ms_rf_we_T @[LSU.scala 125:17]
    io.ms_pc <= ms_pc @[LSU.scala 126:14]
    io.ms_fwd_ready <= ms_to_ws_valid @[LSU.scala 127:21]
    node _io_ms_fwd_res_T = neq(load_type, UInt<1>("h0")) @[LSU.scala 128:35]
    node _io_ms_fwd_res_T_1 = mux(_io_ms_fwd_res_T, rdata, ms_res) @[LSU.scala 128:25]
    io.ms_fwd_res <= _io_ms_fwd_res_T_1 @[LSU.scala 128:19]

  module WBU :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<64>, flip ms_to_ws_valid : UInt<1>, ws_allowin : UInt<1>, flip ms_final_res : UInt<64>, flip rf_we : UInt<1>, flip rf_dst : UInt<5>, we : UInt<1>, waddr : UInt<5>, wdata : UInt<64>, ws_valid : UInt<1>, ws_rf_we : UInt<1>, ws_rf_dst : UInt<5>, ws_fwd_ready : UInt<1>, ws_fwd_res : UInt<64>, ws_pc : UInt<64>, flip device_access : UInt<1>, skip : UInt<1>}

    reg ws_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WBU.scala 28:27]
    reg ws_pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[WBU.scala 29:24]
    wire ws_ready_go : UInt<1> @[WBU.scala 31:27]
    wire ws_allowin : UInt<1> @[WBU.scala 32:26]
    reg ws_rf_we : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WBU.scala 33:27]
    reg ws_rf_dst : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[WBU.scala 34:28]
    reg ws_res : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[WBU.scala 35:25]
    reg device_access : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WBU.scala 36:32]
    when ws_allowin : @[WBU.scala 44:21]
      ws_valid <= io.ms_to_ws_valid @[WBU.scala 45:18]
    node _T = and(io.ms_to_ws_valid, ws_allowin) @[WBU.scala 47:27]
    when _T : @[WBU.scala 47:40]
      ws_pc <= io.pc @[WBU.scala 48:15]
      ws_rf_we <= io.rf_we @[WBU.scala 49:18]
      ws_rf_dst <= io.rf_dst @[WBU.scala 50:19]
      ws_res <= io.ms_final_res @[WBU.scala 51:16]
      device_access <= io.device_access @[WBU.scala 52:23]
    ws_ready_go <= UInt<1>("h1") @[WBU.scala 60:17]
    node _ws_allowin_T = eq(ws_valid, UInt<1>("h0")) @[WBU.scala 61:19]
    node _ws_allowin_T_1 = or(_ws_allowin_T, ws_ready_go) @[WBU.scala 61:29]
    ws_allowin <= _ws_allowin_T_1 @[WBU.scala 61:16]
    io.ws_allowin <= ws_allowin @[WBU.scala 65:19]
    node _io_we_T = and(ws_rf_we, ws_valid) @[WBU.scala 66:22]
    io.we <= _io_we_T @[WBU.scala 66:11]
    io.waddr <= ws_rf_dst @[WBU.scala 67:14]
    io.wdata <= ws_res @[WBU.scala 68:14]
    io.ws_valid <= ws_valid @[WBU.scala 69:17]
    io.ws_rf_dst <= ws_rf_dst @[WBU.scala 70:18]
    io.ws_rf_we <= ws_rf_we @[WBU.scala 71:17]
    io.ws_fwd_ready <= UInt<1>("h1") @[WBU.scala 72:21]
    io.ws_fwd_res <= ws_res @[WBU.scala 73:19]
    io.ws_pc <= ws_pc @[WBU.scala 74:14]
    node _io_skip_T = and(device_access, ws_valid) @[WBU.scala 75:30]
    io.skip <= _io_skip_T @[WBU.scala 75:13]

  module AXI_ARBITER :
    input clock : Clock
    input reset : Reset
    output io : { flip ifu_axi_in : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, ifu_axi_out : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, flip lsu_axi_in : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, lsu_axi_out : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, flip axi_in : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, axi_out : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[axi_arbiter.scala 18:24]
    wire init_master_in : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>} @[axi_arbiter.scala 20:30]
    wire init_master_out : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>} @[axi_arbiter.scala 21:31]
    init_master_in.arready <= UInt<1>("h0") @[axi_arbiter.scala 22:28]
    init_master_in.rdata <= UInt<1>("h0") @[axi_arbiter.scala 23:26]
    init_master_in.rvalid <= UInt<1>("h0") @[axi_arbiter.scala 24:27]
    init_master_in.rlast <= UInt<1>("h0") @[axi_arbiter.scala 25:26]
    init_master_in.awready <= UInt<1>("h0") @[axi_arbiter.scala 26:28]
    init_master_in.wready <= UInt<1>("h0") @[axi_arbiter.scala 27:27]
    init_master_in.bvalid <= UInt<1>("h0") @[axi_arbiter.scala 28:27]
    init_master_out.araddr <= UInt<1>("h0") @[axi_arbiter.scala 29:28]
    init_master_out.arvalid <= UInt<1>("h0") @[axi_arbiter.scala 30:29]
    init_master_out.arlen <= UInt<1>("h0") @[axi_arbiter.scala 31:27]
    init_master_out.arsize <= UInt<3>("h6") @[axi_arbiter.scala 32:28]
    init_master_out.arburst <= UInt<1>("h0") @[axi_arbiter.scala 33:29]
    init_master_out.rready <= UInt<1>("h0") @[axi_arbiter.scala 34:28]
    init_master_out.awaddr <= UInt<1>("h0") @[axi_arbiter.scala 35:28]
    init_master_out.awvalid <= UInt<1>("h0") @[axi_arbiter.scala 36:29]
    init_master_out.awlen <= UInt<1>("h0") @[axi_arbiter.scala 37:27]
    init_master_out.awsize <= UInt<3>("h6") @[axi_arbiter.scala 38:28]
    init_master_out.awburst <= UInt<1>("h0") @[axi_arbiter.scala 39:29]
    init_master_out.wdata <= UInt<1>("h0") @[axi_arbiter.scala 40:27]
    init_master_out.wstrb <= UInt<1>("h0") @[axi_arbiter.scala 41:27]
    init_master_out.wlast <= UInt<1>("h0") @[axi_arbiter.scala 42:27]
    init_master_out.wvalid <= UInt<1>("h0") @[axi_arbiter.scala 43:28]
    init_master_out.bready <= UInt<1>("h0") @[axi_arbiter.scala 44:28]
    io.axi_out <= init_master_out @[axi_arbiter.scala 48:16]
    io.lsu_axi_out <= init_master_in @[axi_arbiter.scala 49:20]
    io.ifu_axi_out <= init_master_in @[axi_arbiter.scala 50:20]
    node _T = eq(UInt<2>("h0"), state) @[axi_arbiter.scala 51:18]
    when _T : @[axi_arbiter.scala 51:18]
      when io.lsu_axi_in.awvalid : @[axi_arbiter.scala 53:40]
        state <= UInt<2>("h3") @[axi_arbiter.scala 54:23]
        io.axi_out <= io.lsu_axi_in @[axi_arbiter.scala 55:28]
        io.lsu_axi_out <= io.axi_in @[axi_arbiter.scala 56:32]
      else :
        when io.lsu_axi_in.arvalid : @[axi_arbiter.scala 57:46]
          state <= UInt<2>("h2") @[axi_arbiter.scala 58:23]
          io.axi_out <= io.lsu_axi_in @[axi_arbiter.scala 59:28]
          io.lsu_axi_out <= io.axi_in @[axi_arbiter.scala 60:32]
        else :
          when io.ifu_axi_in.arvalid : @[axi_arbiter.scala 61:46]
            state <= UInt<2>("h1") @[axi_arbiter.scala 62:23]
            io.axi_out <= io.ifu_axi_in @[axi_arbiter.scala 63:28]
            io.ifu_axi_out <= io.axi_in @[axi_arbiter.scala 64:32]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[axi_arbiter.scala 51:18]
      when _T_1 : @[axi_arbiter.scala 51:18]
        io.axi_out <= io.ifu_axi_in @[axi_arbiter.scala 68:24]
        io.ifu_axi_out <= io.axi_in @[axi_arbiter.scala 69:28]
        node _T_2 = and(io.ifu_axi_out.rvalid, io.ifu_axi_in.rready) @[axi_arbiter.scala 70:40]
        node _T_3 = and(_T_2, io.ifu_axi_out.rlast) @[axi_arbiter.scala 70:64]
        when _T_3 : @[axi_arbiter.scala 70:88]
          state <= UInt<2>("h0") @[axi_arbiter.scala 71:23]
      else :
        node _T_4 = eq(UInt<2>("h2"), state) @[axi_arbiter.scala 51:18]
        when _T_4 : @[axi_arbiter.scala 51:18]
          io.axi_out <= io.lsu_axi_in @[axi_arbiter.scala 75:24]
          io.lsu_axi_out <= io.axi_in @[axi_arbiter.scala 76:28]
          node _T_5 = and(io.lsu_axi_out.rvalid, io.lsu_axi_in.rready) @[axi_arbiter.scala 77:40]
          node _T_6 = and(_T_5, io.lsu_axi_out.rlast) @[axi_arbiter.scala 77:64]
          when _T_6 : @[axi_arbiter.scala 77:88]
            state <= UInt<2>("h0") @[axi_arbiter.scala 78:23]
        else :
          node _T_7 = eq(UInt<2>("h3"), state) @[axi_arbiter.scala 51:18]
          when _T_7 : @[axi_arbiter.scala 51:18]
            io.axi_out <= io.lsu_axi_in @[axi_arbiter.scala 82:24]
            io.lsu_axi_out <= io.axi_in @[axi_arbiter.scala 83:28]
            node _T_8 = and(io.lsu_axi_out.bvalid, io.lsu_axi_in.bready) @[axi_arbiter.scala 84:40]
            when _T_8 : @[axi_arbiter.scala 84:64]
              state <= UInt<2>("h0") @[axi_arbiter.scala 85:23]

  module I_CACHE :
    input clock : Clock
    input reset : Reset
    output io : { flip from_ifu : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, to_ifu : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, to_axi : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, flip from_axi : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, cache_init : UInt<1>, flip clear_cache : UInt<1>}

    cmem cacheLine : UInt<128> [256] @[i_cache.scala 18:24]
    cmem validMem : UInt<1> [256] @[i_cache.scala 19:23]
    cmem tagMem : UInt<32> [256] @[i_cache.scala 22:21]
    reg addr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[i_cache.scala 37:23]
    node offset = bits(addr, 3, 0) @[i_cache.scala 38:22]
    node index = bits(addr, 9, 4) @[i_cache.scala 39:21]
    node tag = bits(addr, 31, 10) @[i_cache.scala 40:19]
    node _shift_bit_T = bits(offset, 2, 0) @[i_cache.scala 41:27]
    node shift_bit = dshl(_shift_bit_T, UInt<2>("h3")) @[i_cache.scala 41:33]
    wire valid : UInt<1>[4] @[i_cache.scala 43:21]
    node _valid_0_T = dshl(UInt<1>("h0"), UInt<3>("h6")) @[i_cache.scala 45:40]
    node _valid_0_T_1 = add(_valid_0_T, index) @[i_cache.scala 45:48]
    node _valid_0_T_2 = tail(_valid_0_T_1, 1) @[i_cache.scala 45:48]
    infer mport valid_0_MPORT = validMem[_valid_0_T_2], clock @[i_cache.scala 45:29]
    valid[0] <= valid_0_MPORT @[i_cache.scala 45:18]
    node _valid_1_T = dshl(UInt<1>("h1"), UInt<3>("h6")) @[i_cache.scala 45:40]
    node _valid_1_T_1 = add(_valid_1_T, index) @[i_cache.scala 45:48]
    node _valid_1_T_2 = tail(_valid_1_T_1, 1) @[i_cache.scala 45:48]
    infer mport valid_1_MPORT = validMem[_valid_1_T_2], clock @[i_cache.scala 45:29]
    valid[1] <= valid_1_MPORT @[i_cache.scala 45:18]
    node _valid_2_T = dshl(UInt<2>("h2"), UInt<3>("h6")) @[i_cache.scala 45:40]
    node _valid_2_T_1 = add(_valid_2_T, index) @[i_cache.scala 45:48]
    node _valid_2_T_2 = tail(_valid_2_T_1, 1) @[i_cache.scala 45:48]
    node _valid_2_T_3 = bits(_valid_2_T_2, 7, 0) @[i_cache.scala 45:29]
    infer mport valid_2_MPORT = validMem[_valid_2_T_3], clock @[i_cache.scala 45:29]
    valid[2] <= valid_2_MPORT @[i_cache.scala 45:18]
    node _valid_3_T = dshl(UInt<2>("h3"), UInt<3>("h6")) @[i_cache.scala 45:40]
    node _valid_3_T_1 = add(_valid_3_T, index) @[i_cache.scala 45:48]
    node _valid_3_T_2 = tail(_valid_3_T_1, 1) @[i_cache.scala 45:48]
    node _valid_3_T_3 = bits(_valid_3_T_2, 7, 0) @[i_cache.scala 45:29]
    infer mport valid_3_MPORT = validMem[_valid_3_T_3], clock @[i_cache.scala 45:29]
    valid[3] <= valid_3_MPORT @[i_cache.scala 45:18]
    node _allvalid_T = and(valid[0], valid[1]) @[i_cache.scala 47:35]
    node _allvalid_T_1 = and(_allvalid_T, valid[2]) @[i_cache.scala 47:35]
    node allvalid = and(_allvalid_T_1, valid[3]) @[i_cache.scala 47:35]
    node _foundUnvalidIndex_T = eq(valid[0], UInt<1>("h0")) @[i_cache.scala 49:10]
    node _foundUnvalidIndex_T_1 = eq(valid[1], UInt<1>("h0")) @[i_cache.scala 50:10]
    node _foundUnvalidIndex_T_2 = eq(valid[2], UInt<1>("h0")) @[i_cache.scala 51:10]
    node _foundUnvalidIndex_T_3 = eq(valid[3], UInt<1>("h0")) @[i_cache.scala 52:10]
    node _foundUnvalidIndex_T_4 = mux(_foundUnvalidIndex_T_3, UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _foundUnvalidIndex_T_5 = mux(_foundUnvalidIndex_T_2, UInt<2>("h2"), _foundUnvalidIndex_T_4) @[Mux.scala 101:16]
    node _foundUnvalidIndex_T_6 = mux(_foundUnvalidIndex_T_1, UInt<1>("h1"), _foundUnvalidIndex_T_5) @[Mux.scala 101:16]
    node foundUnvalidIndex = mux(_foundUnvalidIndex_T, UInt<1>("h0"), _foundUnvalidIndex_T_6) @[Mux.scala 101:16]
    node _unvalidIndex_T = dshl(foundUnvalidIndex, UInt<3>("h6")) @[i_cache.scala 54:43]
    node _unvalidIndex_T_1 = add(_unvalidIndex_T, index) @[i_cache.scala 54:51]
    node unvalidIndex = tail(_unvalidIndex_T_1, 1) @[i_cache.scala 54:51]
    wire tagMatch : UInt<1>[4] @[i_cache.scala 57:24]
    node _tagMatch_0_T = dshl(UInt<1>("h0"), UInt<3>("h6")) @[i_cache.scala 59:54]
    node _tagMatch_0_T_1 = add(_tagMatch_0_T, index) @[i_cache.scala 59:62]
    node _tagMatch_0_T_2 = tail(_tagMatch_0_T_1, 1) @[i_cache.scala 59:62]
    infer mport tagMatch_0_MPORT = tagMem[_tagMatch_0_T_2], clock @[i_cache.scala 59:43]
    node _tagMatch_0_T_3 = eq(tagMatch_0_MPORT, tag) @[i_cache.scala 59:71]
    node _tagMatch_0_T_4 = and(valid[0], _tagMatch_0_T_3) @[i_cache.scala 59:33]
    tagMatch[0] <= _tagMatch_0_T_4 @[i_cache.scala 59:21]
    node _tagMatch_1_T = dshl(UInt<1>("h1"), UInt<3>("h6")) @[i_cache.scala 59:54]
    node _tagMatch_1_T_1 = add(_tagMatch_1_T, index) @[i_cache.scala 59:62]
    node _tagMatch_1_T_2 = tail(_tagMatch_1_T_1, 1) @[i_cache.scala 59:62]
    infer mport tagMatch_1_MPORT = tagMem[_tagMatch_1_T_2], clock @[i_cache.scala 59:43]
    node _tagMatch_1_T_3 = eq(tagMatch_1_MPORT, tag) @[i_cache.scala 59:71]
    node _tagMatch_1_T_4 = and(valid[1], _tagMatch_1_T_3) @[i_cache.scala 59:33]
    tagMatch[1] <= _tagMatch_1_T_4 @[i_cache.scala 59:21]
    node _tagMatch_2_T = dshl(UInt<2>("h2"), UInt<3>("h6")) @[i_cache.scala 59:54]
    node _tagMatch_2_T_1 = add(_tagMatch_2_T, index) @[i_cache.scala 59:62]
    node _tagMatch_2_T_2 = tail(_tagMatch_2_T_1, 1) @[i_cache.scala 59:62]
    node _tagMatch_2_T_3 = bits(_tagMatch_2_T_2, 7, 0) @[i_cache.scala 59:43]
    infer mport tagMatch_2_MPORT = tagMem[_tagMatch_2_T_3], clock @[i_cache.scala 59:43]
    node _tagMatch_2_T_4 = eq(tagMatch_2_MPORT, tag) @[i_cache.scala 59:71]
    node _tagMatch_2_T_5 = and(valid[2], _tagMatch_2_T_4) @[i_cache.scala 59:33]
    tagMatch[2] <= _tagMatch_2_T_5 @[i_cache.scala 59:21]
    node _tagMatch_3_T = dshl(UInt<2>("h3"), UInt<3>("h6")) @[i_cache.scala 59:54]
    node _tagMatch_3_T_1 = add(_tagMatch_3_T, index) @[i_cache.scala 59:62]
    node _tagMatch_3_T_2 = tail(_tagMatch_3_T_1, 1) @[i_cache.scala 59:62]
    node _tagMatch_3_T_3 = bits(_tagMatch_3_T_2, 7, 0) @[i_cache.scala 59:43]
    infer mport tagMatch_3_MPORT = tagMem[_tagMatch_3_T_3], clock @[i_cache.scala 59:43]
    node _tagMatch_3_T_4 = eq(tagMatch_3_MPORT, tag) @[i_cache.scala 59:71]
    node _tagMatch_3_T_5 = and(valid[3], _tagMatch_3_T_4) @[i_cache.scala 59:33]
    tagMatch[3] <= _tagMatch_3_T_5 @[i_cache.scala 59:21]
    node _anyMatch_T = or(tagMatch[0], tagMatch[1]) @[i_cache.scala 61:38]
    node _anyMatch_T_1 = or(_anyMatch_T, tagMatch[2]) @[i_cache.scala 61:38]
    node anyMatch = or(_anyMatch_T_1, tagMatch[3]) @[i_cache.scala 61:38]
    node _foundtagIndex_T = mux(tagMatch[3], UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _foundtagIndex_T_1 = mux(tagMatch[2], UInt<2>("h2"), _foundtagIndex_T) @[Mux.scala 101:16]
    node _foundtagIndex_T_2 = mux(tagMatch[1], UInt<1>("h1"), _foundtagIndex_T_1) @[Mux.scala 101:16]
    node foundtagIndex = mux(tagMatch[0], UInt<1>("h0"), _foundtagIndex_T_2) @[Mux.scala 101:16]
    node _tagIndex_T = dshl(foundtagIndex, UInt<3>("h6")) @[i_cache.scala 68:35]
    node _tagIndex_T_1 = add(_tagIndex_T, index) @[i_cache.scala 68:43]
    node tagIndex = tail(_tagIndex_T_1, 1) @[i_cache.scala 68:43]
    wire replaceIndex : UInt<32> @[i_cache.scala 70:28]
    wire _receive_data_WIRE : UInt<64>[2] @[i_cache.scala 78:39]
    _receive_data_WIRE[0] <= UInt<64>("h0") @[i_cache.scala 78:39]
    _receive_data_WIRE[1] <= UInt<64>("h0") @[i_cache.scala 78:39]
    reg receive_data : UInt<64>[2], clock with :
      reset => (reset, _receive_data_WIRE) @[i_cache.scala 78:31]
    reg receive_num : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[i_cache.scala 79:30]
    cmem quene : UInt<8> [64] @[i_cache.scala 80:20]
    infer mport replace_way_MPORT = quene[index], clock @[i_cache.scala 82:28]
    node replace_way = bits(replace_way_MPORT, 7, 6) @[i_cache.scala 82:35]
    node _replaceIndex_T = dshl(replace_way, UInt<3>("h6")) @[i_cache.scala 83:34]
    node _replaceIndex_T_1 = add(_replaceIndex_T, index) @[i_cache.scala 83:42]
    node _replaceIndex_T_2 = tail(_replaceIndex_T_1, 1) @[i_cache.scala 83:42]
    replaceIndex <= _replaceIndex_T_2 @[i_cache.scala 83:18]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[i_cache.scala 92:24]
    node _T = eq(UInt<3>("h0"), state) @[i_cache.scala 96:18]
    when _T : @[i_cache.scala 96:18]
      when io.clear_cache : @[i_cache.scala 98:33]
        state <= UInt<3>("h4") @[i_cache.scala 99:23]
      else :
        when io.from_ifu.arvalid : @[i_cache.scala 100:44]
          addr <= io.from_ifu.araddr @[i_cache.scala 101:22]
          state <= UInt<3>("h1") @[i_cache.scala 102:23]
    else :
      node _T_1 = eq(UInt<3>("h1"), state) @[i_cache.scala 96:18]
      when _T_1 : @[i_cache.scala 96:18]
        when anyMatch : @[i_cache.scala 106:27]
          when io.from_ifu.rready : @[i_cache.scala 107:41]
            state <= UInt<3>("h0") @[i_cache.scala 108:27]
        else :
          state <= UInt<3>("h2") @[i_cache.scala 111:23]
          receive_num <= UInt<1>("h0") @[i_cache.scala 112:29]
      else :
        node _T_2 = eq(UInt<3>("h2"), state) @[i_cache.scala 96:18]
        when _T_2 : @[i_cache.scala 96:18]
          when io.from_axi.rvalid : @[i_cache.scala 116:37]
            node _T_3 = bits(receive_num, 0, 0)
            receive_data[_T_3] <= io.from_axi.rdata @[i_cache.scala 117:43]
            node _receive_num_T = add(receive_num, UInt<1>("h1")) @[i_cache.scala 118:44]
            node _receive_num_T_1 = tail(_receive_num_T, 1) @[i_cache.scala 118:44]
            receive_num <= _receive_num_T_1 @[i_cache.scala 118:29]
            when io.from_axi.rlast : @[i_cache.scala 119:40]
              state <= UInt<3>("h3") @[i_cache.scala 120:27]
        else :
          node _T_4 = eq(UInt<3>("h3"), state) @[i_cache.scala 96:18]
          when _T_4 : @[i_cache.scala 96:18]
            state <= UInt<3>("h1") @[i_cache.scala 125:19]
            node _T_5 = eq(allvalid, UInt<1>("h0")) @[i_cache.scala 126:18]
            when _T_5 : @[i_cache.scala 126:28]
              node _T_6 = bits(unvalidIndex, 7, 0) @[i_cache.scala 127:26]
              infer mport MPORT = cacheLine[_T_6], clock @[i_cache.scala 127:26]
              node _T_7 = cat(receive_data[1], receive_data[0]) @[Cat.scala 31:58]
              MPORT <= _T_7 @[i_cache.scala 127:41]
              node _T_8 = bits(unvalidIndex, 7, 0) @[i_cache.scala 128:23]
              infer mport MPORT_1 = tagMem[_T_8], clock @[i_cache.scala 128:23]
              MPORT_1 <= tag @[i_cache.scala 128:38]
              node _T_9 = bits(unvalidIndex, 7, 0) @[i_cache.scala 129:25]
              infer mport MPORT_2 = validMem[_T_9], clock @[i_cache.scala 129:25]
              MPORT_2 <= UInt<1>("h1") @[i_cache.scala 129:40]
              infer mport MPORT_3 = quene[index], clock @[i_cache.scala 130:22]
              infer mport MPORT_4 = quene[index], clock @[i_cache.scala 130:39]
              node _T_10 = dshl(MPORT_4, UInt<2>("h2")) @[i_cache.scala 130:47]
              node _T_11 = or(_T_10, foundUnvalidIndex) @[i_cache.scala 130:55]
              MPORT_3 <= _T_11 @[i_cache.scala 130:30]
            else :
              node _T_12 = bits(replaceIndex, 7, 0) @[i_cache.scala 132:26]
              infer mport MPORT_5 = cacheLine[_T_12], clock @[i_cache.scala 132:26]
              node _T_13 = cat(receive_data[1], receive_data[0]) @[Cat.scala 31:58]
              MPORT_5 <= _T_13 @[i_cache.scala 132:41]
              node _T_14 = bits(replaceIndex, 7, 0) @[i_cache.scala 133:23]
              infer mport MPORT_6 = tagMem[_T_14], clock @[i_cache.scala 133:23]
              MPORT_6 <= tag @[i_cache.scala 133:38]
              node _T_15 = bits(replaceIndex, 7, 0) @[i_cache.scala 134:25]
              infer mport MPORT_7 = validMem[_T_15], clock @[i_cache.scala 134:25]
              MPORT_7 <= UInt<1>("h1") @[i_cache.scala 134:40]
              infer mport MPORT_8 = quene[index], clock @[i_cache.scala 135:22]
              infer mport MPORT_9 = quene[index], clock @[i_cache.scala 135:39]
              node _T_16 = dshl(MPORT_9, UInt<2>("h2")) @[i_cache.scala 135:47]
              node _T_17 = or(_T_16, replace_way) @[i_cache.scala 135:55]
              MPORT_8 <= _T_17 @[i_cache.scala 135:30]
          else :
            node _T_18 = eq(UInt<3>("h4"), state) @[i_cache.scala 96:18]
            when _T_18 : @[i_cache.scala 96:18]
              write mport MPORT_10 = validMem[UInt<1>("h0")], clock
              MPORT_10 <= UInt<1>("h0")
              write mport MPORT_11 = validMem[UInt<1>("h1")], clock
              MPORT_11 <= UInt<1>("h0")
              write mport MPORT_12 = validMem[UInt<2>("h2")], clock
              MPORT_12 <= UInt<1>("h0")
              write mport MPORT_13 = validMem[UInt<2>("h3")], clock
              MPORT_13 <= UInt<1>("h0")
              write mport MPORT_14 = validMem[UInt<3>("h4")], clock
              MPORT_14 <= UInt<1>("h0")
              write mport MPORT_15 = validMem[UInt<3>("h5")], clock
              MPORT_15 <= UInt<1>("h0")
              write mport MPORT_16 = validMem[UInt<3>("h6")], clock
              MPORT_16 <= UInt<1>("h0")
              write mport MPORT_17 = validMem[UInt<3>("h7")], clock
              MPORT_17 <= UInt<1>("h0")
              write mport MPORT_18 = validMem[UInt<4>("h8")], clock
              MPORT_18 <= UInt<1>("h0")
              write mport MPORT_19 = validMem[UInt<4>("h9")], clock
              MPORT_19 <= UInt<1>("h0")
              write mport MPORT_20 = validMem[UInt<4>("ha")], clock
              MPORT_20 <= UInt<1>("h0")
              write mport MPORT_21 = validMem[UInt<4>("hb")], clock
              MPORT_21 <= UInt<1>("h0")
              write mport MPORT_22 = validMem[UInt<4>("hc")], clock
              MPORT_22 <= UInt<1>("h0")
              write mport MPORT_23 = validMem[UInt<4>("hd")], clock
              MPORT_23 <= UInt<1>("h0")
              write mport MPORT_24 = validMem[UInt<4>("he")], clock
              MPORT_24 <= UInt<1>("h0")
              write mport MPORT_25 = validMem[UInt<4>("hf")], clock
              MPORT_25 <= UInt<1>("h0")
              write mport MPORT_26 = validMem[UInt<5>("h10")], clock
              MPORT_26 <= UInt<1>("h0")
              write mport MPORT_27 = validMem[UInt<5>("h11")], clock
              MPORT_27 <= UInt<1>("h0")
              write mport MPORT_28 = validMem[UInt<5>("h12")], clock
              MPORT_28 <= UInt<1>("h0")
              write mport MPORT_29 = validMem[UInt<5>("h13")], clock
              MPORT_29 <= UInt<1>("h0")
              write mport MPORT_30 = validMem[UInt<5>("h14")], clock
              MPORT_30 <= UInt<1>("h0")
              write mport MPORT_31 = validMem[UInt<5>("h15")], clock
              MPORT_31 <= UInt<1>("h0")
              write mport MPORT_32 = validMem[UInt<5>("h16")], clock
              MPORT_32 <= UInt<1>("h0")
              write mport MPORT_33 = validMem[UInt<5>("h17")], clock
              MPORT_33 <= UInt<1>("h0")
              write mport MPORT_34 = validMem[UInt<5>("h18")], clock
              MPORT_34 <= UInt<1>("h0")
              write mport MPORT_35 = validMem[UInt<5>("h19")], clock
              MPORT_35 <= UInt<1>("h0")
              write mport MPORT_36 = validMem[UInt<5>("h1a")], clock
              MPORT_36 <= UInt<1>("h0")
              write mport MPORT_37 = validMem[UInt<5>("h1b")], clock
              MPORT_37 <= UInt<1>("h0")
              write mport MPORT_38 = validMem[UInt<5>("h1c")], clock
              MPORT_38 <= UInt<1>("h0")
              write mport MPORT_39 = validMem[UInt<5>("h1d")], clock
              MPORT_39 <= UInt<1>("h0")
              write mport MPORT_40 = validMem[UInt<5>("h1e")], clock
              MPORT_40 <= UInt<1>("h0")
              write mport MPORT_41 = validMem[UInt<5>("h1f")], clock
              MPORT_41 <= UInt<1>("h0")
              write mport MPORT_42 = validMem[UInt<6>("h20")], clock
              MPORT_42 <= UInt<1>("h0")
              write mport MPORT_43 = validMem[UInt<6>("h21")], clock
              MPORT_43 <= UInt<1>("h0")
              write mport MPORT_44 = validMem[UInt<6>("h22")], clock
              MPORT_44 <= UInt<1>("h0")
              write mport MPORT_45 = validMem[UInt<6>("h23")], clock
              MPORT_45 <= UInt<1>("h0")
              write mport MPORT_46 = validMem[UInt<6>("h24")], clock
              MPORT_46 <= UInt<1>("h0")
              write mport MPORT_47 = validMem[UInt<6>("h25")], clock
              MPORT_47 <= UInt<1>("h0")
              write mport MPORT_48 = validMem[UInt<6>("h26")], clock
              MPORT_48 <= UInt<1>("h0")
              write mport MPORT_49 = validMem[UInt<6>("h27")], clock
              MPORT_49 <= UInt<1>("h0")
              write mport MPORT_50 = validMem[UInt<6>("h28")], clock
              MPORT_50 <= UInt<1>("h0")
              write mport MPORT_51 = validMem[UInt<6>("h29")], clock
              MPORT_51 <= UInt<1>("h0")
              write mport MPORT_52 = validMem[UInt<6>("h2a")], clock
              MPORT_52 <= UInt<1>("h0")
              write mport MPORT_53 = validMem[UInt<6>("h2b")], clock
              MPORT_53 <= UInt<1>("h0")
              write mport MPORT_54 = validMem[UInt<6>("h2c")], clock
              MPORT_54 <= UInt<1>("h0")
              write mport MPORT_55 = validMem[UInt<6>("h2d")], clock
              MPORT_55 <= UInt<1>("h0")
              write mport MPORT_56 = validMem[UInt<6>("h2e")], clock
              MPORT_56 <= UInt<1>("h0")
              write mport MPORT_57 = validMem[UInt<6>("h2f")], clock
              MPORT_57 <= UInt<1>("h0")
              write mport MPORT_58 = validMem[UInt<6>("h30")], clock
              MPORT_58 <= UInt<1>("h0")
              write mport MPORT_59 = validMem[UInt<6>("h31")], clock
              MPORT_59 <= UInt<1>("h0")
              write mport MPORT_60 = validMem[UInt<6>("h32")], clock
              MPORT_60 <= UInt<1>("h0")
              write mport MPORT_61 = validMem[UInt<6>("h33")], clock
              MPORT_61 <= UInt<1>("h0")
              write mport MPORT_62 = validMem[UInt<6>("h34")], clock
              MPORT_62 <= UInt<1>("h0")
              write mport MPORT_63 = validMem[UInt<6>("h35")], clock
              MPORT_63 <= UInt<1>("h0")
              write mport MPORT_64 = validMem[UInt<6>("h36")], clock
              MPORT_64 <= UInt<1>("h0")
              write mport MPORT_65 = validMem[UInt<6>("h37")], clock
              MPORT_65 <= UInt<1>("h0")
              write mport MPORT_66 = validMem[UInt<6>("h38")], clock
              MPORT_66 <= UInt<1>("h0")
              write mport MPORT_67 = validMem[UInt<6>("h39")], clock
              MPORT_67 <= UInt<1>("h0")
              write mport MPORT_68 = validMem[UInt<6>("h3a")], clock
              MPORT_68 <= UInt<1>("h0")
              write mport MPORT_69 = validMem[UInt<6>("h3b")], clock
              MPORT_69 <= UInt<1>("h0")
              write mport MPORT_70 = validMem[UInt<6>("h3c")], clock
              MPORT_70 <= UInt<1>("h0")
              write mport MPORT_71 = validMem[UInt<6>("h3d")], clock
              MPORT_71 <= UInt<1>("h0")
              write mport MPORT_72 = validMem[UInt<6>("h3e")], clock
              MPORT_72 <= UInt<1>("h0")
              write mport MPORT_73 = validMem[UInt<6>("h3f")], clock
              MPORT_73 <= UInt<1>("h0")
              state <= UInt<3>("h0") @[i_cache.scala 142:18]
    wire rdata : UInt<64> @[i_cache.scala 145:21]
    node _rdata_T = bits(offset, 3, 2) @[i_cache.scala 146:30]
    node _rdata_T_1 = bits(tagIndex, 7, 0) @[i_cache.scala 147:25]
    infer mport rdata_MPORT = cacheLine[_rdata_T_1], clock @[i_cache.scala 147:25]
    node _rdata_T_2 = bits(rdata_MPORT, 31, 0) @[i_cache.scala 147:35]
    node _rdata_T_3 = bits(tagIndex, 7, 0) @[i_cache.scala 148:25]
    infer mport rdata_MPORT_1 = cacheLine[_rdata_T_3], clock @[i_cache.scala 148:25]
    node _rdata_T_4 = bits(rdata_MPORT_1, 63, 32) @[i_cache.scala 148:35]
    node _rdata_T_5 = bits(tagIndex, 7, 0) @[i_cache.scala 149:25]
    infer mport rdata_MPORT_2 = cacheLine[_rdata_T_5], clock @[i_cache.scala 149:25]
    node _rdata_T_6 = bits(rdata_MPORT_2, 95, 64) @[i_cache.scala 149:35]
    node _rdata_T_7 = bits(tagIndex, 7, 0) @[i_cache.scala 150:25]
    infer mport rdata_MPORT_3 = cacheLine[_rdata_T_7], clock @[i_cache.scala 150:25]
    node _rdata_T_8 = bits(rdata_MPORT_3, 127, 96) @[i_cache.scala 150:35]
    node _rdata_T_9 = eq(UInt<1>("h1"), _rdata_T) @[Mux.scala 81:61]
    node _rdata_T_10 = mux(_rdata_T_9, _rdata_T_4, _rdata_T_2) @[Mux.scala 81:58]
    node _rdata_T_11 = eq(UInt<2>("h2"), _rdata_T) @[Mux.scala 81:61]
    node _rdata_T_12 = mux(_rdata_T_11, _rdata_T_6, _rdata_T_10) @[Mux.scala 81:58]
    node _rdata_T_13 = eq(UInt<2>("h3"), _rdata_T) @[Mux.scala 81:61]
    node _rdata_T_14 = mux(_rdata_T_13, _rdata_T_8, _rdata_T_12) @[Mux.scala 81:58]
    rdata <= _rdata_T_14 @[i_cache.scala 146:11]
    node _T_19 = eq(state, UInt<3>("h1")) @[i_cache.scala 152:15]
    when _T_19 : @[i_cache.scala 152:25]
      io.to_axi.arvalid <= UInt<1>("h0") @[i_cache.scala 153:27]
      io.to_axi.araddr <= addr @[i_cache.scala 154:26]
      io.to_axi.arlen <= UInt<1>("h0") @[i_cache.scala 155:25]
      io.to_axi.arsize <= UInt<3>("h6") @[i_cache.scala 156:26]
      io.to_axi.arburst <= UInt<1>("h0") @[i_cache.scala 157:27]
      io.to_axi.rready <= UInt<1>("h0") @[i_cache.scala 158:26]
      io.to_axi.awaddr <= UInt<1>("h0") @[i_cache.scala 159:26]
      io.to_axi.awvalid <= UInt<1>("h0") @[i_cache.scala 160:27]
      io.to_axi.awlen <= UInt<1>("h0") @[i_cache.scala 161:25]
      io.to_axi.awsize <= UInt<3>("h6") @[i_cache.scala 162:26]
      io.to_axi.awburst <= UInt<1>("h0") @[i_cache.scala 163:27]
      io.to_axi.wdata <= UInt<1>("h0") @[i_cache.scala 164:25]
      io.to_axi.wstrb <= UInt<1>("h0") @[i_cache.scala 165:25]
      io.to_axi.wlast <= UInt<1>("h0") @[i_cache.scala 166:25]
      io.to_axi.wvalid <= UInt<1>("h0") @[i_cache.scala 167:26]
      io.to_axi.bready <= UInt<1>("h0") @[i_cache.scala 168:26]
      io.to_ifu.rdata <= rdata @[i_cache.scala 169:25]
      io.to_ifu.arready <= UInt<1>("h0") @[i_cache.scala 170:27]
      io.to_ifu.rvalid <= anyMatch @[i_cache.scala 171:26]
      io.to_ifu.rlast <= anyMatch @[i_cache.scala 172:25]
      io.to_ifu.wready <= UInt<1>("h0") @[i_cache.scala 173:26]
      io.to_ifu.awready <= UInt<1>("h0") @[i_cache.scala 174:27]
      io.to_ifu.bvalid <= UInt<1>("h0") @[i_cache.scala 175:26]
    else :
      node _T_20 = eq(state, UInt<3>("h2")) @[i_cache.scala 176:21]
      when _T_20 : @[i_cache.scala 176:29]
        io.to_ifu.rdata <= UInt<1>("h0") @[i_cache.scala 177:25]
        io.to_ifu.arready <= UInt<1>("h0") @[i_cache.scala 178:27]
        io.to_ifu.rvalid <= UInt<1>("h0") @[i_cache.scala 179:26]
        io.to_ifu.rlast <= UInt<1>("h0") @[i_cache.scala 180:25]
        io.to_ifu.wready <= UInt<1>("h0") @[i_cache.scala 181:26]
        io.to_ifu.bvalid <= UInt<1>("h0") @[i_cache.scala 182:26]
        io.to_ifu.awready <= UInt<1>("h0") @[i_cache.scala 183:27]
        io.to_axi.arvalid <= UInt<1>("h1") @[i_cache.scala 184:27]
        node _io_to_axi_araddr_T = and(addr, UInt<64>("hfffffffffffffff0")) @[i_cache.scala 185:35]
        io.to_axi.araddr <= _io_to_axi_araddr_T @[i_cache.scala 185:26]
        io.to_axi.arlen <= UInt<1>("h1") @[i_cache.scala 186:25]
        io.to_axi.arsize <= UInt<3>("h6") @[i_cache.scala 187:26]
        io.to_axi.arburst <= UInt<1>("h1") @[i_cache.scala 188:27]
        io.to_axi.rready <= UInt<1>("h1") @[i_cache.scala 189:26]
        io.to_axi.awaddr <= UInt<1>("h0") @[i_cache.scala 190:26]
        io.to_axi.awvalid <= UInt<1>("h0") @[i_cache.scala 191:27]
        io.to_axi.awlen <= UInt<1>("h0") @[i_cache.scala 192:25]
        io.to_axi.awsize <= UInt<3>("h6") @[i_cache.scala 193:26]
        io.to_axi.awburst <= UInt<1>("h1") @[i_cache.scala 194:27]
        io.to_axi.wdata <= UInt<1>("h0") @[i_cache.scala 195:25]
        io.to_axi.wstrb <= UInt<1>("h0") @[i_cache.scala 196:25]
        io.to_axi.wlast <= UInt<1>("h0") @[i_cache.scala 197:25]
        io.to_axi.wvalid <= UInt<1>("h0") @[i_cache.scala 198:26]
        io.to_axi.bready <= UInt<1>("h0") @[i_cache.scala 199:26]
      else :
        io.to_ifu.rdata <= UInt<1>("h0") @[i_cache.scala 201:25]
        node _io_to_ifu_arready_T = eq(state, UInt<3>("h0")) @[i_cache.scala 202:36]
        io.to_ifu.arready <= _io_to_ifu_arready_T @[i_cache.scala 202:27]
        io.to_ifu.rvalid <= UInt<1>("h0") @[i_cache.scala 203:26]
        io.to_ifu.rlast <= UInt<1>("h0") @[i_cache.scala 204:25]
        io.to_ifu.wready <= UInt<1>("h0") @[i_cache.scala 205:26]
        io.to_ifu.bvalid <= UInt<1>("h0") @[i_cache.scala 206:26]
        io.to_ifu.awready <= UInt<1>("h0") @[i_cache.scala 207:27]
        io.to_axi.arvalid <= UInt<1>("h0") @[i_cache.scala 208:27]
        io.to_axi.araddr <= addr @[i_cache.scala 209:26]
        io.to_axi.rready <= io.from_ifu.rready @[i_cache.scala 210:26]
        io.to_axi.arlen <= UInt<1>("h0") @[i_cache.scala 211:25]
        io.to_axi.arsize <= UInt<3>("h6") @[i_cache.scala 212:26]
        io.to_axi.arburst <= UInt<1>("h0") @[i_cache.scala 213:27]
        io.to_axi.awaddr <= UInt<1>("h0") @[i_cache.scala 214:26]
        io.to_axi.awvalid <= UInt<1>("h0") @[i_cache.scala 215:27]
        io.to_axi.awlen <= UInt<1>("h0") @[i_cache.scala 216:25]
        io.to_axi.awsize <= UInt<3>("h6") @[i_cache.scala 217:26]
        io.to_axi.awburst <= UInt<1>("h0") @[i_cache.scala 218:27]
        io.to_axi.wdata <= UInt<1>("h0") @[i_cache.scala 219:25]
        io.to_axi.wstrb <= UInt<1>("h0") @[i_cache.scala 220:25]
        io.to_axi.wlast <= UInt<1>("h0") @[i_cache.scala 221:25]
        io.to_axi.wvalid <= UInt<1>("h0") @[i_cache.scala 222:26]
        io.to_axi.bready <= UInt<1>("h0") @[i_cache.scala 223:26]
    node _io_cache_init_T = eq(state, UInt<3>("h4")) @[i_cache.scala 225:27]
    io.cache_init <= _io_cache_init_T @[i_cache.scala 225:19]

  module D_CACHE :
    input clock : Clock
    input reset : Reset
    output io : { flip from_lsu : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, to_lsu : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}, to_axi : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, flip from_axi : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}}

    node offset = bits(io.from_lsu.araddr, 3, 0) @[d_cache.scala 20:36]
    node index = bits(io.from_lsu.araddr, 9, 4) @[d_cache.scala 21:35]
    node tag = bits(io.from_lsu.araddr, 31, 10) @[d_cache.scala 22:33]
    cmem cacheLine : UInt<128> [256] @[d_cache.scala 24:24]
    cmem validMem : UInt<1> [256] @[d_cache.scala 25:23]
    cmem tagMem : UInt<32> [256] @[d_cache.scala 28:21]
    cmem dirtyMem : UInt<1> [256] @[d_cache.scala 29:23]
    wire valid : UInt<1>[4] @[d_cache.scala 39:21]
    node _valid_0_T = dshl(UInt<1>("h0"), UInt<3>("h6")) @[d_cache.scala 41:40]
    node _valid_0_T_1 = add(_valid_0_T, index) @[d_cache.scala 41:48]
    node _valid_0_T_2 = tail(_valid_0_T_1, 1) @[d_cache.scala 41:48]
    infer mport valid_0_MPORT = validMem[_valid_0_T_2], clock @[d_cache.scala 41:29]
    valid[0] <= valid_0_MPORT @[d_cache.scala 41:18]
    node _valid_1_T = dshl(UInt<1>("h1"), UInt<3>("h6")) @[d_cache.scala 41:40]
    node _valid_1_T_1 = add(_valid_1_T, index) @[d_cache.scala 41:48]
    node _valid_1_T_2 = tail(_valid_1_T_1, 1) @[d_cache.scala 41:48]
    infer mport valid_1_MPORT = validMem[_valid_1_T_2], clock @[d_cache.scala 41:29]
    valid[1] <= valid_1_MPORT @[d_cache.scala 41:18]
    node _valid_2_T = dshl(UInt<2>("h2"), UInt<3>("h6")) @[d_cache.scala 41:40]
    node _valid_2_T_1 = add(_valid_2_T, index) @[d_cache.scala 41:48]
    node _valid_2_T_2 = tail(_valid_2_T_1, 1) @[d_cache.scala 41:48]
    node _valid_2_T_3 = bits(_valid_2_T_2, 7, 0) @[d_cache.scala 41:29]
    infer mport valid_2_MPORT = validMem[_valid_2_T_3], clock @[d_cache.scala 41:29]
    valid[2] <= valid_2_MPORT @[d_cache.scala 41:18]
    node _valid_3_T = dshl(UInt<2>("h3"), UInt<3>("h6")) @[d_cache.scala 41:40]
    node _valid_3_T_1 = add(_valid_3_T, index) @[d_cache.scala 41:48]
    node _valid_3_T_2 = tail(_valid_3_T_1, 1) @[d_cache.scala 41:48]
    node _valid_3_T_3 = bits(_valid_3_T_2, 7, 0) @[d_cache.scala 41:29]
    infer mport valid_3_MPORT = validMem[_valid_3_T_3], clock @[d_cache.scala 41:29]
    valid[3] <= valid_3_MPORT @[d_cache.scala 41:18]
    node _allvalid_T = and(valid[0], valid[1]) @[d_cache.scala 43:35]
    node _allvalid_T_1 = and(_allvalid_T, valid[2]) @[d_cache.scala 43:35]
    node allvalid = and(_allvalid_T_1, valid[3]) @[d_cache.scala 43:35]
    node _foundUnvalidIndex_T = eq(valid[0], UInt<1>("h0")) @[d_cache.scala 45:10]
    node _foundUnvalidIndex_T_1 = eq(valid[1], UInt<1>("h0")) @[d_cache.scala 46:10]
    node _foundUnvalidIndex_T_2 = eq(valid[2], UInt<1>("h0")) @[d_cache.scala 47:10]
    node _foundUnvalidIndex_T_3 = eq(valid[3], UInt<1>("h0")) @[d_cache.scala 48:10]
    node _foundUnvalidIndex_T_4 = mux(_foundUnvalidIndex_T_3, UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _foundUnvalidIndex_T_5 = mux(_foundUnvalidIndex_T_2, UInt<2>("h2"), _foundUnvalidIndex_T_4) @[Mux.scala 101:16]
    node _foundUnvalidIndex_T_6 = mux(_foundUnvalidIndex_T_1, UInt<1>("h1"), _foundUnvalidIndex_T_5) @[Mux.scala 101:16]
    node foundUnvalidIndex = mux(_foundUnvalidIndex_T, UInt<1>("h0"), _foundUnvalidIndex_T_6) @[Mux.scala 101:16]
    node _unvalidIndex_T = dshl(foundUnvalidIndex, UInt<3>("h6")) @[d_cache.scala 50:43]
    node _unvalidIndex_T_1 = add(_unvalidIndex_T, index) @[d_cache.scala 50:51]
    node unvalidIndex = tail(_unvalidIndex_T_1, 1) @[d_cache.scala 50:51]
    wire tagMatch : UInt<1>[4] @[d_cache.scala 53:24]
    node _tagMatch_0_T = dshl(UInt<1>("h0"), UInt<3>("h6")) @[d_cache.scala 55:54]
    node _tagMatch_0_T_1 = add(_tagMatch_0_T, index) @[d_cache.scala 55:62]
    node _tagMatch_0_T_2 = tail(_tagMatch_0_T_1, 1) @[d_cache.scala 55:62]
    infer mport tagMatch_0_MPORT = tagMem[_tagMatch_0_T_2], clock @[d_cache.scala 55:43]
    node _tagMatch_0_T_3 = eq(tagMatch_0_MPORT, tag) @[d_cache.scala 55:71]
    node _tagMatch_0_T_4 = and(valid[0], _tagMatch_0_T_3) @[d_cache.scala 55:33]
    tagMatch[0] <= _tagMatch_0_T_4 @[d_cache.scala 55:21]
    node _tagMatch_1_T = dshl(UInt<1>("h1"), UInt<3>("h6")) @[d_cache.scala 55:54]
    node _tagMatch_1_T_1 = add(_tagMatch_1_T, index) @[d_cache.scala 55:62]
    node _tagMatch_1_T_2 = tail(_tagMatch_1_T_1, 1) @[d_cache.scala 55:62]
    infer mport tagMatch_1_MPORT = tagMem[_tagMatch_1_T_2], clock @[d_cache.scala 55:43]
    node _tagMatch_1_T_3 = eq(tagMatch_1_MPORT, tag) @[d_cache.scala 55:71]
    node _tagMatch_1_T_4 = and(valid[1], _tagMatch_1_T_3) @[d_cache.scala 55:33]
    tagMatch[1] <= _tagMatch_1_T_4 @[d_cache.scala 55:21]
    node _tagMatch_2_T = dshl(UInt<2>("h2"), UInt<3>("h6")) @[d_cache.scala 55:54]
    node _tagMatch_2_T_1 = add(_tagMatch_2_T, index) @[d_cache.scala 55:62]
    node _tagMatch_2_T_2 = tail(_tagMatch_2_T_1, 1) @[d_cache.scala 55:62]
    node _tagMatch_2_T_3 = bits(_tagMatch_2_T_2, 7, 0) @[d_cache.scala 55:43]
    infer mport tagMatch_2_MPORT = tagMem[_tagMatch_2_T_3], clock @[d_cache.scala 55:43]
    node _tagMatch_2_T_4 = eq(tagMatch_2_MPORT, tag) @[d_cache.scala 55:71]
    node _tagMatch_2_T_5 = and(valid[2], _tagMatch_2_T_4) @[d_cache.scala 55:33]
    tagMatch[2] <= _tagMatch_2_T_5 @[d_cache.scala 55:21]
    node _tagMatch_3_T = dshl(UInt<2>("h3"), UInt<3>("h6")) @[d_cache.scala 55:54]
    node _tagMatch_3_T_1 = add(_tagMatch_3_T, index) @[d_cache.scala 55:62]
    node _tagMatch_3_T_2 = tail(_tagMatch_3_T_1, 1) @[d_cache.scala 55:62]
    node _tagMatch_3_T_3 = bits(_tagMatch_3_T_2, 7, 0) @[d_cache.scala 55:43]
    infer mport tagMatch_3_MPORT = tagMem[_tagMatch_3_T_3], clock @[d_cache.scala 55:43]
    node _tagMatch_3_T_4 = eq(tagMatch_3_MPORT, tag) @[d_cache.scala 55:71]
    node _tagMatch_3_T_5 = and(valid[3], _tagMatch_3_T_4) @[d_cache.scala 55:33]
    tagMatch[3] <= _tagMatch_3_T_5 @[d_cache.scala 55:21]
    node _anyMatch_T = or(tagMatch[0], tagMatch[1]) @[d_cache.scala 57:38]
    node _anyMatch_T_1 = or(_anyMatch_T, tagMatch[2]) @[d_cache.scala 57:38]
    node anyMatch = or(_anyMatch_T_1, tagMatch[3]) @[d_cache.scala 57:38]
    node _foundtagIndex_T = mux(tagMatch[3], UInt<2>("h3"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _foundtagIndex_T_1 = mux(tagMatch[2], UInt<2>("h2"), _foundtagIndex_T) @[Mux.scala 101:16]
    node _foundtagIndex_T_2 = mux(tagMatch[1], UInt<1>("h1"), _foundtagIndex_T_1) @[Mux.scala 101:16]
    node foundtagIndex = mux(tagMatch[0], UInt<1>("h0"), _foundtagIndex_T_2) @[Mux.scala 101:16]
    node _tagIndex_T = dshl(foundtagIndex, UInt<3>("h6")) @[d_cache.scala 64:35]
    node _tagIndex_T_1 = add(_tagIndex_T, index) @[d_cache.scala 64:43]
    node tagIndex = tail(_tagIndex_T_1, 1) @[d_cache.scala 64:43]
    wire replaceIndex : UInt<32> @[d_cache.scala 66:28]
    reg write_back_data : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[d_cache.scala 70:34]
    reg write_back_addr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[d_cache.scala 71:34]
    wire _receive_data_WIRE : UInt<64>[2] @[d_cache.scala 75:39]
    _receive_data_WIRE[0] <= UInt<64>("h0") @[d_cache.scala 75:39]
    _receive_data_WIRE[1] <= UInt<64>("h0") @[d_cache.scala 75:39]
    reg receive_data : UInt<64>[2], clock with :
      reset => (reset, _receive_data_WIRE) @[d_cache.scala 75:31]
    reg receive_num : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[d_cache.scala 76:30]
    cmem quene : UInt<8> [64] @[d_cache.scala 77:20]
    infer mport replace_way_MPORT = quene[index], clock @[d_cache.scala 79:28]
    node replace_way = bits(replace_way_MPORT, 7, 6) @[d_cache.scala 79:35]
    node _replaceIndex_T = dshl(replace_way, UInt<3>("h6")) @[d_cache.scala 80:34]
    node _replaceIndex_T_1 = add(_replaceIndex_T, index) @[d_cache.scala 80:42]
    node _replaceIndex_T_2 = tail(_replaceIndex_T_1, 1) @[d_cache.scala 80:42]
    replaceIndex <= _replaceIndex_T_2 @[d_cache.scala 80:18]
    node _shift_bit_t_T = bits(offset, 2, 0) @[d_cache.scala 82:29]
    node shift_bit_t = dshl(_shift_bit_t_T, UInt<2>("h3")) @[d_cache.scala 82:35]
    wire rdata : UInt<64> @[d_cache.scala 83:21]
    wire ldata : UInt<64> @[d_cache.scala 84:21]
    wire change_data : UInt<64> @[d_cache.scala 85:27]
    wire wmask : UInt<64> @[d_cache.scala 88:21]
    node _wmask_T = eq(io.from_lsu.wstrb, UInt<1>("h1")) @[d_cache.scala 89:38]
    node _wmask_T_1 = eq(io.from_lsu.wstrb, UInt<2>("h3")) @[d_cache.scala 90:38]
    node _wmask_T_2 = eq(io.from_lsu.wstrb, UInt<4>("hf")) @[d_cache.scala 91:38]
    node _wmask_T_3 = eq(io.from_lsu.wstrb, UInt<8>("hff")) @[d_cache.scala 92:38]
    node _wmask_T_4 = mux(_wmask_T_3, UInt<64>("hffffffffffffffff"), UInt<1>("h0")) @[d_cache.scala 92:20]
    node _wmask_T_5 = mux(_wmask_T_2, UInt<32>("hffffffff"), _wmask_T_4) @[d_cache.scala 91:20]
    node _wmask_T_6 = mux(_wmask_T_1, UInt<16>("hffff"), _wmask_T_5) @[d_cache.scala 90:20]
    node _wmask_T_7 = mux(_wmask_T, UInt<8>("hff"), _wmask_T_6) @[d_cache.scala 89:20]
    wmask <= _wmask_T_7 @[d_cache.scala 89:11]
    wire mask_shift : UInt<64> @[d_cache.scala 93:26]
    node _mask_shift_T = dshl(wmask, shift_bit_t) @[d_cache.scala 94:25]
    mask_shift <= _mask_shift_T @[d_cache.scala 94:16]
    node _rdata_T = bits(offset, 3, 3) @[d_cache.scala 95:24]
    node _rdata_T_1 = eq(_rdata_T, UInt<1>("h1")) @[d_cache.scala 95:27]
    node _rdata_T_2 = bits(tagIndex, 7, 0) @[d_cache.scala 95:43]
    infer mport rdata_MPORT = cacheLine[_rdata_T_2], clock @[d_cache.scala 95:43]
    node _rdata_T_3 = bits(rdata_MPORT, 127, 64) @[d_cache.scala 95:53]
    node _rdata_T_4 = bits(tagIndex, 7, 0) @[d_cache.scala 95:71]
    infer mport rdata_MPORT_1 = cacheLine[_rdata_T_4], clock @[d_cache.scala 95:71]
    node _rdata_T_5 = bits(rdata_MPORT_1, 63, 0) @[d_cache.scala 95:81]
    node _rdata_T_6 = mux(_rdata_T_1, _rdata_T_3, _rdata_T_5) @[d_cache.scala 95:17]
    rdata <= _rdata_T_6 @[d_cache.scala 95:11]
    node _ldata_T = bits(offset, 3, 3) @[d_cache.scala 96:24]
    node _ldata_T_1 = eq(_ldata_T, UInt<1>("h1")) @[d_cache.scala 96:27]
    node _ldata_T_2 = bits(tagIndex, 7, 0) @[d_cache.scala 96:43]
    infer mport ldata_MPORT = cacheLine[_ldata_T_2], clock @[d_cache.scala 96:43]
    node _ldata_T_3 = bits(ldata_MPORT, 63, 0) @[d_cache.scala 96:53]
    node _ldata_T_4 = bits(tagIndex, 7, 0) @[d_cache.scala 96:69]
    infer mport ldata_MPORT_1 = cacheLine[_ldata_T_4], clock @[d_cache.scala 96:69]
    node _ldata_T_5 = bits(ldata_MPORT_1, 127, 64) @[d_cache.scala 96:79]
    node _ldata_T_6 = mux(_ldata_T_1, _ldata_T_3, _ldata_T_5) @[d_cache.scala 96:17]
    ldata <= _ldata_T_6 @[d_cache.scala 96:11]
    node _change_data_T = and(io.from_lsu.wdata, wmask) @[d_cache.scala 97:40]
    node _change_data_T_1 = dshl(_change_data_T, shift_bit_t) @[d_cache.scala 97:49]
    node _change_data_T_2 = not(mask_shift) @[d_cache.scala 97:76]
    node _change_data_T_3 = and(rdata, _change_data_T_2) @[d_cache.scala 97:74]
    node _change_data_T_4 = or(_change_data_T_1, _change_data_T_3) @[d_cache.scala 97:65]
    change_data <= _change_data_T_4 @[d_cache.scala 97:17]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[d_cache.scala 103:24]
    io.to_lsu.rdata <= UInt<1>("h0") @[d_cache.scala 109:21]
    node _io_to_lsu_arready_T = eq(state, UInt<3>("h0")) @[d_cache.scala 110:31]
    io.to_lsu.arready <= _io_to_lsu_arready_T @[d_cache.scala 110:23]
    io.to_lsu.rvalid <= UInt<1>("h0") @[d_cache.scala 111:22]
    io.to_lsu.rlast <= UInt<1>("h0") @[d_cache.scala 112:21]
    io.to_lsu.wready <= UInt<1>("h0") @[d_cache.scala 113:22]
    io.to_lsu.bvalid <= UInt<1>("h0") @[d_cache.scala 114:22]
    node _io_to_lsu_awready_T = eq(state, UInt<3>("h0")) @[d_cache.scala 115:31]
    io.to_lsu.awready <= _io_to_lsu_awready_T @[d_cache.scala 115:23]
    io.to_axi.arvalid <= UInt<1>("h0") @[d_cache.scala 116:23]
    io.to_axi.araddr <= io.from_lsu.araddr @[d_cache.scala 117:22]
    io.to_axi.rready <= io.from_lsu.rready @[d_cache.scala 118:22]
    io.to_axi.arlen <= UInt<1>("h0") @[d_cache.scala 119:21]
    io.to_axi.arsize <= UInt<3>("h6") @[d_cache.scala 120:22]
    io.to_axi.arburst <= UInt<1>("h0") @[d_cache.scala 121:23]
    io.to_axi.awaddr <= UInt<1>("h0") @[d_cache.scala 122:22]
    io.to_axi.awvalid <= UInt<1>("h0") @[d_cache.scala 123:23]
    io.to_axi.awlen <= UInt<1>("h0") @[d_cache.scala 124:21]
    io.to_axi.awsize <= UInt<3>("h6") @[d_cache.scala 125:22]
    io.to_axi.awburst <= UInt<1>("h0") @[d_cache.scala 126:23]
    io.to_axi.wdata <= UInt<1>("h0") @[d_cache.scala 127:21]
    io.to_axi.wstrb <= UInt<1>("h0") @[d_cache.scala 128:21]
    io.to_axi.wlast <= UInt<1>("h0") @[d_cache.scala 129:21]
    io.to_axi.wvalid <= UInt<1>("h0") @[d_cache.scala 130:22]
    io.to_axi.bready <= UInt<1>("h0") @[d_cache.scala 131:22]
    node _T = eq(UInt<3>("h0"), state) @[d_cache.scala 132:18]
    when _T : @[d_cache.scala 132:18]
      node _T_1 = or(io.from_lsu.arvalid, io.from_lsu.awvalid) @[d_cache.scala 134:38]
      node _T_2 = geq(io.from_lsu.araddr, UInt<32>("ha0000000")) @[d_cache.scala 134:82]
      node _T_3 = and(_T_1, _T_2) @[d_cache.scala 134:60]
      when _T_3 : @[d_cache.scala 134:99]
        io.to_lsu <= io.from_axi @[d_cache.scala 135:27]
        io.to_axi <= io.from_lsu @[d_cache.scala 136:27]
        state <= UInt<3>("h0") @[d_cache.scala 137:23]
      else :
        when io.from_lsu.arvalid : @[d_cache.scala 138:44]
          state <= UInt<3>("h1") @[d_cache.scala 139:23]
        else :
          when io.from_lsu.awvalid : @[d_cache.scala 140:44]
            state <= UInt<3>("h2") @[d_cache.scala 141:23]
    else :
      node _T_4 = eq(UInt<3>("h1"), state) @[d_cache.scala 132:18]
      when _T_4 : @[d_cache.scala 132:18]
        node _io_to_lsu_rdata_T = dshr(rdata, shift_bit_t) @[d_cache.scala 145:38]
        io.to_lsu.rdata <= _io_to_lsu_rdata_T @[d_cache.scala 145:29]
        io.to_lsu.rvalid <= anyMatch @[d_cache.scala 146:30]
        io.to_lsu.rlast <= UInt<1>("h1") @[d_cache.scala 147:29]
        when anyMatch : @[d_cache.scala 148:27]
          when io.from_lsu.rready : @[d_cache.scala 149:41]
            state <= UInt<3>("h0") @[d_cache.scala 150:27]
        else :
          state <= UInt<3>("h3") @[d_cache.scala 153:23]
          receive_num <= UInt<1>("h0") @[d_cache.scala 154:29]
      else :
        node _T_5 = eq(UInt<3>("h2"), state) @[d_cache.scala 132:18]
        when _T_5 : @[d_cache.scala 132:18]
          io.to_lsu.wready <= anyMatch @[d_cache.scala 158:30]
          io.to_lsu.awready <= UInt<1>("h0") @[d_cache.scala 159:31]
          io.to_lsu.bvalid <= anyMatch @[d_cache.scala 160:30]
          when anyMatch : @[d_cache.scala 161:27]
            when io.from_lsu.bready : @[d_cache.scala 162:41]
              state <= UInt<3>("h0") @[d_cache.scala 163:27]
            node _T_6 = bits(tagIndex, 7, 0) @[d_cache.scala 167:26]
            infer mport MPORT = cacheLine[_T_6], clock @[d_cache.scala 167:26]
            node _T_7 = bits(offset, 3, 3) @[d_cache.scala 167:50]
            node _T_8 = eq(_T_7, UInt<1>("h1")) @[d_cache.scala 167:53]
            node _T_9 = cat(change_data, ldata) @[Cat.scala 31:58]
            node _T_10 = cat(ldata, change_data) @[Cat.scala 31:58]
            node _T_11 = mux(_T_8, _T_9, _T_10) @[d_cache.scala 167:43]
            MPORT <= _T_11 @[d_cache.scala 167:37]
            node _T_12 = bits(tagIndex, 7, 0) @[d_cache.scala 168:25]
            infer mport MPORT_1 = dirtyMem[_T_12], clock @[d_cache.scala 168:25]
            MPORT_1 <= UInt<1>("h1") @[d_cache.scala 168:36]
          else :
            state <= UInt<3>("h4") @[d_cache.scala 171:23]
        else :
          node _T_13 = eq(UInt<3>("h3"), state) @[d_cache.scala 132:18]
          when _T_13 : @[d_cache.scala 132:18]
            io.to_axi.arvalid <= UInt<1>("h1") @[d_cache.scala 175:31]
            node _io_to_axi_araddr_T = and(io.from_lsu.araddr, UInt<64>("hfffffffffffffff0")) @[d_cache.scala 176:53]
            io.to_axi.araddr <= _io_to_axi_araddr_T @[d_cache.scala 176:30]
            io.to_axi.arlen <= UInt<1>("h1") @[d_cache.scala 177:29]
            io.to_axi.arsize <= UInt<3>("h6") @[d_cache.scala 178:30]
            io.to_axi.arburst <= UInt<1>("h1") @[d_cache.scala 179:31]
            io.to_axi.rready <= io.from_lsu.rready @[d_cache.scala 180:30]
            when io.from_axi.rvalid : @[d_cache.scala 181:37]
              node _T_14 = bits(receive_num, 0, 0)
              receive_data[_T_14] <= io.from_axi.rdata @[d_cache.scala 182:43]
              node _receive_num_T = add(receive_num, UInt<1>("h1")) @[d_cache.scala 183:44]
              node _receive_num_T_1 = tail(_receive_num_T, 1) @[d_cache.scala 183:44]
              receive_num <= _receive_num_T_1 @[d_cache.scala 183:29]
              when io.from_axi.rlast : @[d_cache.scala 184:40]
                state <= UInt<3>("h5") @[d_cache.scala 185:27]
          else :
            node _T_15 = eq(UInt<3>("h4"), state) @[d_cache.scala 132:18]
            when _T_15 : @[d_cache.scala 132:18]
              io.to_lsu.wready <= io.from_axi.wready @[d_cache.scala 190:30]
              io.to_lsu.bvalid <= io.from_axi.bvalid @[d_cache.scala 191:30]
              io.to_lsu.awready <= io.from_axi.awready @[d_cache.scala 192:31]
              io.to_axi.awaddr <= io.from_lsu.awaddr @[d_cache.scala 193:30]
              io.to_axi.awvalid <= io.from_lsu.awvalid @[d_cache.scala 194:31]
              io.to_axi.awlen <= io.from_lsu.awlen @[d_cache.scala 195:29]
              io.to_axi.awsize <= io.from_lsu.awsize @[d_cache.scala 196:30]
              io.to_axi.awburst <= io.from_lsu.awburst @[d_cache.scala 197:31]
              io.to_axi.wdata <= io.from_lsu.wdata @[d_cache.scala 198:29]
              io.to_axi.wstrb <= io.from_lsu.wstrb @[d_cache.scala 199:29]
              io.to_axi.wlast <= io.from_lsu.wlast @[d_cache.scala 200:29]
              io.to_axi.wvalid <= io.from_lsu.wvalid @[d_cache.scala 201:30]
              io.to_axi.bready <= io.from_lsu.bready @[d_cache.scala 202:30]
              node _T_16 = and(io.from_axi.bvalid, io.from_lsu.bready) @[d_cache.scala 203:37]
              when _T_16 : @[d_cache.scala 203:59]
                state <= UInt<3>("h0") @[d_cache.scala 204:23]
            else :
              node _T_17 = eq(UInt<3>("h5"), state) @[d_cache.scala 132:18]
              when _T_17 : @[d_cache.scala 132:18]
                node _T_18 = eq(allvalid, UInt<1>("h0")) @[d_cache.scala 208:18]
                when _T_18 : @[d_cache.scala 208:28]
                  state <= UInt<3>("h1") @[d_cache.scala 209:23]
                  node _T_19 = bits(unvalidIndex, 7, 0) @[d_cache.scala 210:26]
                  infer mport MPORT_2 = cacheLine[_T_19], clock @[d_cache.scala 210:26]
                  node _T_20 = cat(receive_data[1], receive_data[0]) @[Cat.scala 31:58]
                  MPORT_2 <= _T_20 @[d_cache.scala 210:41]
                  node _T_21 = bits(unvalidIndex, 7, 0) @[d_cache.scala 211:23]
                  infer mport MPORT_3 = tagMem[_T_21], clock @[d_cache.scala 211:23]
                  MPORT_3 <= tag @[d_cache.scala 211:38]
                  node _T_22 = bits(unvalidIndex, 7, 0) @[d_cache.scala 212:25]
                  infer mport MPORT_4 = validMem[_T_22], clock @[d_cache.scala 212:25]
                  MPORT_4 <= UInt<1>("h1") @[d_cache.scala 212:40]
                  infer mport MPORT_5 = quene[index], clock @[d_cache.scala 216:22]
                  infer mport MPORT_6 = quene[index], clock @[d_cache.scala 216:39]
                  node _T_23 = dshl(MPORT_6, UInt<2>("h2")) @[d_cache.scala 216:47]
                  node _T_24 = or(_T_23, foundUnvalidIndex) @[d_cache.scala 216:55]
                  MPORT_5 <= _T_24 @[d_cache.scala 216:30]
                else :
                  node _T_25 = bits(replaceIndex, 7, 0) @[d_cache.scala 218:26]
                  infer mport MPORT_7 = cacheLine[_T_25], clock @[d_cache.scala 218:26]
                  node _T_26 = cat(receive_data[1], receive_data[0]) @[Cat.scala 31:58]
                  MPORT_7 <= _T_26 @[d_cache.scala 218:41]
                  node _T_27 = bits(replaceIndex, 7, 0) @[d_cache.scala 219:23]
                  infer mport MPORT_8 = tagMem[_T_27], clock @[d_cache.scala 219:23]
                  MPORT_8 <= tag @[d_cache.scala 219:38]
                  node _T_28 = bits(replaceIndex, 7, 0) @[d_cache.scala 220:25]
                  infer mport MPORT_9 = validMem[_T_28], clock @[d_cache.scala 220:25]
                  MPORT_9 <= UInt<1>("h1") @[d_cache.scala 220:40]
                  infer mport MPORT_10 = quene[index], clock @[d_cache.scala 221:22]
                  infer mport MPORT_11 = quene[index], clock @[d_cache.scala 221:39]
                  node _T_29 = dshl(MPORT_11, UInt<2>("h2")) @[d_cache.scala 221:47]
                  node _T_30 = or(_T_29, replace_way) @[d_cache.scala 221:55]
                  MPORT_10 <= _T_30 @[d_cache.scala 221:30]
                  node _T_31 = bits(replaceIndex, 7, 0) @[d_cache.scala 222:30]
                  infer mport MPORT_12 = dirtyMem[_T_31], clock @[d_cache.scala 222:30]
                  node _T_32 = eq(MPORT_12, UInt<1>("h1")) @[d_cache.scala 222:44]
                  when _T_32 : @[d_cache.scala 222:51]
                    node _write_back_data_T = bits(replaceIndex, 7, 0) @[d_cache.scala 224:49]
                    infer mport write_back_data_MPORT = cacheLine[_write_back_data_T], clock @[d_cache.scala 224:49]
                    write_back_data <= write_back_data_MPORT @[d_cache.scala 224:37]
                    node _write_back_addr_T = bits(replaceIndex, 7, 0) @[d_cache.scala 225:50]
                    infer mport write_back_addr_MPORT = tagMem[_write_back_addr_T], clock @[d_cache.scala 225:50]
                    node _write_back_addr_T_1 = mux(UInt<1>("h0"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 74:12]
                    node write_back_addr_hi = cat(write_back_addr_MPORT, index) @[Cat.scala 31:58]
                    node _write_back_addr_T_2 = cat(write_back_addr_hi, _write_back_addr_T_1) @[Cat.scala 31:58]
                    write_back_addr <= _write_back_addr_T_2 @[d_cache.scala 225:37]
                    node _T_33 = bits(replaceIndex, 7, 0) @[d_cache.scala 226:29]
                    infer mport MPORT_13 = dirtyMem[_T_33], clock @[d_cache.scala 226:29]
                    MPORT_13 <= UInt<1>("h0") @[d_cache.scala 226:44]
                    state <= UInt<3>("h6") @[d_cache.scala 227:27]
                  else :
                    state <= UInt<3>("h1") @[d_cache.scala 229:27]
              else :
                node _T_34 = eq(UInt<3>("h6"), state) @[d_cache.scala 132:18]
                when _T_34 : @[d_cache.scala 132:18]
                  io.to_axi.awaddr <= write_back_addr @[d_cache.scala 234:30]
                  io.to_axi.awvalid <= UInt<1>("h1") @[d_cache.scala 235:31]
                  io.to_axi.awlen <= UInt<1>("h1") @[d_cache.scala 236:29]
                  io.to_axi.awsize <= UInt<3>("h6") @[d_cache.scala 237:30]
                  io.to_axi.awburst <= UInt<1>("h1") @[d_cache.scala 238:31]
                  node _io_to_axi_wdata_T = bits(write_back_data, 63, 0) @[d_cache.scala 239:47]
                  io.to_axi.wdata <= _io_to_axi_wdata_T @[d_cache.scala 239:29]
                  io.to_axi.wstrb <= UInt<8>("hff") @[d_cache.scala 240:29]
                  io.to_axi.wlast <= UInt<1>("h1") @[d_cache.scala 241:29]
                  io.to_axi.wvalid <= UInt<1>("h1") @[d_cache.scala 242:30]
                  io.to_axi.bready <= UInt<1>("h1") @[d_cache.scala 243:30]
                  when io.from_axi.wready : @[d_cache.scala 244:37]
                    node _write_back_data_T_1 = dshr(write_back_data, UInt<7>("h40")) @[d_cache.scala 245:52]
                    write_back_data <= _write_back_data_T_1 @[d_cache.scala 245:33]
                  when io.from_axi.bvalid : @[d_cache.scala 247:37]
                    state <= UInt<3>("h1") @[d_cache.scala 248:23]

  extmodule MEM :
    input Raddr : UInt<64>
    output Rdata : UInt<64>
    input Waddr : UInt<64>
    input Wdata : UInt<64>
    input Wmask : UInt<8>
    input Write_en : UInt<1>
    input Read_en : UInt<1>
    defname = MEM

  module AXI :
    input clock : Clock
    input reset : Reset
    output io : { flip axi_in : { araddr : UInt<32>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arvalid : UInt<1>, rready : UInt<1>, awaddr : UInt<32>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awvalid : UInt<1>, wdata : UInt<64>, wstrb : UInt<8>, wlast : UInt<1>, wvalid : UInt<1>, bready : UInt<1>}, axi_out : { arready : UInt<1>, rdata : UInt<64>, rlast : UInt<1>, rvalid : UInt<1>, awready : UInt<1>, wready : UInt<1>, bvalid : UInt<1>}}

    reg axi_awready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[AXI.scala 13:30]
    reg axi_wready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[AXI.scala 14:29]
    reg axi_bvalid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXI.scala 17:29]
    reg axi_arready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[AXI.scala 19:30]
    reg axi_rvalid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[AXI.scala 21:29]
    reg arlen : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[AXI.scala 22:24]
    reg awlen : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[AXI.scala 23:24]
    reg araddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[AXI.scala 24:25]
    reg awaddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[AXI.scala 25:25]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXI.scala 28:24]
    inst Mem_modle of MEM @[AXI.scala 30:27]
    Mem_modle.Read_en is invalid
    Mem_modle.Write_en is invalid
    Mem_modle.Wmask is invalid
    Mem_modle.Wdata is invalid
    Mem_modle.Waddr is invalid
    Mem_modle.Rdata is invalid
    Mem_modle.Raddr is invalid
    node _Mem_modle_io_Raddr_T = eq(state, UInt<3>("h0")) @[AXI.scala 31:36]
    node _Mem_modle_io_Raddr_T_1 = mux(_Mem_modle_io_Raddr_T, io.axi_in.araddr, araddr) @[AXI.scala 31:30]
    Mem_modle.Raddr <= _Mem_modle_io_Raddr_T_1 @[AXI.scala 31:24]
    node _Mem_modle_io_Waddr_T = eq(state, UInt<3>("h0")) @[AXI.scala 32:36]
    node _Mem_modle_io_Waddr_T_1 = mux(_Mem_modle_io_Waddr_T, io.axi_in.awaddr, awaddr) @[AXI.scala 32:30]
    Mem_modle.Waddr <= _Mem_modle_io_Waddr_T_1 @[AXI.scala 32:24]
    Mem_modle.Wdata <= io.axi_in.wdata @[AXI.scala 33:24]
    Mem_modle.Wmask <= io.axi_in.wstrb @[AXI.scala 34:24]
    node _Mem_modle_io_Write_en_T = bits(axi_wready, 0, 0) @[AXI.scala 35:41]
    node _Mem_modle_io_Write_en_T_1 = and(_Mem_modle_io_Write_en_T, io.axi_in.awvalid) @[AXI.scala 35:48]
    Mem_modle.Write_en <= _Mem_modle_io_Write_en_T_1 @[AXI.scala 35:27]
    node _Mem_modle_io_Read_en_T = bits(axi_rvalid, 0, 0) @[AXI.scala 36:40]
    node _Mem_modle_io_Read_en_T_1 = and(_Mem_modle_io_Read_en_T, io.axi_in.arvalid) @[AXI.scala 36:47]
    Mem_modle.Read_en <= _Mem_modle_io_Read_en_T_1 @[AXI.scala 36:26]
    node _T = eq(UInt<3>("h0"), state) @[AXI.scala 41:18]
    when _T : @[AXI.scala 41:18]
      node _T_1 = and(io.axi_in.awvalid, io.axi_in.wvalid) @[AXI.scala 43:36]
      when _T_1 : @[AXI.scala 43:56]
        node _T_2 = eq(io.axi_in.awlen, UInt<1>("h0")) @[AXI.scala 44:37]
        when _T_2 : @[AXI.scala 44:44]
          state <= UInt<3>("h3") @[AXI.scala 45:27]
          axi_awready <= UInt<1>("h0") @[AXI.scala 46:33]
          axi_wready <= UInt<1>("h0") @[AXI.scala 47:32]
          axi_bvalid <= UInt<1>("h1") @[AXI.scala 48:32]
        else :
          state <= UInt<3>("h2") @[AXI.scala 50:27]
          axi_awready <= UInt<1>("h0") @[AXI.scala 51:33]
          node _awlen_T = sub(io.axi_in.awlen, UInt<1>("h1")) @[AXI.scala 54:46]
          node _awlen_T_1 = tail(_awlen_T, 1) @[AXI.scala 54:46]
          awlen <= _awlen_T_1 @[AXI.scala 54:27]
          node _awaddr_T = add(io.axi_in.awaddr, UInt<4>("h8")) @[AXI.scala 55:48]
          node _awaddr_T_1 = tail(_awaddr_T, 1) @[AXI.scala 55:48]
          awaddr <= _awaddr_T_1 @[AXI.scala 55:28]
      else :
        when io.axi_in.arvalid : @[AXI.scala 63:42]
          node _T_3 = eq(io.axi_in.arlen, UInt<1>("h0")) @[AXI.scala 64:37]
          when _T_3 : @[AXI.scala 64:44]
            state <= UInt<3>("h0") @[AXI.scala 65:27]
          else :
            state <= UInt<3>("h1") @[AXI.scala 67:27]
            node _arlen_T = sub(io.axi_in.arlen, UInt<1>("h1")) @[AXI.scala 68:46]
            node _arlen_T_1 = tail(_arlen_T, 1) @[AXI.scala 68:46]
            arlen <= _arlen_T_1 @[AXI.scala 68:27]
            node _araddr_T = add(io.axi_in.araddr, UInt<4>("h8")) @[AXI.scala 69:48]
            node _araddr_T_1 = tail(_araddr_T, 1) @[AXI.scala 69:48]
            araddr <= _araddr_T_1 @[AXI.scala 69:28]
            axi_arready <= UInt<1>("h0") @[AXI.scala 70:33]
    else :
      node _T_4 = eq(UInt<3>("h2"), state) @[AXI.scala 41:18]
      when _T_4 : @[AXI.scala 41:18]
        node _T_5 = eq(awlen, UInt<1>("h0")) @[AXI.scala 77:23]
        when _T_5 : @[AXI.scala 77:30]
          axi_wready <= UInt<1>("h0") @[AXI.scala 78:28]
          axi_awready <= UInt<1>("h0") @[AXI.scala 79:29]
          axi_bvalid <= UInt<1>("h1") @[AXI.scala 81:28]
          state <= UInt<3>("h3") @[AXI.scala 82:23]
        else :
          node _T_6 = bits(axi_wready, 0, 0) @[AXI.scala 84:53]
          node _T_7 = and(io.axi_in.wvalid, _T_6) @[AXI.scala 84:39]
          when _T_7 : @[AXI.scala 84:60]
            node _awaddr_T_2 = add(awaddr, UInt<4>("h8")) @[AXI.scala 85:38]
            node _awaddr_T_3 = tail(_awaddr_T_2, 1) @[AXI.scala 85:38]
            awaddr <= _awaddr_T_3 @[AXI.scala 85:28]
            node _awlen_T_2 = sub(awlen, UInt<1>("h1")) @[AXI.scala 86:36]
            node _awlen_T_3 = tail(_awlen_T_2, 1) @[AXI.scala 86:36]
            awlen <= _awlen_T_3 @[AXI.scala 86:27]
      else :
        node _T_8 = eq(UInt<3>("h1"), state) @[AXI.scala 41:18]
        when _T_8 : @[AXI.scala 41:18]
          node _T_9 = eq(arlen, UInt<1>("h0")) @[AXI.scala 91:23]
          when _T_9 : @[AXI.scala 91:30]
            when io.axi_in.rready : @[AXI.scala 92:39]
              state <= UInt<3>("h0") @[AXI.scala 93:27]
              axi_arready <= UInt<1>("h1") @[AXI.scala 94:33]
          else :
            when io.axi_in.rready : @[AXI.scala 98:39]
              node _araddr_T_2 = add(araddr, UInt<4>("h8")) @[AXI.scala 99:38]
              node _araddr_T_3 = tail(_araddr_T_2, 1) @[AXI.scala 99:38]
              araddr <= _araddr_T_3 @[AXI.scala 99:28]
              node _arlen_T_2 = sub(arlen, UInt<1>("h1")) @[AXI.scala 100:36]
              node _arlen_T_3 = tail(_arlen_T_2, 1) @[AXI.scala 100:36]
              arlen <= _arlen_T_3 @[AXI.scala 100:27]
        else :
          node _T_10 = eq(UInt<3>("h3"), state) @[AXI.scala 41:18]
          when _T_10 : @[AXI.scala 41:18]
            when io.axi_in.bready : @[AXI.scala 105:35]
              state <= UInt<3>("h0") @[AXI.scala 106:23]
              axi_bvalid <= UInt<1>("h0") @[AXI.scala 107:28]
              axi_awready <= UInt<1>("h1") @[AXI.scala 108:29]
              axi_wready <= UInt<1>("h1") @[AXI.scala 109:28]
    io.axi_out.arready <= axi_arready @[AXI.scala 120:24]
    io.axi_out.rdata <= Mem_modle.Rdata @[AXI.scala 121:22]
    io.axi_out.rvalid <= axi_rvalid @[AXI.scala 122:23]
    node _io_axi_out_rlast_T = eq(state, UInt<3>("h1")) @[AXI.scala 123:31]
    node _io_axi_out_rlast_T_1 = eq(arlen, UInt<1>("h0")) @[AXI.scala 123:50]
    node _io_axi_out_rlast_T_2 = and(_io_axi_out_rlast_T, _io_axi_out_rlast_T_1) @[AXI.scala 123:42]
    node _io_axi_out_rlast_T_3 = eq(io.axi_in.arlen, UInt<1>("h0")) @[AXI.scala 123:76]
    node _io_axi_out_rlast_T_4 = or(_io_axi_out_rlast_T_2, _io_axi_out_rlast_T_3) @[AXI.scala 123:58]
    io.axi_out.rlast <= _io_axi_out_rlast_T_4 @[AXI.scala 123:22]
    io.axi_out.awready <= axi_awready @[AXI.scala 124:24]
    io.axi_out.wready <= axi_wready @[AXI.scala 125:23]
    io.axi_out.bvalid <= axi_bvalid @[AXI.scala 126:23]

  extmodule DPI :
    input flag : UInt<32>
    input ecall_flag : UInt<32>
    input pc : UInt<64>
    defname = DPI

  module top :
    input clock : Clock
    input reset : UInt<1>
    output io : { inst : UInt<32>, pc : UInt<64>, step : UInt<1>, skip : UInt<1>}

    inst Register of Register @[top.scala 16:25]
    Register.clock <= clock
    Register.reset <= reset
    inst IFU of IFU @[top.scala 17:21]
    IFU.clock <= clock
    IFU.reset <= reset
    inst IDU of IDU @[top.scala 18:21]
    IDU.clock <= clock
    IDU.reset <= reset
    inst EXU of EXU @[top.scala 19:21]
    EXU.clock <= clock
    EXU.reset <= reset
    inst LSU of LSU @[top.scala 20:21]
    LSU.clock <= clock
    LSU.reset <= reset
    inst WBU of WBU @[top.scala 21:21]
    WBU.clock <= clock
    WBU.reset <= reset
    inst arbiter of AXI_ARBITER @[top.scala 22:25]
    arbiter.clock <= clock
    arbiter.reset <= reset
    inst i_cache of I_CACHE @[top.scala 23:25]
    i_cache.clock <= clock
    i_cache.reset <= reset
    inst d_cache of D_CACHE @[top.scala 24:25]
    d_cache.clock <= clock
    d_cache.reset <= reset
    inst axi of AXI @[top.scala 25:21]
    axi.clock <= clock
    axi.reset <= reset
    arbiter.io.ifu_axi_in <= i_cache.io.to_axi @[top.scala 28:27]
    i_cache.io.from_axi <= arbiter.io.ifu_axi_out @[top.scala 29:25]
    IFU.io.axi_in <= i_cache.io.to_ifu @[top.scala 30:16]
    i_cache.io.from_ifu <= IFU.io.axi_out @[top.scala 31:25]
    arbiter.io.lsu_axi_in <= d_cache.io.to_axi @[top.scala 33:27]
    d_cache.io.from_axi <= arbiter.io.lsu_axi_out @[top.scala 34:25]
    LSU.io.axi_in <= d_cache.io.to_lsu @[top.scala 35:16]
    d_cache.io.from_lsu <= LSU.io.axi_out @[top.scala 36:25]
    arbiter.io.axi_in <= axi.io.axi_out @[top.scala 38:23]
    axi.io.axi_in <= arbiter.io.axi_out @[top.scala 39:19]
    IFU.io.ds_valid <= IDU.io.ds_valid @[top.scala 43:18]
    IFU.io.ds_ready_go <= IDU.io.ds_ready_go @[top.scala 44:21]
    IFU.io.ds_allowin <= IDU.io.ds_allowin @[top.scala 45:20]
    IFU.io.br_taken <= IDU.io.br_taken @[top.scala 46:18]
    IFU.io.br_target <= IDU.io.br_target @[top.scala 47:19]
    IFU.io.fence <= IDU.io.fence @[top.scala 49:15]
    IFU.io.cache_init <= i_cache.io.cache_init @[top.scala 50:20]
    i_cache.io.clear_cache <= IFU.io.clear_cache @[top.scala 51:28]
    IDU.io.pc <= IFU.io.to_ds_pc @[top.scala 53:12]
    IDU.io.fs_to_ds_valid <= IFU.io.fs_to_ds_valid @[top.scala 54:24]
    IDU.io.es_allowin <= EXU.io.es_allowin @[top.scala 55:20]
    IDU.io.from_fs_inst <= IFU.io.inst @[top.scala 56:22]
    Register.io.raddr1 <= IDU.io.raddr1 @[top.scala 57:20]
    Register.io.raddr2 <= IDU.io.raddr2 @[top.scala 58:20]
    IDU.io.rdata1 <= Register.io.rdata1 @[top.scala 59:16]
    IDU.io.rdata2 <= Register.io.rdata2 @[top.scala 60:16]
    IDU.io.es_valid <= EXU.io.es_valid @[top.scala 61:18]
    IDU.io.es_rf_dst <= EXU.io.es_rf_dst @[top.scala 62:19]
    IDU.io.es_rf_we <= EXU.io.es_rf_we @[top.scala 63:18]
    IDU.io.ms_valid <= LSU.io.ms_valid @[top.scala 64:18]
    IDU.io.ms_rf_dst <= LSU.io.ms_rf_dst @[top.scala 65:19]
    IDU.io.ms_rf_we <= LSU.io.ms_rf_we @[top.scala 66:18]
    IDU.io.ws_valid <= WBU.io.ws_valid @[top.scala 67:18]
    IDU.io.ws_rf_dst <= WBU.io.ws_rf_dst @[top.scala 68:19]
    IDU.io.ws_rf_we <= WBU.io.ws_rf_we @[top.scala 69:18]
    IDU.io.es_fwd_ready <= EXU.io.es_fwd_ready @[top.scala 70:22]
    IDU.io.es_fwd_res <= EXU.io.es_fwd_res @[top.scala 71:20]
    IDU.io.ms_fwd_ready <= LSU.io.ms_fwd_ready @[top.scala 72:22]
    IDU.io.ms_fwd_res <= LSU.io.ms_fwd_res @[top.scala 73:20]
    IDU.io.ws_fwd_ready <= WBU.io.ws_fwd_ready @[top.scala 74:22]
    IDU.io.ws_fwd_res <= WBU.io.ws_fwd_res @[top.scala 75:20]
    IDU.io.es_ld <= EXU.io.es_ld @[top.scala 76:15]
    EXU.io.pc <= IDU.io.to_es_pc @[top.scala 78:12]
    EXU.io.ds_to_es_valid <= IDU.io.ds_to_es_valid @[top.scala 79:24]
    EXU.io.ms_allowin <= LSU.io.ms_allowin @[top.scala 80:20]
    EXU.io.ALUop <= IDU.io.ALUop @[top.scala 81:15]
    EXU.io.src1_value <= IDU.io.src1 @[top.scala 82:20]
    EXU.io.src2_value <= IDU.io.src2 @[top.scala 83:20]
    EXU.io.rf_dst <= IDU.io.rf_dst @[top.scala 84:16]
    EXU.io.store_data <= IDU.io.store_data @[top.scala 85:20]
    EXU.io.ctrl_sign.Wmask <= IDU.io.ctrl_sign.Wmask @[top.scala 86:19]
    EXU.io.ctrl_sign.Readmem_en <= IDU.io.ctrl_sign.Readmem_en @[top.scala 86:19]
    EXU.io.ctrl_sign.Writemem_en <= IDU.io.ctrl_sign.Writemem_en @[top.scala 86:19]
    EXU.io.ctrl_sign.csr_write <= IDU.io.ctrl_sign.csr_write @[top.scala 86:19]
    EXU.io.ctrl_sign.reg_write <= IDU.io.ctrl_sign.reg_write @[top.scala 86:19]
    EXU.io.load_type <= IDU.io.load_type @[top.scala 87:19]
    LSU.io.pc <= EXU.io.to_ms_pc @[top.scala 89:12]
    LSU.io.es_to_ms_valid <= EXU.io.es_to_ms_valid @[top.scala 90:24]
    LSU.io.ws_allowin <= WBU.io.ws_allowin @[top.scala 91:20]
    LSU.io.rf_we <= EXU.io.to_ms_rf_we @[top.scala 92:15]
    LSU.io.rf_dst <= EXU.io.to_ms_rf_dst @[top.scala 93:16]
    LSU.io.alu_res <= EXU.io.to_ms_alures @[top.scala 94:17]
    LSU.io.store_data <= EXU.io.to_ms_store_data @[top.scala 95:20]
    LSU.io.wen <= EXU.io.to_ms_wen @[top.scala 96:13]
    LSU.io.wstrb <= EXU.io.to_ms_wstrb @[top.scala 97:15]
    LSU.io.ren <= EXU.io.to_ms_ren @[top.scala 98:13]
    LSU.io.maddr <= EXU.io.to_ms_maddr @[top.scala 99:15]
    LSU.io.load_type <= EXU.io.to_ms_load_type @[top.scala 100:19]
    WBU.io.pc <= LSU.io.to_ws_pc @[top.scala 102:12]
    WBU.io.ms_to_ws_valid <= LSU.io.ms_to_ws_valid @[top.scala 103:24]
    WBU.io.ms_final_res <= LSU.io.ms_final_res @[top.scala 104:22]
    WBU.io.rf_we <= LSU.io.to_ws_rf_we @[top.scala 105:15]
    WBU.io.rf_dst <= LSU.io.to_ws_rf_dst @[top.scala 106:16]
    WBU.io.device_access <= LSU.io.to_ws_device @[top.scala 107:23]
    Register.io.we <= WBU.io.we @[top.scala 108:16]
    Register.io.waddr <= WBU.io.waddr @[top.scala 109:19]
    Register.io.wdata <= WBU.io.wdata @[top.scala 110:19]
    io.pc <= IFU.io.to_ds_pc @[top.scala 112:11]
    io.inst <= IFU.io.inst @[top.scala 114:13]
    reg diff_step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[top.scala 115:28]
    diff_step <= WBU.io.ws_valid @[top.scala 116:15]
    io.step <= diff_step @[top.scala 117:13]
    reg skip : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[top.scala 118:23]
    skip <= WBU.io.skip @[top.scala 119:10]
    io.skip <= skip @[top.scala 120:13]
    inst dpi of DPI @[top.scala 121:21]
    dpi.pc is invalid
    dpi.ecall_flag is invalid
    dpi.flag is invalid
    node _dpi_io_flag_T = eq(IDU.io.ALUop, UInt<2>("h2")) @[top.scala 122:34]
    node _dpi_io_flag_T_1 = mux(_dpi_io_flag_T, UInt<1>("h1"), UInt<1>("h0")) @[top.scala 122:23]
    dpi.flag <= _dpi_io_flag_T_1 @[top.scala 122:17]
    node _dpi_io_ecall_flag_T = eq(IDU.io.ALUop, UInt<6>("h3d")) @[top.scala 123:40]
    node _dpi_io_ecall_flag_T_1 = mux(_dpi_io_ecall_flag_T, UInt<1>("h1"), UInt<1>("h0")) @[top.scala 123:29]
    dpi.ecall_flag <= _dpi_io_ecall_flag_T_1 @[top.scala 123:23]
    node _dpi_io_pc_T = mux(IDU.io.ds_valid, EXU.io.pc, IDU.io.pc) @[top.scala 124:96]
    node _dpi_io_pc_T_1 = mux(EXU.io.es_valid, LSU.io.pc, _dpi_io_pc_T) @[top.scala 124:72]
    node _dpi_io_pc_T_2 = mux(LSU.io.ms_valid, WBU.io.pc, _dpi_io_pc_T_1) @[top.scala 124:48]
    node _dpi_io_pc_T_3 = mux(WBU.io.ws_valid, WBU.io.ws_pc, _dpi_io_pc_T_2) @[top.scala 124:21]
    dpi.pc <= _dpi_io_pc_T_3 @[top.scala 124:15]

